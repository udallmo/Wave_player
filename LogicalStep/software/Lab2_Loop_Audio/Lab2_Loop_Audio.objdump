
Lab2_Loop_Audio.elf:     file format elf32-littlenios2
Lab2_Loop_Audio.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00006a34 memsz 0x00006a34 flags r-x
    LOAD off    0x00007a54 vaddr 0x00806a54 paddr 0x008076d8 align 2**12
         filesz 0x00000c84 memsz 0x00000c84 flags rw-
    LOAD off    0x0000935c vaddr 0x0080835c paddr 0x0080835c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000064c4  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  00806708  00806708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c84  00806a54  008076d8  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0080835c  0080835c  0000935c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008084b0  008084b0  000086d8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000086d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000af0  00000000  00000000  00008700  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000177e1  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000064c8  00000000  00000000  000209d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006ff9  00000000  00000000  00026e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a28  00000000  00000000  0002de94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d89  00000000  00000000  0002f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000031f7  00000000  00000000  00032645  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003583c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004a0  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003897d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00038980  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003898c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003898d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003898e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00038992  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00038996  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003899a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000389a5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000389b0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000389bb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000028  00000000  00000000  000389be  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c54  00000000  00000000  000389e6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fff9  00000000  00000000  0003c63a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00806708 l    d  .rodata	00000000 .rodata
00806a54 l    d  .rwdata	00000000 .rwdata
0080835c l    d  .bss	00000000 .bss
008084b0 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_Loop_Audio_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00800350 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800718 l     F .text	00000038 alt_dev_reg
00806a54 l     O .rwdata	0000002c jtag_uart_0
00806a80 l     O .rwdata	00000120 lcd_display
00806ba0 l     O .rwdata	000000c4 uart
00806c64 l     O .rwdata	00000030 audio_i2c_config
00806c94 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00807698 l     O .rwdata	00000004 colstart
00800a40 l     F .text	000000b4 lcd_write_command
00800af4 l     F .text	000000d4 lcd_write_data
00800bc8 l     F .text	000000cc lcd_clear_screen
00800c94 l     F .text	000001e8 lcd_repaint_screen
00800e7c l     F .text	000000c8 lcd_scroll_up
00800f44 l     F .text	000002a0 lcd_handle_escape
008016cc l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00801ac0 l     F .text	0000009c altera_avalon_uart_irq
00801b5c l     F .text	000000e0 altera_avalon_uart_rxirq
00801c3c l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00801dd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00802000 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00802ad0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802c34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802c60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802ecc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008031b4 l     F .text	00000050 alt_get_errno
00803204 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008068cd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00806e6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008047c8 l     F .text	00000008 __fp_lock
008047d0 l     F .text	00000008 __fp_unlock
008047e4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00805f0c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080606c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080616c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00806260 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
008063c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
008076d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008065c0 l     F .text	00000050 alt_get_errno
00808374 g     O .bss	00000004 alt_instruction_exception_handler
00805e00 g     F .text	00000054 _isatty_r
00800434 g     F .text	00000078 alt_main
008083b0 g     O .bss	00000100 alt_irq
00805e54 g     F .text	0000005c _lseek_r
008076d8 g       *ABS*	00000000 __flash_rwdata_start
00802494 g     F .text	00000060 alt_up_audio_read_fifo_avail
008084b0 g       *ABS*	00000000 __alt_heap_start
008024f4 g     F .text	00000068 alt_up_audio_record_r
00805b90 g     F .text	0000005c __sseek
00804b18 g     F .text	00000010 __sinit
00803fe4 g     F .text	00000138 __swbuf_r
00804980 g     F .text	00000068 __sfmoreglue
008063a4 g     F .text	00000020 __malloc_unlock
00802404 g     F .text	00000090 alt_up_audio_reset_audio_core
00804b00 g     F .text	00000018 _cleanup
00803654 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805da8 g     F .text	00000058 _fstat_r
00808378 g     O .bss	00000004 errno
00805b0c g     F .text	00000008 __seofread
008023c4 g     F .text	00000040 alt_up_audio_write_interrupt_pending
00808360 g     O .bss	00000004 alt_argv
0080f698 g       *ABS*	00000000 _gp
00803624 g     F .text	00000030 usleep
00806cec g     O .rwdata	00000180 alt_fd_list
00802e0c g     F .text	00000090 alt_find_dev
00803b84 g     F .text	00000138 memcpy
008047d8 g     F .text	0000000c _cleanup_r
00802f8c g     F .text	00000078 alt_io_redirect
00806708 g       *ABS*	00000000 __DTOR_END__
00803a20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008028dc g     F .text	00000050 alt_up_audio_read_fifo_head
008008c8 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00806028 g     F .text	00000008 .hidden __udivsi3
008061bc g     F .text	000000a4 isatty
00803994 g     F .text	0000008c alt_icache_flush
00808384 g     O .bss	00000004 __malloc_top_pad
00805a64 g     F .text	00000054 _sbrk_r
00805eb0 g     F .text	0000005c _read_r
008076ac g     O .rwdata	00000004 alt_max_fd
0080292c g     F .text	00000064 alt_up_audio_write_fifo_head
00805ca4 g     F .text	000000f0 _fclose_r
00804798 g     F .text	00000030 fflush
00808380 g     O .bss	00000004 __malloc_max_sbrked_mem
00803004 g     F .text	000001b0 alt_irq_register
008062b0 g     F .text	000000d4 lseek
008076c4 g     O .rwdata	00000004 _global_impure_ptr
008084b0 g       *ABS*	00000000 __bss_end
00803520 g     F .text	00000104 alt_tick
00801a20 g     F .text	000000a0 altera_avalon_uart_init
008021fc g     F .text	00000040 alt_up_audio_open_dev
00804b38 g     F .text	00000018 __fp_lock_all
00802624 g     F .text	00000068 alt_up_audio_play_r
00803488 g     F .text	00000098 alt_alarm_stop
00808368 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
00806cc4 g     O .rwdata	00000028 alt_dev_null
00802bf0 g     F .text	00000044 alt_dcache_flush_all
008076d8 g       *ABS*	00000000 __ram_rwdata_end
008076a4 g     O .rwdata	00000008 alt_dev_list
00806610 g     F .text	000000f8 write
00803de0 g     F .text	000000a0 _putc_r
00806a54 g       *ABS*	00000000 __ram_rodata_end
008060bc g     F .text	000000b0 fstat
00806030 g     F .text	00000008 .hidden __umodsi3
008084b0 g       *ABS*	00000000 end
008011e4 g     F .text	000004e8 altera_avalon_lcd_16207_write
00802050 g     F .text	000001ac altera_avalon_uart_write
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00806708 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801970 g     F .text	00000060 altera_avalon_uart_write_fd
008019d0 g     F .text	00000050 altera_avalon_uart_close_fd
008009ac g     F .text	00000094 altera_avalon_jtag_uart_write
00804b28 g     F .text	00000004 __sfp_lock_acquire
00804c8c g     F .text	000002f0 _free_r
008004ac g     F .text	00000228 alt_printf
008043a0 g     F .text	00000194 __call_exitprocs
008076cc g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0080836c g     O .bss	00000004 _alt_tick_rate
008027d4 g     F .text	00000108 alt_up_audio_write_fifo
00808370 g     O .bss	00000004 _alt_nticks
00806414 g     F .text	000000fc read
00800784 g     F .text	00000084 alt_sys_init
008026f4 g     F .text	000000e0 alt_up_audio_read_fifo
0080428c g     F .text	00000114 __register_exitproc
00802330 g     F .text	00000054 alt_up_audio_disable_write_interrupt
00806a54 g       *ABS*	00000000 __ram_rwdata_start
00806708 g       *ABS*	00000000 __ram_rodata_start
00808388 g     O .bss	00000028 __malloc_current_mallinfo
00800808 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008038e0 g     F .text	000000b4 alt_get_fd
00803674 g     F .text	00000158 alt_busy_sleep
00805c50 g     F .text	00000054 _close_r
008022e0 g     F .text	00000050 alt_up_audio_enable_write_interrupt
00803b08 g     F .text	0000007c memcmp
008084b0 g       *ABS*	00000000 __alt_stack_base
00804138 g     F .text	00000154 __swsetup_r
0080228c g     F .text	00000054 alt_up_audio_disable_read_interrupt
008049e8 g     F .text	00000118 __sfp
00807290 g     O .rwdata	00000408 __malloc_av_
00804b34 g     F .text	00000004 __sinit_lock_release
00805ab8 g     F .text	00000054 __sread
008037cc g     F .text	00000114 alt_find_file
00802cb0 g     F .text	000000a4 alt_dev_llist_insert
00806384 g     F .text	00000020 __malloc_lock
00806510 g     F .text	000000b0 sbrk
0080473c g     F .text	0000005c _fflush_r
0080835c g       *ABS*	00000000 __bss_start
00803cbc g     F .text	00000124 memset
00800290 g     F .text	000000c0 main
008025c4 g     F .text	00000060 alt_up_audio_write_fifo_space
00808364 g     O .bss	00000004 alt_envp
0080837c g     O .bss	00000004 __malloc_max_total_mem
00800868 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080411c g     F .text	0000001c __swbuf
00801778 g     F .text	00000138 altera_avalon_lcd_16207_init
00805bec g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00805d94 g     F .text	00000014 fclose
008052bc g     F .text	000007a8 _malloc_r
008076b0 g     O .rwdata	00000004 alt_errno
00804f7c g     F .text	000000c4 _fwalk
00803e80 g     F .text	000000cc putc
00805f78 g     F .text	00000054 .hidden __divsi3
00804b68 g     F .text	00000124 _malloc_trim_r
00806708 g       *ABS*	00000000 __CTOR_END__
00806708 g       *ABS*	00000000 __flash_rodata_start
00806708 g       *ABS*	00000000 __DTOR_LIST__
00800750 g     F .text	00000034 alt_irq_init
00803428 g     F .text	00000060 alt_release_fd
00803abc g     F .text	00000014 atexit
00805bf4 g     F .text	0000005c _write_r
008076c8 g     O .rwdata	00000004 _impure_ptr
0080835c g     O .bss	00000004 alt_argc
00804534 g     F .text	00000208 __sflush_r
00802db0 g     F .text	0000005c _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00804b50 g     F .text	00000018 __fp_unlock_all
008018b0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080769c g     O .rwdata	00000008 alt_fs_list
0080255c g     F .text	00000068 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
008076d8 g       *ABS*	00000000 _edata
00801910 g     F .text	00000060 altera_avalon_uart_read_fd
008084b0 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080268c g     F .text	00000068 alt_up_audio_play_l
00805b14 g     F .text	0000007c __swrite
008076d0 g     O .rwdata	00000004 __malloc_trim_threshold
00803ad0 g     F .text	00000038 exit
00805040 g     F .text	000000c4 _fwalk_reent
00805fcc g     F .text	0000005c .hidden __modsi3
008076c0 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804b2c g     F .text	00000004 __sfp_lock_release
008067cc g     O .rodata	00000101 _ctype_
00801d80 g     F .text	00000054 altera_avalon_uart_close
00806038 g     F .text	00000034 _exit
00802990 g     F .text	00000140 alt_alarm_start
00805104 g     F .text	000001b8 __smakebuf_r
00803f4c g     F .text	00000098 strlen
008032d0 g     F .text	00000158 open
008006d4 g     F .text	00000044 alt_putchar
00802e9c g     F .text	00000030 alt_icache_flush_all
008076b4 g     O .rwdata	00000004 alt_priority_mask
00801e24 g     F .text	000001dc altera_avalon_uart_read
008076b8 g     O .rwdata	00000008 alt_alarm_list
00802d54 g     F .text	0000005c _do_ctors
00802b20 g     F .text	000000d0 close
008003b4 g     F .text	00000080 alt_load
0080223c g     F .text	00000050 alt_up_audio_enable_read_interrupt
00000000  w      *UND*	00000000 free
00804b30 g     F .text	00000004 __sinit_lock_acquire
00802384 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10a0ec04 	addi	r2,r2,-31824
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10a0ec04 	addi	r2,r2,-31824
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a33717 	ldw	r2,-29476(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a33717 	ldw	r2,-29476(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6bda614 	ori	gp,gp,63128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10a0d714 	ori	r2,r2,33628

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18e12c14 	ori	r3,r3,33968

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08003b40 	call	8003b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08004340 	call	800434 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include "altera_up_avalon_audio.h"
int main(void) {
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	df000404 	addi	fp,sp,16
	alt_up_audio_dev * audio_dev;
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;
// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/Audio");
  8002a0:	01002034 	movhi	r4,128
  8002a4:	2119c204 	addi	r4,r4,26376
  8002a8:	08021fc0 	call	8021fc <alt_up_audio_open_dev>
  8002ac:	e0bffc15 	stw	r2,-16(fp)
	if (audio_dev == NULL)
  8002b0:	e0bffc17 	ldw	r2,-16(fp)
  8002b4:	1000041e 	bne	r2,zero,8002c8 <main+0x38>
		alt_printf("Error: could not open audio device \n");
  8002b8:	01002034 	movhi	r4,128
  8002bc:	2119c504 	addi	r4,r4,26388
  8002c0:	08004ac0 	call	8004ac <alt_printf>
  8002c4:	00000306 	br	8002d4 <main+0x44>
	else
		alt_printf("Opened audio device \n");
  8002c8:	01002034 	movhi	r4,128
  8002cc:	2119cf04 	addi	r4,r4,26428
  8002d0:	08004ac0 	call	8004ac <alt_printf>
	/* read and echo audio data */
	while (1) {
		int fifospace = alt_up_audio_read_fifo_avail(audio_dev,
  8002d4:	e13ffc17 	ldw	r4,-16(fp)
  8002d8:	01400044 	movi	r5,1
  8002dc:	08024940 	call	802494 <alt_up_audio_read_fifo_avail>
  8002e0:	e0bffd15 	stw	r2,-12(fp)
				ALT_UP_AUDIO_RIGHT);
		if (fifospace > 0) // check if data is available
  8002e4:	e0bffd17 	ldw	r2,-12(fp)
  8002e8:	0080180e 	bge	zero,r2,80034c <main+0xbc>
				{
// read audio buffer
			alt_up_audio_read_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  8002ec:	e0bfff04 	addi	r2,fp,-4
  8002f0:	e13ffc17 	ldw	r4,-16(fp)
  8002f4:	100b883a 	mov	r5,r2
  8002f8:	01800044 	movi	r6,1
  8002fc:	01c00044 	movi	r7,1
  800300:	08026f40 	call	8026f4 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  800304:	e0bffe04 	addi	r2,fp,-8
  800308:	e13ffc17 	ldw	r4,-16(fp)
  80030c:	100b883a 	mov	r5,r2
  800310:	01800044 	movi	r6,1
  800314:	000f883a 	mov	r7,zero
  800318:	08026f40 	call	8026f4 <alt_up_audio_read_fifo>
// write audio buffer
			alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  80031c:	e0bfff04 	addi	r2,fp,-4
  800320:	e13ffc17 	ldw	r4,-16(fp)
  800324:	100b883a 	mov	r5,r2
  800328:	01800044 	movi	r6,1
  80032c:	01c00044 	movi	r7,1
  800330:	08027d40 	call	8027d4 <alt_up_audio_write_fifo>
			alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  800334:	e0bffe04 	addi	r2,fp,-8
  800338:	e13ffc17 	ldw	r4,-16(fp)
  80033c:	100b883a 	mov	r5,r2
  800340:	01800044 	movi	r6,1
  800344:	000f883a 	mov	r7,zero
  800348:	08027d40 	call	8027d4 <alt_up_audio_write_fifo>
		}
	}
  80034c:	003fe106 	br	8002d4 <__alt_data_end+0xff8002d4>

00800350 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800350:	defffc04 	addi	sp,sp,-16
  800354:	df000315 	stw	fp,12(sp)
  800358:	df000304 	addi	fp,sp,12
  80035c:	e13ffd15 	stw	r4,-12(fp)
  800360:	e17ffe15 	stw	r5,-8(fp)
  800364:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800368:	e0fffe17 	ldw	r3,-8(fp)
  80036c:	e0bffd17 	ldw	r2,-12(fp)
  800370:	18800c26 	beq	r3,r2,8003a4 <alt_load_section+0x54>
  {
    while( to != end )
  800374:	00000806 	br	800398 <alt_load_section+0x48>
    {
      *to++ = *from++;
  800378:	e0bffe17 	ldw	r2,-8(fp)
  80037c:	10c00104 	addi	r3,r2,4
  800380:	e0fffe15 	stw	r3,-8(fp)
  800384:	e0fffd17 	ldw	r3,-12(fp)
  800388:	19000104 	addi	r4,r3,4
  80038c:	e13ffd15 	stw	r4,-12(fp)
  800390:	18c00017 	ldw	r3,0(r3)
  800394:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800398:	e0fffe17 	ldw	r3,-8(fp)
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	18bff51e 	bne	r3,r2,800378 <__alt_data_end+0xff800378>
    {
      *to++ = *from++;
    }
  }
}
  8003a4:	e037883a 	mov	sp,fp
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00104 	addi	sp,sp,4
  8003b0:	f800283a 	ret

008003b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8003b4:	defffe04 	addi	sp,sp,-8
  8003b8:	dfc00115 	stw	ra,4(sp)
  8003bc:	df000015 	stw	fp,0(sp)
  8003c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8003c4:	01002034 	movhi	r4,128
  8003c8:	211db604 	addi	r4,r4,30424
  8003cc:	01402034 	movhi	r5,128
  8003d0:	295a9504 	addi	r5,r5,27220
  8003d4:	01802034 	movhi	r6,128
  8003d8:	319db604 	addi	r6,r6,30424
  8003dc:	08003500 	call	800350 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8003e0:	01002034 	movhi	r4,128
  8003e4:	21000804 	addi	r4,r4,32
  8003e8:	01402034 	movhi	r5,128
  8003ec:	29400804 	addi	r5,r5,32
  8003f0:	01802034 	movhi	r6,128
  8003f4:	31809104 	addi	r6,r6,580
  8003f8:	08003500 	call	800350 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8003fc:	01002034 	movhi	r4,128
  800400:	2119c204 	addi	r4,r4,26376
  800404:	01402034 	movhi	r5,128
  800408:	2959c204 	addi	r5,r5,26376
  80040c:	01802034 	movhi	r6,128
  800410:	319a9504 	addi	r6,r6,27220
  800414:	08003500 	call	800350 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800418:	0802bf00 	call	802bf0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80041c:	0802e9c0 	call	802e9c <alt_icache_flush_all>
}
  800420:	e037883a 	mov	sp,fp
  800424:	dfc00117 	ldw	ra,4(sp)
  800428:	df000017 	ldw	fp,0(sp)
  80042c:	dec00204 	addi	sp,sp,8
  800430:	f800283a 	ret

00800434 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800434:	defffd04 	addi	sp,sp,-12
  800438:	dfc00215 	stw	ra,8(sp)
  80043c:	df000115 	stw	fp,4(sp)
  800440:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800444:	0009883a 	mov	r4,zero
  800448:	08007500 	call	800750 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80044c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800450:	08007840 	call	800784 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800454:	01002034 	movhi	r4,128
  800458:	2119d504 	addi	r4,r4,26452
  80045c:	01402034 	movhi	r5,128
  800460:	2959d504 	addi	r5,r5,26452
  800464:	01802034 	movhi	r6,128
  800468:	3199d504 	addi	r6,r6,26452
  80046c:	0802f8c0 	call	802f8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800470:	0802d540 	call	802d54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800474:	01002034 	movhi	r4,128
  800478:	210b6c04 	addi	r4,r4,11696
  80047c:	0803abc0 	call	803abc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800480:	d1233117 	ldw	r4,-29500(gp)
  800484:	d0e33217 	ldw	r3,-29496(gp)
  800488:	d0a33317 	ldw	r2,-29492(gp)
  80048c:	180b883a 	mov	r5,r3
  800490:	100d883a 	mov	r6,r2
  800494:	08002900 	call	800290 <main>
  800498:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80049c:	01000044 	movi	r4,1
  8004a0:	0802b200 	call	802b20 <close>
  exit (result);
  8004a4:	e13fff17 	ldw	r4,-4(fp)
  8004a8:	0803ad00 	call	803ad0 <exit>

008004ac <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  8004ac:	defff204 	addi	sp,sp,-56
  8004b0:	dfc00a15 	stw	ra,40(sp)
  8004b4:	df000915 	stw	fp,36(sp)
  8004b8:	df000904 	addi	fp,sp,36
  8004bc:	e1400215 	stw	r5,8(fp)
  8004c0:	e1800315 	stw	r6,12(fp)
  8004c4:	e1c00415 	stw	r7,16(fp)
  8004c8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  8004cc:	e0800204 	addi	r2,fp,8
  8004d0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  8004d4:	e0bfff17 	ldw	r2,-4(fp)
  8004d8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  8004dc:	00007106 	br	8006a4 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8004e0:	e0bff807 	ldb	r2,-32(fp)
  8004e4:	10800960 	cmpeqi	r2,r2,37
  8004e8:	1000041e 	bne	r2,zero,8004fc <alt_printf+0x50>
        {
            alt_putchar(c);
  8004ec:	e0bff807 	ldb	r2,-32(fp)
  8004f0:	1009883a 	mov	r4,r2
  8004f4:	08006d40 	call	8006d4 <alt_putchar>
  8004f8:	00006a06 	br	8006a4 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  8004fc:	e0bff717 	ldw	r2,-36(fp)
  800500:	10c00044 	addi	r3,r2,1
  800504:	e0fff715 	stw	r3,-36(fp)
  800508:	10800003 	ldbu	r2,0(r2)
  80050c:	e0bff805 	stb	r2,-32(fp)
  800510:	e0bff807 	ldb	r2,-32(fp)
  800514:	10006226 	beq	r2,zero,8006a0 <alt_printf+0x1f4>
            {
                if (c == '%')
  800518:	e0bff807 	ldb	r2,-32(fp)
  80051c:	10800958 	cmpnei	r2,r2,37
  800520:	1000041e 	bne	r2,zero,800534 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  800524:	e0bff807 	ldb	r2,-32(fp)
  800528:	1009883a 	mov	r4,r2
  80052c:	08006d40 	call	8006d4 <alt_putchar>
  800530:	00005c06 	br	8006a4 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
  800534:	e0bff807 	ldb	r2,-32(fp)
  800538:	108018d8 	cmpnei	r2,r2,99
  80053c:	1000081e 	bne	r2,zero,800560 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  800540:	e0bffe17 	ldw	r2,-8(fp)
  800544:	10c00104 	addi	r3,r2,4
  800548:	e0fffe15 	stw	r3,-8(fp)
  80054c:	10800017 	ldw	r2,0(r2)
  800550:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  800554:	e13ffd17 	ldw	r4,-12(fp)
  800558:	08006d40 	call	8006d4 <alt_putchar>
  80055c:	00005106 	br	8006a4 <alt_printf+0x1f8>
                }
                else if (c == 'x')
  800560:	e0bff807 	ldb	r2,-32(fp)
  800564:	10801e18 	cmpnei	r2,r2,120
  800568:	1000341e 	bne	r2,zero,80063c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80056c:	e0bffe17 	ldw	r2,-8(fp)
  800570:	10c00104 	addi	r3,r2,4
  800574:	e0fffe15 	stw	r3,-8(fp)
  800578:	10800017 	ldw	r2,0(r2)
  80057c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  800580:	e0bffb17 	ldw	r2,-20(fp)
  800584:	1000031e 	bne	r2,zero,800594 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  800588:	01000c04 	movi	r4,48
  80058c:	08006d40 	call	8006d4 <alt_putchar>
                        continue;
  800590:	00004406 	br	8006a4 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  800594:	00800704 	movi	r2,28
  800598:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  80059c:	00000306 	br	8005ac <alt_printf+0x100>
                        digit_shift -= 4;
  8005a0:	e0bff917 	ldw	r2,-28(fp)
  8005a4:	10bfff04 	addi	r2,r2,-4
  8005a8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  8005ac:	00c003c4 	movi	r3,15
  8005b0:	e0bff917 	ldw	r2,-28(fp)
  8005b4:	1884983a 	sll	r2,r3,r2
  8005b8:	1007883a 	mov	r3,r2
  8005bc:	e0bffb17 	ldw	r2,-20(fp)
  8005c0:	1884703a 	and	r2,r3,r2
  8005c4:	103ff626 	beq	r2,zero,8005a0 <__alt_data_end+0xff8005a0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  8005c8:	00001906 	br	800630 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  8005cc:	00c003c4 	movi	r3,15
  8005d0:	e0bff917 	ldw	r2,-28(fp)
  8005d4:	1884983a 	sll	r2,r3,r2
  8005d8:	1007883a 	mov	r3,r2
  8005dc:	e0bffb17 	ldw	r2,-20(fp)
  8005e0:	1886703a 	and	r3,r3,r2
  8005e4:	e0bff917 	ldw	r2,-28(fp)
  8005e8:	1884d83a 	srl	r2,r3,r2
  8005ec:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  8005f0:	e0bffc17 	ldw	r2,-16(fp)
  8005f4:	108002a8 	cmpgeui	r2,r2,10
  8005f8:	1000041e 	bne	r2,zero,80060c <alt_printf+0x160>
                            c = '0' + digit;
  8005fc:	e0bffc17 	ldw	r2,-16(fp)
  800600:	10800c04 	addi	r2,r2,48
  800604:	e0bff805 	stb	r2,-32(fp)
  800608:	00000306 	br	800618 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  80060c:	e0bffc17 	ldw	r2,-16(fp)
  800610:	108015c4 	addi	r2,r2,87
  800614:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  800618:	e0bff807 	ldb	r2,-32(fp)
  80061c:	1009883a 	mov	r4,r2
  800620:	08006d40 	call	8006d4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  800624:	e0bff917 	ldw	r2,-28(fp)
  800628:	10bfff04 	addi	r2,r2,-4
  80062c:	e0bff915 	stw	r2,-28(fp)
  800630:	e0bff917 	ldw	r2,-28(fp)
  800634:	103fe50e 	bge	r2,zero,8005cc <__alt_data_end+0xff8005cc>
  800638:	00001a06 	br	8006a4 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80063c:	e0bff807 	ldb	r2,-32(fp)
  800640:	10801cd8 	cmpnei	r2,r2,115
  800644:	1000151e 	bne	r2,zero,80069c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  800648:	e0bffe17 	ldw	r2,-8(fp)
  80064c:	10c00104 	addi	r3,r2,4
  800650:	e0fffe15 	stw	r3,-8(fp)
  800654:	10800017 	ldw	r2,0(r2)
  800658:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  80065c:	00000906 	br	800684 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  800660:	e0bffa17 	ldw	r2,-24(fp)
  800664:	10c00044 	addi	r3,r2,1
  800668:	e0fffa15 	stw	r3,-24(fp)
  80066c:	10800003 	ldbu	r2,0(r2)
  800670:	10803fcc 	andi	r2,r2,255
  800674:	1080201c 	xori	r2,r2,128
  800678:	10bfe004 	addi	r2,r2,-128
  80067c:	1009883a 	mov	r4,r2
  800680:	08006d40 	call	8006d4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  800684:	e0bffa17 	ldw	r2,-24(fp)
  800688:	10800003 	ldbu	r2,0(r2)
  80068c:	10803fcc 	andi	r2,r2,255
  800690:	1080201c 	xori	r2,r2,128
  800694:	10bfe004 	addi	r2,r2,-128
  800698:	103ff11e 	bne	r2,zero,800660 <__alt_data_end+0xff800660>
  80069c:	00000106 	br	8006a4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  8006a0:	00000706 	br	8006c0 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8006a4:	e0bff717 	ldw	r2,-36(fp)
  8006a8:	10c00044 	addi	r3,r2,1
  8006ac:	e0fff715 	stw	r3,-36(fp)
  8006b0:	10800003 	ldbu	r2,0(r2)
  8006b4:	e0bff805 	stb	r2,-32(fp)
  8006b8:	e0bff807 	ldb	r2,-32(fp)
  8006bc:	103f881e 	bne	r2,zero,8004e0 <__alt_data_end+0xff8004e0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8006c0:	e037883a 	mov	sp,fp
  8006c4:	dfc00117 	ldw	ra,4(sp)
  8006c8:	df000017 	ldw	fp,0(sp)
  8006cc:	dec00504 	addi	sp,sp,20
  8006d0:	f800283a 	ret

008006d4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8006d4:	defffd04 	addi	sp,sp,-12
  8006d8:	dfc00215 	stw	ra,8(sp)
  8006dc:	df000115 	stw	fp,4(sp)
  8006e0:	df000104 	addi	fp,sp,4
  8006e4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  8006e8:	00802034 	movhi	r2,128
  8006ec:	109db204 	addi	r2,r2,30408
  8006f0:	10800017 	ldw	r2,0(r2)
  8006f4:	10800217 	ldw	r2,8(r2)
  8006f8:	e13fff17 	ldw	r4,-4(fp)
  8006fc:	100b883a 	mov	r5,r2
  800700:	0803e800 	call	803e80 <putc>
#endif
#endif
}
  800704:	e037883a 	mov	sp,fp
  800708:	dfc00117 	ldw	ra,4(sp)
  80070c:	df000017 	ldw	fp,0(sp)
  800710:	dec00204 	addi	sp,sp,8
  800714:	f800283a 	ret

00800718 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800718:	defffd04 	addi	sp,sp,-12
  80071c:	dfc00215 	stw	ra,8(sp)
  800720:	df000115 	stw	fp,4(sp)
  800724:	df000104 	addi	fp,sp,4
  800728:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80072c:	e13fff17 	ldw	r4,-4(fp)
  800730:	01402034 	movhi	r5,128
  800734:	295da904 	addi	r5,r5,30372
  800738:	0802cb00 	call	802cb0 <alt_dev_llist_insert>
}
  80073c:	e037883a 	mov	sp,fp
  800740:	dfc00117 	ldw	ra,4(sp)
  800744:	df000017 	ldw	fp,0(sp)
  800748:	dec00204 	addi	sp,sp,8
  80074c:	f800283a 	ret

00800750 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800750:	defffd04 	addi	sp,sp,-12
  800754:	dfc00215 	stw	ra,8(sp)
  800758:	df000115 	stw	fp,4(sp)
  80075c:	df000104 	addi	fp,sp,4
  800760:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  800764:	08036540 	call	803654 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800768:	00800044 	movi	r2,1
  80076c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800770:	e037883a 	mov	sp,fp
  800774:	dfc00117 	ldw	ra,4(sp)
  800778:	df000017 	ldw	fp,0(sp)
  80077c:	dec00204 	addi	sp,sp,8
  800780:	f800283a 	ret

00800784 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800784:	defffe04 	addi	sp,sp,-8
  800788:	dfc00115 	stw	ra,4(sp)
  80078c:	df000015 	stw	fp,0(sp)
  800790:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  800794:	01002034 	movhi	r4,128
  800798:	211a9504 	addi	r4,r4,27220
  80079c:	08007180 	call	800718 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  8007a0:	01002034 	movhi	r4,128
  8007a4:	211aaa04 	addi	r4,r4,27304
  8007a8:	08017780 	call	801778 <altera_avalon_lcd_16207_init>
  8007ac:	01002034 	movhi	r4,128
  8007b0:	211aa004 	addi	r4,r4,27264
  8007b4:	08007180 	call	800718 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  8007b8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8007bc:	01002034 	movhi	r4,128
  8007c0:	211af204 	addi	r4,r4,27592
  8007c4:	000b883a 	mov	r5,zero
  8007c8:	01800044 	movi	r6,1
  8007cc:	0801a200 	call	801a20 <altera_avalon_uart_init>
  8007d0:	01002034 	movhi	r4,128
  8007d4:	211ae804 	addi	r4,r4,27552
  8007d8:	08007180 	call	800718 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  8007dc:	01002034 	movhi	r4,128
  8007e0:	211b1904 	addi	r4,r4,27748
  8007e4:	08007180 	call	800718 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  8007e8:	01002034 	movhi	r4,128
  8007ec:	211b2504 	addi	r4,r4,27796
  8007f0:	08007180 	call	800718 <alt_dev_reg>
}
  8007f4:	e037883a 	mov	sp,fp
  8007f8:	dfc00117 	ldw	ra,4(sp)
  8007fc:	df000017 	ldw	fp,0(sp)
  800800:	dec00204 	addi	sp,sp,8
  800804:	f800283a 	ret

00800808 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800808:	defffa04 	addi	sp,sp,-24
  80080c:	dfc00515 	stw	ra,20(sp)
  800810:	df000415 	stw	fp,16(sp)
  800814:	df000404 	addi	fp,sp,16
  800818:	e13ffd15 	stw	r4,-12(fp)
  80081c:	e17ffe15 	stw	r5,-8(fp)
  800820:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800824:	e0bffd17 	ldw	r2,-12(fp)
  800828:	10800017 	ldw	r2,0(r2)
  80082c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800830:	e0bffc17 	ldw	r2,-16(fp)
  800834:	10c00a04 	addi	r3,r2,40
  800838:	e0bffd17 	ldw	r2,-12(fp)
  80083c:	10800217 	ldw	r2,8(r2)
  800840:	1809883a 	mov	r4,r3
  800844:	e17ffe17 	ldw	r5,-8(fp)
  800848:	e1bfff17 	ldw	r6,-4(fp)
  80084c:	100f883a 	mov	r7,r2
  800850:	08008c80 	call	8008c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800854:	e037883a 	mov	sp,fp
  800858:	dfc00117 	ldw	ra,4(sp)
  80085c:	df000017 	ldw	fp,0(sp)
  800860:	dec00204 	addi	sp,sp,8
  800864:	f800283a 	ret

00800868 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  800868:	defffa04 	addi	sp,sp,-24
  80086c:	dfc00515 	stw	ra,20(sp)
  800870:	df000415 	stw	fp,16(sp)
  800874:	df000404 	addi	fp,sp,16
  800878:	e13ffd15 	stw	r4,-12(fp)
  80087c:	e17ffe15 	stw	r5,-8(fp)
  800880:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800884:	e0bffd17 	ldw	r2,-12(fp)
  800888:	10800017 	ldw	r2,0(r2)
  80088c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800890:	e0bffc17 	ldw	r2,-16(fp)
  800894:	10c00a04 	addi	r3,r2,40
  800898:	e0bffd17 	ldw	r2,-12(fp)
  80089c:	10800217 	ldw	r2,8(r2)
  8008a0:	1809883a 	mov	r4,r3
  8008a4:	e17ffe17 	ldw	r5,-8(fp)
  8008a8:	e1bfff17 	ldw	r6,-4(fp)
  8008ac:	100f883a 	mov	r7,r2
  8008b0:	08009ac0 	call	8009ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8008b4:	e037883a 	mov	sp,fp
  8008b8:	dfc00117 	ldw	ra,4(sp)
  8008bc:	df000017 	ldw	fp,0(sp)
  8008c0:	dec00204 	addi	sp,sp,8
  8008c4:	f800283a 	ret

008008c8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  8008c8:	defff704 	addi	sp,sp,-36
  8008cc:	df000815 	stw	fp,32(sp)
  8008d0:	df000804 	addi	fp,sp,32
  8008d4:	e13ffc15 	stw	r4,-16(fp)
  8008d8:	e17ffd15 	stw	r5,-12(fp)
  8008dc:	e1bffe15 	stw	r6,-8(fp)
  8008e0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8008e4:	e0bffc17 	ldw	r2,-16(fp)
  8008e8:	10800017 	ldw	r2,0(r2)
  8008ec:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  8008f0:	e0bffd17 	ldw	r2,-12(fp)
  8008f4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  8008f8:	e0bffe17 	ldw	r2,-8(fp)
  8008fc:	e0fffd17 	ldw	r3,-12(fp)
  800900:	1885883a 	add	r2,r3,r2
  800904:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  800908:	00001406 	br	80095c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80090c:	e0bff917 	ldw	r2,-28(fp)
  800910:	10800037 	ldwio	r2,0(r2)
  800914:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  800918:	e0bffb17 	ldw	r2,-20(fp)
  80091c:	10a0000c 	andi	r2,r2,32768
  800920:	10000626 	beq	r2,zero,80093c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800924:	e0bff817 	ldw	r2,-32(fp)
  800928:	10c00044 	addi	r3,r2,1
  80092c:	e0fff815 	stw	r3,-32(fp)
  800930:	e0fffb17 	ldw	r3,-20(fp)
  800934:	10c00005 	stb	r3,0(r2)
  800938:	00000806 	br	80095c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  80093c:	e0fff817 	ldw	r3,-32(fp)
  800940:	e0bffd17 	ldw	r2,-12(fp)
  800944:	18800126 	beq	r3,r2,80094c <altera_avalon_jtag_uart_read+0x84>
      break;
  800948:	00000706 	br	800968 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
  80094c:	e0bfff17 	ldw	r2,-4(fp)
  800950:	1090000c 	andi	r2,r2,16384
  800954:	10000126 	beq	r2,zero,80095c <altera_avalon_jtag_uart_read+0x94>
      break;   
  800958:	00000306 	br	800968 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  80095c:	e0fff817 	ldw	r3,-32(fp)
  800960:	e0bffa17 	ldw	r2,-24(fp)
  800964:	18bfe936 	bltu	r3,r2,80090c <__alt_data_end+0xff80090c>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  800968:	e0fff817 	ldw	r3,-32(fp)
  80096c:	e0bffd17 	ldw	r2,-12(fp)
  800970:	18800426 	beq	r3,r2,800984 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
  800974:	e0fff817 	ldw	r3,-32(fp)
  800978:	e0bffd17 	ldw	r2,-12(fp)
  80097c:	1885c83a 	sub	r2,r3,r2
  800980:	00000606 	br	80099c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
  800984:	e0bfff17 	ldw	r2,-4(fp)
  800988:	1090000c 	andi	r2,r2,16384
  80098c:	10000226 	beq	r2,zero,800998 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
  800990:	00bffd44 	movi	r2,-11
  800994:	00000106 	br	80099c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
  800998:	00bffec4 	movi	r2,-5
}
  80099c:	e037883a 	mov	sp,fp
  8009a0:	df000017 	ldw	fp,0(sp)
  8009a4:	dec00104 	addi	sp,sp,4
  8009a8:	f800283a 	ret

008009ac <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8009ac:	defff904 	addi	sp,sp,-28
  8009b0:	df000615 	stw	fp,24(sp)
  8009b4:	df000604 	addi	fp,sp,24
  8009b8:	e13ffc15 	stw	r4,-16(fp)
  8009bc:	e17ffd15 	stw	r5,-12(fp)
  8009c0:	e1bffe15 	stw	r6,-8(fp)
  8009c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8009c8:	e0bffc17 	ldw	r2,-16(fp)
  8009cc:	10800017 	ldw	r2,0(r2)
  8009d0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  8009d4:	e0bffe17 	ldw	r2,-8(fp)
  8009d8:	e0fffd17 	ldw	r3,-12(fp)
  8009dc:	1885883a 	add	r2,r3,r2
  8009e0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  8009e4:	00000e06 	br	800a20 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8009e8:	e0bffa17 	ldw	r2,-24(fp)
  8009ec:	10800104 	addi	r2,r2,4
  8009f0:	10800037 	ldwio	r2,0(r2)
  8009f4:	10bfffec 	andhi	r2,r2,65535
  8009f8:	10000926 	beq	r2,zero,800a20 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8009fc:	e0fffa17 	ldw	r3,-24(fp)
  800a00:	e0bffd17 	ldw	r2,-12(fp)
  800a04:	11000044 	addi	r4,r2,1
  800a08:	e13ffd15 	stw	r4,-12(fp)
  800a0c:	10800003 	ldbu	r2,0(r2)
  800a10:	10803fcc 	andi	r2,r2,255
  800a14:	1080201c 	xori	r2,r2,128
  800a18:	10bfe004 	addi	r2,r2,-128
  800a1c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  800a20:	e0fffd17 	ldw	r3,-12(fp)
  800a24:	e0bffb17 	ldw	r2,-20(fp)
  800a28:	18bfef36 	bltu	r3,r2,8009e8 <__alt_data_end+0xff8009e8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  800a2c:	e0bffe17 	ldw	r2,-8(fp)
}
  800a30:	e037883a 	mov	sp,fp
  800a34:	df000017 	ldw	fp,0(sp)
  800a38:	dec00104 	addi	sp,sp,4
  800a3c:	f800283a 	ret

00800a40 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  800a40:	defffa04 	addi	sp,sp,-24
  800a44:	dfc00515 	stw	ra,20(sp)
  800a48:	df000415 	stw	fp,16(sp)
  800a4c:	df000404 	addi	fp,sp,16
  800a50:	e13ffe15 	stw	r4,-8(fp)
  800a54:	2805883a 	mov	r2,r5
  800a58:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800a5c:	e0bffe17 	ldw	r2,-8(fp)
  800a60:	10800017 	ldw	r2,0(r2)
  800a64:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800a68:	008003f4 	movhi	r2,15
  800a6c:	10909004 	addi	r2,r2,16960
  800a70:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800a74:	e0bffe17 	ldw	r2,-8(fp)
  800a78:	10800803 	ldbu	r2,32(r2)
  800a7c:	10803fcc 	andi	r2,r2,255
  800a80:	1080201c 	xori	r2,r2,128
  800a84:	10bfe004 	addi	r2,r2,-128
  800a88:	10000126 	beq	r2,zero,800a90 <lcd_write_command+0x50>
    return;
  800a8c:	00001406 	br	800ae0 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800a90:	00000906 	br	800ab8 <lcd_write_command+0x78>
    if (--i == 0)
  800a94:	e0bffc17 	ldw	r2,-16(fp)
  800a98:	10bfffc4 	addi	r2,r2,-1
  800a9c:	e0bffc15 	stw	r2,-16(fp)
  800aa0:	e0bffc17 	ldw	r2,-16(fp)
  800aa4:	1000041e 	bne	r2,zero,800ab8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  800aa8:	e0bffe17 	ldw	r2,-8(fp)
  800aac:	00c00044 	movi	r3,1
  800ab0:	10c00805 	stb	r3,32(r2)
      return;
  800ab4:	00000a06 	br	800ae0 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800ab8:	e0bffd17 	ldw	r2,-12(fp)
  800abc:	10800104 	addi	r2,r2,4
  800ac0:	10800037 	ldwio	r2,0(r2)
  800ac4:	1080200c 	andi	r2,r2,128
  800ac8:	103ff21e 	bne	r2,zero,800a94 <__alt_data_end+0xff800a94>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  800acc:	01001904 	movi	r4,100
  800ad0:	08036240 	call	803624 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  800ad4:	e0bffd17 	ldw	r2,-12(fp)
  800ad8:	e0ffff03 	ldbu	r3,-4(fp)
  800adc:	10c00035 	stwio	r3,0(r2)
}
  800ae0:	e037883a 	mov	sp,fp
  800ae4:	dfc00117 	ldw	ra,4(sp)
  800ae8:	df000017 	ldw	fp,0(sp)
  800aec:	dec00204 	addi	sp,sp,8
  800af0:	f800283a 	ret

00800af4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  800af4:	defffa04 	addi	sp,sp,-24
  800af8:	dfc00515 	stw	ra,20(sp)
  800afc:	df000415 	stw	fp,16(sp)
  800b00:	df000404 	addi	fp,sp,16
  800b04:	e13ffe15 	stw	r4,-8(fp)
  800b08:	2805883a 	mov	r2,r5
  800b0c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800b10:	e0bffe17 	ldw	r2,-8(fp)
  800b14:	10800017 	ldw	r2,0(r2)
  800b18:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800b1c:	008003f4 	movhi	r2,15
  800b20:	10909004 	addi	r2,r2,16960
  800b24:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800b28:	e0bffe17 	ldw	r2,-8(fp)
  800b2c:	10800803 	ldbu	r2,32(r2)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	10000126 	beq	r2,zero,800b44 <lcd_write_data+0x50>
    return;
  800b40:	00001c06 	br	800bb4 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800b44:	00000906 	br	800b6c <lcd_write_data+0x78>
    if (--i == 0)
  800b48:	e0bffc17 	ldw	r2,-16(fp)
  800b4c:	10bfffc4 	addi	r2,r2,-1
  800b50:	e0bffc15 	stw	r2,-16(fp)
  800b54:	e0bffc17 	ldw	r2,-16(fp)
  800b58:	1000041e 	bne	r2,zero,800b6c <lcd_write_data+0x78>
    {
      sp->broken = 1;
  800b5c:	e0bffe17 	ldw	r2,-8(fp)
  800b60:	00c00044 	movi	r3,1
  800b64:	10c00805 	stb	r3,32(r2)
      return;
  800b68:	00001206 	br	800bb4 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800b6c:	e0bffd17 	ldw	r2,-12(fp)
  800b70:	10800104 	addi	r2,r2,4
  800b74:	10800037 	ldwio	r2,0(r2)
  800b78:	1080200c 	andi	r2,r2,128
  800b7c:	103ff21e 	bne	r2,zero,800b48 <__alt_data_end+0xff800b48>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  800b80:	01001904 	movi	r4,100
  800b84:	08036240 	call	803624 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  800b88:	e0bffd17 	ldw	r2,-12(fp)
  800b8c:	10800204 	addi	r2,r2,8
  800b90:	1007883a 	mov	r3,r2
  800b94:	e0bfff03 	ldbu	r2,-4(fp)
  800b98:	18800035 	stwio	r2,0(r3)

  sp->address++;
  800b9c:	e0bffe17 	ldw	r2,-8(fp)
  800ba0:	108008c3 	ldbu	r2,35(r2)
  800ba4:	10800044 	addi	r2,r2,1
  800ba8:	1007883a 	mov	r3,r2
  800bac:	e0bffe17 	ldw	r2,-8(fp)
  800bb0:	10c008c5 	stb	r3,35(r2)
}
  800bb4:	e037883a 	mov	sp,fp
  800bb8:	dfc00117 	ldw	ra,4(sp)
  800bbc:	df000017 	ldw	fp,0(sp)
  800bc0:	dec00204 	addi	sp,sp,8
  800bc4:	f800283a 	ret

00800bc8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  800bc8:	defffc04 	addi	sp,sp,-16
  800bcc:	dfc00315 	stw	ra,12(sp)
  800bd0:	df000215 	stw	fp,8(sp)
  800bd4:	df000204 	addi	fp,sp,8
  800bd8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  800bdc:	e13fff17 	ldw	r4,-4(fp)
  800be0:	01400044 	movi	r5,1
  800be4:	0800a400 	call	800a40 <lcd_write_command>

  sp->x = 0;
  800be8:	e0bfff17 	ldw	r2,-4(fp)
  800bec:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  800bf0:	e0bfff17 	ldw	r2,-4(fp)
  800bf4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  800bf8:	e0bfff17 	ldw	r2,-4(fp)
  800bfc:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800c00:	e03ffe15 	stw	zero,-8(fp)
  800c04:	00001b06 	br	800c74 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  800c08:	e0bffe17 	ldw	r2,-8(fp)
  800c0c:	108018e4 	muli	r2,r2,99
  800c10:	10801004 	addi	r2,r2,64
  800c14:	e0ffff17 	ldw	r3,-4(fp)
  800c18:	1885883a 	add	r2,r3,r2
  800c1c:	1009883a 	mov	r4,r2
  800c20:	01400804 	movi	r5,32
  800c24:	01801444 	movi	r6,81
  800c28:	0803cbc0 	call	803cbc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  800c2c:	e0bffe17 	ldw	r2,-8(fp)
  800c30:	108018e4 	muli	r2,r2,99
  800c34:	10800c04 	addi	r2,r2,48
  800c38:	e0ffff17 	ldw	r3,-4(fp)
  800c3c:	1885883a 	add	r2,r3,r2
  800c40:	1009883a 	mov	r4,r2
  800c44:	01400804 	movi	r5,32
  800c48:	01800404 	movi	r6,16
  800c4c:	0803cbc0 	call	803cbc <memset>
    sp->line[y].width = 0;
  800c50:	e0ffff17 	ldw	r3,-4(fp)
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	108018e4 	muli	r2,r2,99
  800c5c:	10802404 	addi	r2,r2,144
  800c60:	1885883a 	add	r2,r3,r2
  800c64:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800c68:	e0bffe17 	ldw	r2,-8(fp)
  800c6c:	10800044 	addi	r2,r2,1
  800c70:	e0bffe15 	stw	r2,-8(fp)
  800c74:	e0bffe17 	ldw	r2,-8(fp)
  800c78:	10800090 	cmplti	r2,r2,2
  800c7c:	103fe21e 	bne	r2,zero,800c08 <__alt_data_end+0xff800c08>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  800c80:	e037883a 	mov	sp,fp
  800c84:	dfc00117 	ldw	ra,4(sp)
  800c88:	df000017 	ldw	fp,0(sp)
  800c8c:	dec00204 	addi	sp,sp,8
  800c90:	f800283a 	ret

00800c94 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  800c94:	defff704 	addi	sp,sp,-36
  800c98:	dfc00815 	stw	ra,32(sp)
  800c9c:	df000715 	stw	fp,28(sp)
  800ca0:	df000704 	addi	fp,sp,28
  800ca4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  800ca8:	e0bfff17 	ldw	r2,-4(fp)
  800cac:	10800943 	ldbu	r2,37(r2)
  800cb0:	10803fcc 	andi	r2,r2,255
  800cb4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800cb8:	e03ff915 	stw	zero,-28(fp)
  800cbc:	00006706 	br	800e5c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  800cc0:	e0ffff17 	ldw	r3,-4(fp)
  800cc4:	e0bff917 	ldw	r2,-28(fp)
  800cc8:	108018e4 	muli	r2,r2,99
  800ccc:	10802404 	addi	r2,r2,144
  800cd0:	1885883a 	add	r2,r3,r2
  800cd4:	10800043 	ldbu	r2,1(r2)
  800cd8:	10803fcc 	andi	r2,r2,255
  800cdc:	1080201c 	xori	r2,r2,128
  800ce0:	10bfe004 	addi	r2,r2,-128
  800ce4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  800ce8:	e0ffff17 	ldw	r3,-4(fp)
  800cec:	e0bff917 	ldw	r2,-28(fp)
  800cf0:	108018e4 	muli	r2,r2,99
  800cf4:	10802404 	addi	r2,r2,144
  800cf8:	1885883a 	add	r2,r3,r2
  800cfc:	10800083 	ldbu	r2,2(r2)
  800d00:	10c03fcc 	andi	r3,r2,255
  800d04:	e0bffc17 	ldw	r2,-16(fp)
  800d08:	1885383a 	mul	r2,r3,r2
  800d0c:	1005d23a 	srai	r2,r2,8
  800d10:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  800d14:	e0fffb17 	ldw	r3,-20(fp)
  800d18:	e0bffd17 	ldw	r2,-12(fp)
  800d1c:	18800116 	blt	r3,r2,800d24 <lcd_repaint_screen+0x90>
      offset = 0;
  800d20:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  800d24:	e03ffa15 	stw	zero,-24(fp)
  800d28:	00004606 	br	800e44 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  800d2c:	e0fffa17 	ldw	r3,-24(fp)
  800d30:	e0bffb17 	ldw	r2,-20(fp)
  800d34:	1885883a 	add	r2,r3,r2
  800d38:	1009883a 	mov	r4,r2
  800d3c:	e17ffd17 	ldw	r5,-12(fp)
  800d40:	0805fcc0 	call	805fcc <__modsi3>
  800d44:	1009883a 	mov	r4,r2
  800d48:	e0ffff17 	ldw	r3,-4(fp)
  800d4c:	e0bff917 	ldw	r2,-28(fp)
  800d50:	108018e4 	muli	r2,r2,99
  800d54:	1885883a 	add	r2,r3,r2
  800d58:	1105883a 	add	r2,r2,r4
  800d5c:	10801004 	addi	r2,r2,64
  800d60:	10800003 	ldbu	r2,0(r2)
  800d64:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  800d68:	e0ffff17 	ldw	r3,-4(fp)
  800d6c:	e0bff917 	ldw	r2,-28(fp)
  800d70:	108018e4 	muli	r2,r2,99
  800d74:	1887883a 	add	r3,r3,r2
  800d78:	e0bffa17 	ldw	r2,-24(fp)
  800d7c:	1885883a 	add	r2,r3,r2
  800d80:	10800c04 	addi	r2,r2,48
  800d84:	10800003 	ldbu	r2,0(r2)
  800d88:	10c03fcc 	andi	r3,r2,255
  800d8c:	18c0201c 	xori	r3,r3,128
  800d90:	18ffe004 	addi	r3,r3,-128
  800d94:	e0bffe07 	ldb	r2,-8(fp)
  800d98:	18802726 	beq	r3,r2,800e38 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  800d9c:	e0fff917 	ldw	r3,-28(fp)
  800da0:	d0a00004 	addi	r2,gp,-32768
  800da4:	1885883a 	add	r2,r3,r2
  800da8:	10800003 	ldbu	r2,0(r2)
  800dac:	1007883a 	mov	r3,r2
  800db0:	e0bffa17 	ldw	r2,-24(fp)
  800db4:	1885883a 	add	r2,r3,r2
  800db8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  800dbc:	e0fffe43 	ldbu	r3,-7(fp)
  800dc0:	e0bfff17 	ldw	r2,-4(fp)
  800dc4:	108008c3 	ldbu	r2,35(r2)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	18800a26 	beq	r3,r2,800e00 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  800dd8:	e0fffe43 	ldbu	r3,-7(fp)
  800ddc:	00bfe004 	movi	r2,-128
  800de0:	1884b03a 	or	r2,r3,r2
  800de4:	10803fcc 	andi	r2,r2,255
  800de8:	e13fff17 	ldw	r4,-4(fp)
  800dec:	100b883a 	mov	r5,r2
  800df0:	0800a400 	call	800a40 <lcd_write_command>
          sp->address = address;
  800df4:	e0fffe43 	ldbu	r3,-7(fp)
  800df8:	e0bfff17 	ldw	r2,-4(fp)
  800dfc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  800e00:	e0bffe03 	ldbu	r2,-8(fp)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	e13fff17 	ldw	r4,-4(fp)
  800e0c:	100b883a 	mov	r5,r2
  800e10:	0800af40 	call	800af4 <lcd_write_data>
        sp->line[y].visible[x] = c;
  800e14:	e0ffff17 	ldw	r3,-4(fp)
  800e18:	e0bff917 	ldw	r2,-28(fp)
  800e1c:	108018e4 	muli	r2,r2,99
  800e20:	1887883a 	add	r3,r3,r2
  800e24:	e0bffa17 	ldw	r2,-24(fp)
  800e28:	1885883a 	add	r2,r3,r2
  800e2c:	10800c04 	addi	r2,r2,48
  800e30:	e0fffe03 	ldbu	r3,-8(fp)
  800e34:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  800e38:	e0bffa17 	ldw	r2,-24(fp)
  800e3c:	10800044 	addi	r2,r2,1
  800e40:	e0bffa15 	stw	r2,-24(fp)
  800e44:	e0bffa17 	ldw	r2,-24(fp)
  800e48:	10800410 	cmplti	r2,r2,16
  800e4c:	103fb71e 	bne	r2,zero,800d2c <__alt_data_end+0xff800d2c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800e50:	e0bff917 	ldw	r2,-28(fp)
  800e54:	10800044 	addi	r2,r2,1
  800e58:	e0bff915 	stw	r2,-28(fp)
  800e5c:	e0bff917 	ldw	r2,-28(fp)
  800e60:	10800090 	cmplti	r2,r2,2
  800e64:	103f961e 	bne	r2,zero,800cc0 <__alt_data_end+0xff800cc0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  800e68:	e037883a 	mov	sp,fp
  800e6c:	dfc00117 	ldw	ra,4(sp)
  800e70:	df000017 	ldw	fp,0(sp)
  800e74:	dec00204 	addi	sp,sp,8
  800e78:	f800283a 	ret

00800e7c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  800e7c:	defffc04 	addi	sp,sp,-16
  800e80:	dfc00315 	stw	ra,12(sp)
  800e84:	df000215 	stw	fp,8(sp)
  800e88:	df000204 	addi	fp,sp,8
  800e8c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800e90:	e03ffe15 	stw	zero,-8(fp)
  800e94:	00001d06 	br	800f0c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  800e98:	e0bffe17 	ldw	r2,-8(fp)
  800e9c:	00800f16 	blt	zero,r2,800edc <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  800ea0:	e0bffe17 	ldw	r2,-8(fp)
  800ea4:	108018e4 	muli	r2,r2,99
  800ea8:	10801004 	addi	r2,r2,64
  800eac:	e0ffff17 	ldw	r3,-4(fp)
  800eb0:	1889883a 	add	r4,r3,r2
  800eb4:	e0bffe17 	ldw	r2,-8(fp)
  800eb8:	10800044 	addi	r2,r2,1
  800ebc:	108018e4 	muli	r2,r2,99
  800ec0:	10801004 	addi	r2,r2,64
  800ec4:	e0ffff17 	ldw	r3,-4(fp)
  800ec8:	1885883a 	add	r2,r3,r2
  800ecc:	100b883a 	mov	r5,r2
  800ed0:	01801404 	movi	r6,80
  800ed4:	0803b840 	call	803b84 <memcpy>
  800ed8:	00000906 	br	800f00 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  800edc:	e0bffe17 	ldw	r2,-8(fp)
  800ee0:	108018e4 	muli	r2,r2,99
  800ee4:	10801004 	addi	r2,r2,64
  800ee8:	e0ffff17 	ldw	r3,-4(fp)
  800eec:	1885883a 	add	r2,r3,r2
  800ef0:	1009883a 	mov	r4,r2
  800ef4:	01400804 	movi	r5,32
  800ef8:	01801404 	movi	r6,80
  800efc:	0803cbc0 	call	803cbc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  800f00:	e0bffe17 	ldw	r2,-8(fp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	e0bffe15 	stw	r2,-8(fp)
  800f0c:	e0bffe17 	ldw	r2,-8(fp)
  800f10:	10800090 	cmplti	r2,r2,2
  800f14:	103fe01e 	bne	r2,zero,800e98 <__alt_data_end+0xff800e98>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  800f18:	e0bfff17 	ldw	r2,-4(fp)
  800f1c:	10800883 	ldbu	r2,34(r2)
  800f20:	10bfffc4 	addi	r2,r2,-1
  800f24:	1007883a 	mov	r3,r2
  800f28:	e0bfff17 	ldw	r2,-4(fp)
  800f2c:	10c00885 	stb	r3,34(r2)
}
  800f30:	e037883a 	mov	sp,fp
  800f34:	dfc00117 	ldw	ra,4(sp)
  800f38:	df000017 	ldw	fp,0(sp)
  800f3c:	dec00204 	addi	sp,sp,8
  800f40:	f800283a 	ret

00800f44 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  800f44:	defff904 	addi	sp,sp,-28
  800f48:	dfc00615 	stw	ra,24(sp)
  800f4c:	df000515 	stw	fp,20(sp)
  800f50:	df000504 	addi	fp,sp,20
  800f54:	e13ffe15 	stw	r4,-8(fp)
  800f58:	2805883a 	mov	r2,r5
  800f5c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  800f60:	e03ffb15 	stw	zero,-20(fp)
  800f64:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  800f68:	e0bffe17 	ldw	r2,-8(fp)
  800f6c:	10800a03 	ldbu	r2,40(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	108016d8 	cmpnei	r2,r2,91
  800f80:	1000441e 	bne	r2,zero,801094 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  800f84:	e0bffe17 	ldw	r2,-8(fp)
  800f88:	10800a44 	addi	r2,r2,41
  800f8c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  800f90:	00000c06 	br	800fc4 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  800f94:	e0bffb17 	ldw	r2,-20(fp)
  800f98:	10c002a4 	muli	r3,r2,10
  800f9c:	e0bffd17 	ldw	r2,-12(fp)
  800fa0:	11000044 	addi	r4,r2,1
  800fa4:	e13ffd15 	stw	r4,-12(fp)
  800fa8:	10800003 	ldbu	r2,0(r2)
  800fac:	10803fcc 	andi	r2,r2,255
  800fb0:	1080201c 	xori	r2,r2,128
  800fb4:	10bfe004 	addi	r2,r2,-128
  800fb8:	10bff404 	addi	r2,r2,-48
  800fbc:	1885883a 	add	r2,r3,r2
  800fc0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  800fc4:	00802034 	movhi	r2,128
  800fc8:	109db004 	addi	r2,r2,30400
  800fcc:	10c00017 	ldw	r3,0(r2)
  800fd0:	e0bffd17 	ldw	r2,-12(fp)
  800fd4:	10800003 	ldbu	r2,0(r2)
  800fd8:	10803fcc 	andi	r2,r2,255
  800fdc:	1080201c 	xori	r2,r2,128
  800fe0:	10bfe004 	addi	r2,r2,-128
  800fe4:	10800044 	addi	r2,r2,1
  800fe8:	1885883a 	add	r2,r3,r2
  800fec:	10800003 	ldbu	r2,0(r2)
  800ff0:	10803fcc 	andi	r2,r2,255
  800ff4:	1080010c 	andi	r2,r2,4
  800ff8:	103fe61e 	bne	r2,zero,800f94 <__alt_data_end+0xff800f94>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  800ffc:	e0bffd17 	ldw	r2,-12(fp)
  801000:	10800003 	ldbu	r2,0(r2)
  801004:	10803fcc 	andi	r2,r2,255
  801008:	1080201c 	xori	r2,r2,128
  80100c:	10bfe004 	addi	r2,r2,-128
  801010:	10800ed8 	cmpnei	r2,r2,59
  801014:	10001e1e 	bne	r2,zero,801090 <lcd_handle_escape+0x14c>
    {
      ptr++;
  801018:	e0bffd17 	ldw	r2,-12(fp)
  80101c:	10800044 	addi	r2,r2,1
  801020:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  801024:	00000c06 	br	801058 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10c002a4 	muli	r3,r2,10
  801030:	e0bffd17 	ldw	r2,-12(fp)
  801034:	11000044 	addi	r4,r2,1
  801038:	e13ffd15 	stw	r4,-12(fp)
  80103c:	10800003 	ldbu	r2,0(r2)
  801040:	10803fcc 	andi	r2,r2,255
  801044:	1080201c 	xori	r2,r2,128
  801048:	10bfe004 	addi	r2,r2,-128
  80104c:	10bff404 	addi	r2,r2,-48
  801050:	1885883a 	add	r2,r3,r2
  801054:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  801058:	00802034 	movhi	r2,128
  80105c:	109db004 	addi	r2,r2,30400
  801060:	10c00017 	ldw	r3,0(r2)
  801064:	e0bffd17 	ldw	r2,-12(fp)
  801068:	10800003 	ldbu	r2,0(r2)
  80106c:	10803fcc 	andi	r2,r2,255
  801070:	1080201c 	xori	r2,r2,128
  801074:	10bfe004 	addi	r2,r2,-128
  801078:	10800044 	addi	r2,r2,1
  80107c:	1885883a 	add	r2,r3,r2
  801080:	10800003 	ldbu	r2,0(r2)
  801084:	10803fcc 	andi	r2,r2,255
  801088:	1080010c 	andi	r2,r2,4
  80108c:	103fe61e 	bne	r2,zero,801028 <__alt_data_end+0xff801028>
  801090:	00000206 	br	80109c <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801094:	00bfffc4 	movi	r2,-1
  801098:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80109c:	e0bfff07 	ldb	r2,-4(fp)
  8010a0:	10c012a0 	cmpeqi	r3,r2,74
  8010a4:	1800281e 	bne	r3,zero,801148 <lcd_handle_escape+0x204>
  8010a8:	10c012c8 	cmpgei	r3,r2,75
  8010ac:	1800031e 	bne	r3,zero,8010bc <lcd_handle_escape+0x178>
  8010b0:	10801220 	cmpeqi	r2,r2,72
  8010b4:	1000051e 	bne	r2,zero,8010cc <lcd_handle_escape+0x188>
  8010b8:	00004506 	br	8011d0 <lcd_handle_escape+0x28c>
  8010bc:	10c012e0 	cmpeqi	r3,r2,75
  8010c0:	1800281e 	bne	r3,zero,801164 <lcd_handle_escape+0x220>
  8010c4:	108019a0 	cmpeqi	r2,r2,102
  8010c8:	10004126 	beq	r2,zero,8011d0 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8010cc:	e0bffc17 	ldw	r2,-16(fp)
  8010d0:	0080050e 	bge	zero,r2,8010e8 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  8010d4:	e0bffc17 	ldw	r2,-16(fp)
  8010d8:	10bfffc4 	addi	r2,r2,-1
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bffe17 	ldw	r2,-8(fp)
  8010e4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8010e8:	e0bffb17 	ldw	r2,-20(fp)
  8010ec:	0080150e 	bge	zero,r2,801144 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  8010f0:	e0bffb17 	ldw	r2,-20(fp)
  8010f4:	10bfffc4 	addi	r2,r2,-1
  8010f8:	1007883a 	mov	r3,r2
  8010fc:	e0bffe17 	ldw	r2,-8(fp)
  801100:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801104:	e0bffe17 	ldw	r2,-8(fp)
  801108:	10800883 	ldbu	r2,34(r2)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	10800170 	cmpltui	r2,r2,5
  801114:	1000031e 	bne	r2,zero,801124 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  801118:	e0bffe17 	ldw	r2,-8(fp)
  80111c:	00c00104 	movi	r3,4
  801120:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  801124:	00000206 	br	801130 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  801128:	e13ffe17 	ldw	r4,-8(fp)
  80112c:	0800e7c0 	call	800e7c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  801130:	e0bffe17 	ldw	r2,-8(fp)
  801134:	10800883 	ldbu	r2,34(r2)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	108000e8 	cmpgeui	r2,r2,3
  801140:	103ff91e 	bne	r2,zero,801128 <__alt_data_end+0xff801128>
        lcd_scroll_up(sp);
    }
    break;
  801144:	00002206 	br	8011d0 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  801148:	e0bffb17 	ldw	r2,-20(fp)
  80114c:	10800098 	cmpnei	r2,r2,2
  801150:	1000031e 	bne	r2,zero,801160 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  801154:	e13ffe17 	ldw	r4,-8(fp)
  801158:	0800bc80 	call	800bc8 <lcd_clear_screen>
    break;
  80115c:	00001c06 	br	8011d0 <lcd_handle_escape+0x28c>
  801160:	00001b06 	br	8011d0 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  801164:	e0bffb17 	ldw	r2,-20(fp)
  801168:	00801816 	blt	zero,r2,8011cc <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80116c:	e0bffe17 	ldw	r2,-8(fp)
  801170:	10800843 	ldbu	r2,33(r2)
  801174:	10803fcc 	andi	r2,r2,255
  801178:	10801428 	cmpgeui	r2,r2,80
  80117c:	1000131e 	bne	r2,zero,8011cc <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801180:	e0bffe17 	ldw	r2,-8(fp)
  801184:	10800883 	ldbu	r2,34(r2)
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	108018e4 	muli	r2,r2,99
  801190:	10801004 	addi	r2,r2,64
  801194:	e0fffe17 	ldw	r3,-8(fp)
  801198:	1887883a 	add	r3,r3,r2
  80119c:	e0bffe17 	ldw	r2,-8(fp)
  8011a0:	10800843 	ldbu	r2,33(r2)
  8011a4:	10803fcc 	andi	r2,r2,255
  8011a8:	1889883a 	add	r4,r3,r2
  8011ac:	e0bffe17 	ldw	r2,-8(fp)
  8011b0:	10800843 	ldbu	r2,33(r2)
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	00c01404 	movi	r3,80
  8011bc:	1885c83a 	sub	r2,r3,r2
  8011c0:	01400804 	movi	r5,32
  8011c4:	100d883a 	mov	r6,r2
  8011c8:	0803cbc0 	call	803cbc <memset>
    }
    break;
  8011cc:	0001883a 	nop
  }
}
  8011d0:	e037883a 	mov	sp,fp
  8011d4:	dfc00117 	ldw	ra,4(sp)
  8011d8:	df000017 	ldw	fp,0(sp)
  8011dc:	dec00204 	addi	sp,sp,8
  8011e0:	f800283a 	ret

008011e4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8011e4:	defff304 	addi	sp,sp,-52
  8011e8:	dfc00c15 	stw	ra,48(sp)
  8011ec:	df000b15 	stw	fp,44(sp)
  8011f0:	df000b04 	addi	fp,sp,44
  8011f4:	e13ffc15 	stw	r4,-16(fp)
  8011f8:	e17ffd15 	stw	r5,-12(fp)
  8011fc:	e1bffe15 	stw	r6,-8(fp)
  801200:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801204:	e0bffe17 	ldw	r2,-8(fp)
  801208:	e0fffd17 	ldw	r3,-12(fp)
  80120c:	1885883a 	add	r2,r3,r2
  801210:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801214:	e0bffc17 	ldw	r2,-16(fp)
  801218:	00c00044 	movi	r3,1
  80121c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  801220:	00009e06 	br	80149c <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  801224:	e0bffd17 	ldw	r2,-12(fp)
  801228:	10800003 	ldbu	r2,0(r2)
  80122c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  801230:	e0bffc17 	ldw	r2,-16(fp)
  801234:	10800903 	ldbu	r2,36(r2)
  801238:	10803fcc 	andi	r2,r2,255
  80123c:	1080201c 	xori	r2,r2,128
  801240:	10bfe004 	addi	r2,r2,-128
  801244:	10003a16 	blt	r2,zero,801330 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  801248:	e0bffc17 	ldw	r2,-16(fp)
  80124c:	10800903 	ldbu	r2,36(r2)
  801250:	10803fcc 	andi	r2,r2,255
  801254:	1080201c 	xori	r2,r2,128
  801258:	10bfe004 	addi	r2,r2,-128
  80125c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801260:	e0bffa17 	ldw	r2,-24(fp)
  801264:	1000031e 	bne	r2,zero,801274 <altera_avalon_lcd_16207_write+0x90>
  801268:	e0bff907 	ldb	r2,-28(fp)
  80126c:	108016d8 	cmpnei	r2,r2,91
  801270:	10000f1e 	bne	r2,zero,8012b0 <altera_avalon_lcd_16207_write+0xcc>
  801274:	e0bffa17 	ldw	r2,-24(fp)
  801278:	10001a26 	beq	r2,zero,8012e4 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80127c:	00802034 	movhi	r2,128
  801280:	109db004 	addi	r2,r2,30400
  801284:	10c00017 	ldw	r3,0(r2)
  801288:	e0bff907 	ldb	r2,-28(fp)
  80128c:	10800044 	addi	r2,r2,1
  801290:	1885883a 	add	r2,r3,r2
  801294:	10800003 	ldbu	r2,0(r2)
  801298:	10803fcc 	andi	r2,r2,255
  80129c:	1080010c 	andi	r2,r2,4
  8012a0:	1000101e 	bne	r2,zero,8012e4 <altera_avalon_lcd_16207_write+0x100>
  8012a4:	e0bff907 	ldb	r2,-28(fp)
  8012a8:	10800ee0 	cmpeqi	r2,r2,59
  8012ac:	10000d1e 	bne	r2,zero,8012e4 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  8012b0:	e0fffc17 	ldw	r3,-16(fp)
  8012b4:	e0bffa17 	ldw	r2,-24(fp)
  8012b8:	1885883a 	add	r2,r3,r2
  8012bc:	10800a04 	addi	r2,r2,40
  8012c0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8012c4:	e0bff907 	ldb	r2,-28(fp)
  8012c8:	e13ffc17 	ldw	r4,-16(fp)
  8012cc:	100b883a 	mov	r5,r2
  8012d0:	0800f440 	call	800f44 <lcd_handle_escape>

        sp->esccount = -1;
  8012d4:	e0bffc17 	ldw	r2,-16(fp)
  8012d8:	00ffffc4 	movi	r3,-1
  8012dc:	10c00905 	stb	r3,36(r2)
  8012e0:	00001206 	br	80132c <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	10800903 	ldbu	r2,36(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	108001e8 	cmpgeui	r2,r2,7
  8012f4:	10000d1e 	bne	r2,zero,80132c <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  8012f8:	e0fffc17 	ldw	r3,-16(fp)
  8012fc:	e0bffa17 	ldw	r2,-24(fp)
  801300:	1885883a 	add	r2,r3,r2
  801304:	10800a04 	addi	r2,r2,40
  801308:	e0fff903 	ldbu	r3,-28(fp)
  80130c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  801310:	e0bffc17 	ldw	r2,-16(fp)
  801314:	10800903 	ldbu	r2,36(r2)
  801318:	10800044 	addi	r2,r2,1
  80131c:	1007883a 	mov	r3,r2
  801320:	e0bffc17 	ldw	r2,-16(fp)
  801324:	10c00905 	stb	r3,36(r2)
  801328:	00005906 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
  80132c:	00005806 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  801330:	e0bff907 	ldb	r2,-28(fp)
  801334:	108006d8 	cmpnei	r2,r2,27
  801338:	1000031e 	bne	r2,zero,801348 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  80133c:	e0bffc17 	ldw	r2,-16(fp)
  801340:	10000905 	stb	zero,36(r2)
  801344:	00005206 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  801348:	e0bff907 	ldb	r2,-28(fp)
  80134c:	10800358 	cmpnei	r2,r2,13
  801350:	1000031e 	bne	r2,zero,801360 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  801354:	e0bffc17 	ldw	r2,-16(fp)
  801358:	10000845 	stb	zero,33(r2)
  80135c:	00004c06 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  801360:	e0bff907 	ldb	r2,-28(fp)
  801364:	10800298 	cmpnei	r2,r2,10
  801368:	1000101e 	bne	r2,zero,8013ac <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  80136c:	e0bffc17 	ldw	r2,-16(fp)
  801370:	10000845 	stb	zero,33(r2)
      sp->y++;
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10800883 	ldbu	r2,34(r2)
  80137c:	10800044 	addi	r2,r2,1
  801380:	1007883a 	mov	r3,r2
  801384:	e0bffc17 	ldw	r2,-16(fp)
  801388:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80138c:	e0bffc17 	ldw	r2,-16(fp)
  801390:	10800883 	ldbu	r2,34(r2)
  801394:	10803fcc 	andi	r2,r2,255
  801398:	108000f0 	cmpltui	r2,r2,3
  80139c:	10003c1e 	bne	r2,zero,801490 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  8013a0:	e13ffc17 	ldw	r4,-16(fp)
  8013a4:	0800e7c0 	call	800e7c <lcd_scroll_up>
  8013a8:	00003906 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  8013ac:	e0bff907 	ldb	r2,-28(fp)
  8013b0:	10800218 	cmpnei	r2,r2,8
  8013b4:	10000b1e 	bne	r2,zero,8013e4 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  8013b8:	e0bffc17 	ldw	r2,-16(fp)
  8013bc:	10800843 	ldbu	r2,33(r2)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	10003226 	beq	r2,zero,801490 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  8013c8:	e0bffc17 	ldw	r2,-16(fp)
  8013cc:	10800843 	ldbu	r2,33(r2)
  8013d0:	10bfffc4 	addi	r2,r2,-1
  8013d4:	1007883a 	mov	r3,r2
  8013d8:	e0bffc17 	ldw	r2,-16(fp)
  8013dc:	10c00845 	stb	r3,33(r2)
  8013e0:	00002b06 	br	801490 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  8013e4:	00802034 	movhi	r2,128
  8013e8:	109db004 	addi	r2,r2,30400
  8013ec:	10c00017 	ldw	r3,0(r2)
  8013f0:	e0bff907 	ldb	r2,-28(fp)
  8013f4:	10800044 	addi	r2,r2,1
  8013f8:	1885883a 	add	r2,r3,r2
  8013fc:	10800003 	ldbu	r2,0(r2)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	108025cc 	andi	r2,r2,151
  801410:	10001f26 	beq	r2,zero,801490 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801414:	e0bffc17 	ldw	r2,-16(fp)
  801418:	10800883 	ldbu	r2,34(r2)
  80141c:	10803fcc 	andi	r2,r2,255
  801420:	108000b0 	cmpltui	r2,r2,2
  801424:	1000021e 	bne	r2,zero,801430 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  801428:	e13ffc17 	ldw	r4,-16(fp)
  80142c:	0800e7c0 	call	800e7c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10800843 	ldbu	r2,33(r2)
  801438:	10803fcc 	andi	r2,r2,255
  80143c:	10801428 	cmpgeui	r2,r2,80
  801440:	10000d1e 	bne	r2,zero,801478 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  801444:	e0bffc17 	ldw	r2,-16(fp)
  801448:	10800883 	ldbu	r2,34(r2)
  80144c:	10c03fcc 	andi	r3,r2,255
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10800843 	ldbu	r2,33(r2)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	e13ffc17 	ldw	r4,-16(fp)
  801460:	18c018e4 	muli	r3,r3,99
  801464:	20c7883a 	add	r3,r4,r3
  801468:	1885883a 	add	r2,r3,r2
  80146c:	10801004 	addi	r2,r2,64
  801470:	e0fff903 	ldbu	r3,-28(fp)
  801474:	10c00005 	stb	r3,0(r2)

      sp->x++;
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10800843 	ldbu	r2,33(r2)
  801480:	10800044 	addi	r2,r2,1
  801484:	1007883a 	mov	r3,r2
  801488:	e0bffc17 	ldw	r2,-16(fp)
  80148c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801490:	e0bffd17 	ldw	r2,-12(fp)
  801494:	10800044 	addi	r2,r2,1
  801498:	e0bffd15 	stw	r2,-12(fp)
  80149c:	e0fffd17 	ldw	r3,-12(fp)
  8014a0:	e0bff817 	ldw	r2,-32(fp)
  8014a4:	18bf5f36 	bltu	r3,r2,801224 <__alt_data_end+0xff801224>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8014a8:	00800404 	movi	r2,16
  8014ac:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8014b0:	e03ff515 	stw	zero,-44(fp)
  8014b4:	00003606 	br	801590 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8014b8:	00801404 	movi	r2,80
  8014bc:	e0bff715 	stw	r2,-36(fp)
  8014c0:	00001206 	br	80150c <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  8014c4:	e0bff717 	ldw	r2,-36(fp)
  8014c8:	10bfffc4 	addi	r2,r2,-1
  8014cc:	e13ffc17 	ldw	r4,-16(fp)
  8014d0:	e0fff517 	ldw	r3,-44(fp)
  8014d4:	18c018e4 	muli	r3,r3,99
  8014d8:	20c7883a 	add	r3,r4,r3
  8014dc:	1885883a 	add	r2,r3,r2
  8014e0:	10801004 	addi	r2,r2,64
  8014e4:	10800003 	ldbu	r2,0(r2)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	10800820 	cmpeqi	r2,r2,32
  8014f8:	1000011e 	bne	r2,zero,801500 <altera_avalon_lcd_16207_write+0x31c>
        break;
  8014fc:	00000506 	br	801514 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801500:	e0bff717 	ldw	r2,-36(fp)
  801504:	10bfffc4 	addi	r2,r2,-1
  801508:	e0bff715 	stw	r2,-36(fp)
  80150c:	e0bff717 	ldw	r2,-36(fp)
  801510:	00bfec16 	blt	zero,r2,8014c4 <__alt_data_end+0xff8014c4>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801514:	e0bff717 	ldw	r2,-36(fp)
  801518:	10800448 	cmpgei	r2,r2,17
  80151c:	1000031e 	bne	r2,zero,80152c <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  801520:	00800404 	movi	r2,16
  801524:	e0bff715 	stw	r2,-36(fp)
  801528:	00000306 	br	801538 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  80152c:	e0bff717 	ldw	r2,-36(fp)
  801530:	10800044 	addi	r2,r2,1
  801534:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801538:	e0bff717 	ldw	r2,-36(fp)
  80153c:	1009883a 	mov	r4,r2
  801540:	e0fffc17 	ldw	r3,-16(fp)
  801544:	e0bff517 	ldw	r2,-44(fp)
  801548:	108018e4 	muli	r2,r2,99
  80154c:	10802404 	addi	r2,r2,144
  801550:	1885883a 	add	r2,r3,r2
  801554:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  801558:	e0fff617 	ldw	r3,-40(fp)
  80155c:	e0bff717 	ldw	r2,-36(fp)
  801560:	1880020e 	bge	r3,r2,80156c <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  801564:	e0bff717 	ldw	r2,-36(fp)
  801568:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80156c:	e0fffc17 	ldw	r3,-16(fp)
  801570:	e0bff517 	ldw	r2,-44(fp)
  801574:	108018e4 	muli	r2,r2,99
  801578:	10802404 	addi	r2,r2,144
  80157c:	1885883a 	add	r2,r3,r2
  801580:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801584:	e0bff517 	ldw	r2,-44(fp)
  801588:	10800044 	addi	r2,r2,1
  80158c:	e0bff515 	stw	r2,-44(fp)
  801590:	e0bff517 	ldw	r2,-44(fp)
  801594:	10800090 	cmplti	r2,r2,2
  801598:	103fc71e 	bne	r2,zero,8014b8 <__alt_data_end+0xff8014b8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80159c:	e0bff617 	ldw	r2,-40(fp)
  8015a0:	10800448 	cmpgei	r2,r2,17
  8015a4:	1000031e 	bne	r2,zero,8015b4 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	10000985 	stb	zero,38(r2)
  8015b0:	00002e06 	br	80166c <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  8015b4:	e0bff617 	ldw	r2,-40(fp)
  8015b8:	1085883a 	add	r2,r2,r2
  8015bc:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8015c0:	e0bff617 	ldw	r2,-40(fp)
  8015c4:	1007883a 	mov	r3,r2
  8015c8:	e0bffc17 	ldw	r2,-16(fp)
  8015cc:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8015d0:	e03ff515 	stw	zero,-44(fp)
  8015d4:	00002206 	br	801660 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8015d8:	e0fffc17 	ldw	r3,-16(fp)
  8015dc:	e0bff517 	ldw	r2,-44(fp)
  8015e0:	108018e4 	muli	r2,r2,99
  8015e4:	10802404 	addi	r2,r2,144
  8015e8:	1885883a 	add	r2,r3,r2
  8015ec:	10800043 	ldbu	r2,1(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10800450 	cmplti	r2,r2,17
  801600:	1000141e 	bne	r2,zero,801654 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801604:	e0fffc17 	ldw	r3,-16(fp)
  801608:	e0bff517 	ldw	r2,-44(fp)
  80160c:	108018e4 	muli	r2,r2,99
  801610:	10802404 	addi	r2,r2,144
  801614:	1885883a 	add	r2,r3,r2
  801618:	10800043 	ldbu	r2,1(r2)
  80161c:	10803fcc 	andi	r2,r2,255
  801620:	1080201c 	xori	r2,r2,128
  801624:	10bfe004 	addi	r2,r2,-128
  801628:	1004923a 	slli	r2,r2,8
  80162c:	1009883a 	mov	r4,r2
  801630:	e17ff617 	ldw	r5,-40(fp)
  801634:	0805f780 	call	805f78 <__divsi3>
  801638:	1009883a 	mov	r4,r2
  80163c:	e0fffc17 	ldw	r3,-16(fp)
  801640:	e0bff517 	ldw	r2,-44(fp)
  801644:	108018e4 	muli	r2,r2,99
  801648:	10802404 	addi	r2,r2,144
  80164c:	1885883a 	add	r2,r3,r2
  801650:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801654:	e0bff517 	ldw	r2,-44(fp)
  801658:	10800044 	addi	r2,r2,1
  80165c:	e0bff515 	stw	r2,-44(fp)
  801660:	e0bff517 	ldw	r2,-44(fp)
  801664:	10800090 	cmplti	r2,r2,2
  801668:	103fdb1e 	bne	r2,zero,8015d8 <__alt_data_end+0xff8015d8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80166c:	e0bffc17 	ldw	r2,-16(fp)
  801670:	10800943 	ldbu	r2,37(r2)
  801674:	10803fcc 	andi	r2,r2,255
  801678:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80167c:	e13ffc17 	ldw	r4,-16(fp)
  801680:	0800c940 	call	800c94 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801684:	e0bffc17 	ldw	r2,-16(fp)
  801688:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80168c:	e0bffc17 	ldw	r2,-16(fp)
  801690:	10800943 	ldbu	r2,37(r2)
  801694:	10c03fcc 	andi	r3,r2,255
  801698:	e0bffb17 	ldw	r2,-20(fp)
  80169c:	1880011e 	bne	r3,r2,8016a4 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  8016a0:	00000406 	br	8016b4 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8016a4:	e0bffc17 	ldw	r2,-16(fp)
  8016a8:	00c00044 	movi	r3,1
  8016ac:	10c009c5 	stb	r3,39(r2)
  }
  8016b0:	003fee06 	br	80166c <__alt_data_end+0xff80166c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8016b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8016b8:	e037883a 	mov	sp,fp
  8016bc:	dfc00117 	ldw	ra,4(sp)
  8016c0:	df000017 	ldw	fp,0(sp)
  8016c4:	dec00204 	addi	sp,sp,8
  8016c8:	f800283a 	ret

008016cc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8016cc:	defffc04 	addi	sp,sp,-16
  8016d0:	dfc00315 	stw	ra,12(sp)
  8016d4:	df000215 	stw	fp,8(sp)
  8016d8:	df000204 	addi	fp,sp,8
  8016dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8016e0:	e0bfff17 	ldw	r2,-4(fp)
  8016e4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8016e8:	e0bffe17 	ldw	r2,-8(fp)
  8016ec:	10800943 	ldbu	r2,37(r2)
  8016f0:	10803fcc 	andi	r2,r2,255
  8016f4:	10c00044 	addi	r3,r2,1
  8016f8:	e0bffe17 	ldw	r2,-8(fp)
  8016fc:	10800983 	ldbu	r2,38(r2)
  801700:	10803fcc 	andi	r2,r2,255
  801704:	18800316 	blt	r3,r2,801714 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801708:	e0bffe17 	ldw	r2,-8(fp)
  80170c:	10000945 	stb	zero,37(r2)
  801710:	00000606 	br	80172c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801714:	e0bffe17 	ldw	r2,-8(fp)
  801718:	10800943 	ldbu	r2,37(r2)
  80171c:	10800044 	addi	r2,r2,1
  801720:	1007883a 	mov	r3,r2
  801724:	e0bffe17 	ldw	r2,-8(fp)
  801728:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80172c:	e0bffe17 	ldw	r2,-8(fp)
  801730:	10800983 	ldbu	r2,38(r2)
  801734:	10803fcc 	andi	r2,r2,255
  801738:	10000826 	beq	r2,zero,80175c <alt_lcd_16207_timeout+0x90>
  80173c:	e0bffe17 	ldw	r2,-8(fp)
  801740:	108009c3 	ldbu	r2,39(r2)
  801744:	10803fcc 	andi	r2,r2,255
  801748:	1080201c 	xori	r2,r2,128
  80174c:	10bfe004 	addi	r2,r2,-128
  801750:	1000021e 	bne	r2,zero,80175c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801754:	e13ffe17 	ldw	r4,-8(fp)
  801758:	0800c940 	call	800c94 <lcd_repaint_screen>

  return sp->period;
  80175c:	e0bffe17 	ldw	r2,-8(fp)
  801760:	10800717 	ldw	r2,28(r2)
}
  801764:	e037883a 	mov	sp,fp
  801768:	dfc00117 	ldw	ra,4(sp)
  80176c:	df000017 	ldw	fp,0(sp)
  801770:	dec00204 	addi	sp,sp,8
  801774:	f800283a 	ret

00801778 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801778:	defffc04 	addi	sp,sp,-16
  80177c:	dfc00315 	stw	ra,12(sp)
  801780:	df000215 	stw	fp,8(sp)
  801784:	df000204 	addi	fp,sp,8
  801788:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80178c:	e0bfff17 	ldw	r2,-4(fp)
  801790:	10800017 	ldw	r2,0(r2)
  801794:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801798:	e0bfff17 	ldw	r2,-4(fp)
  80179c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8017a0:	010ea604 	movi	r4,15000
  8017a4:	08036240 	call	803624 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8017a8:	e0bffe17 	ldw	r2,-8(fp)
  8017ac:	00c00c04 	movi	r3,48
  8017b0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8017b4:	01040104 	movi	r4,4100
  8017b8:	08036240 	call	803624 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8017bc:	e0bffe17 	ldw	r2,-8(fp)
  8017c0:	00c00c04 	movi	r3,48
  8017c4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8017c8:	0100fa04 	movi	r4,1000
  8017cc:	08036240 	call	803624 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8017d0:	e0bffe17 	ldw	r2,-8(fp)
  8017d4:	00c00c04 	movi	r3,48
  8017d8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8017dc:	e13fff17 	ldw	r4,-4(fp)
  8017e0:	01400e04 	movi	r5,56
  8017e4:	0800a400 	call	800a40 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8017e8:	e13fff17 	ldw	r4,-4(fp)
  8017ec:	01400204 	movi	r5,8
  8017f0:	0800a400 	call	800a40 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8017f4:	e13fff17 	ldw	r4,-4(fp)
  8017f8:	0800bc80 	call	800bc8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8017fc:	e13fff17 	ldw	r4,-4(fp)
  801800:	01400184 	movi	r5,6
  801804:	0800a400 	call	800a40 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  801808:	e13fff17 	ldw	r4,-4(fp)
  80180c:	01400304 	movi	r5,12
  801810:	0800a400 	call	800a40 <lcd_write_command>

  sp->esccount = -1;
  801814:	e0bfff17 	ldw	r2,-4(fp)
  801818:	00ffffc4 	movi	r3,-1
  80181c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  801820:	e0bfff17 	ldw	r2,-4(fp)
  801824:	10800a04 	addi	r2,r2,40
  801828:	1009883a 	mov	r4,r2
  80182c:	000b883a 	mov	r5,zero
  801830:	01800204 	movi	r6,8
  801834:	0803cbc0 	call	803cbc <memset>

  sp->scrollpos = 0;
  801838:	e0bfff17 	ldw	r2,-4(fp)
  80183c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  801840:	e0bfff17 	ldw	r2,-4(fp)
  801844:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  801848:	e0bfff17 	ldw	r2,-4(fp)
  80184c:	100009c5 	stb	zero,39(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  801850:	00802074 	movhi	r2,129
  801854:	10a0db04 	addi	r2,r2,-31892
  801858:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80185c:	1009883a 	mov	r4,r2
  801860:	01400284 	movi	r5,10
  801864:	08060280 	call	806028 <__udivsi3>
  801868:	1007883a 	mov	r3,r2
  80186c:	e0bfff17 	ldw	r2,-4(fp)
  801870:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  801874:	e0bfff17 	ldw	r2,-4(fp)
  801878:	10c00104 	addi	r3,r2,4
  80187c:	e0bfff17 	ldw	r2,-4(fp)
  801880:	10800717 	ldw	r2,28(r2)
  801884:	1809883a 	mov	r4,r3
  801888:	100b883a 	mov	r5,r2
  80188c:	01802034 	movhi	r6,128
  801890:	3185b304 	addi	r6,r6,5836
  801894:	e1ffff17 	ldw	r7,-4(fp)
  801898:	08029900 	call	802990 <alt_alarm_start>
}
  80189c:	e037883a 	mov	sp,fp
  8018a0:	dfc00117 	ldw	ra,4(sp)
  8018a4:	df000017 	ldw	fp,0(sp)
  8018a8:	dec00204 	addi	sp,sp,8
  8018ac:	f800283a 	ret

008018b0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8018b0:	defffa04 	addi	sp,sp,-24
  8018b4:	dfc00515 	stw	ra,20(sp)
  8018b8:	df000415 	stw	fp,16(sp)
  8018bc:	df000404 	addi	fp,sp,16
  8018c0:	e13ffd15 	stw	r4,-12(fp)
  8018c4:	e17ffe15 	stw	r5,-8(fp)
  8018c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8018cc:	e0bffd17 	ldw	r2,-12(fp)
  8018d0:	10800017 	ldw	r2,0(r2)
  8018d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10c00a04 	addi	r3,r2,40
  8018e0:	e0bffd17 	ldw	r2,-12(fp)
  8018e4:	10800217 	ldw	r2,8(r2)
  8018e8:	1809883a 	mov	r4,r3
  8018ec:	e17ffe17 	ldw	r5,-8(fp)
  8018f0:	e1bfff17 	ldw	r6,-4(fp)
  8018f4:	100f883a 	mov	r7,r2
  8018f8:	08011e40 	call	8011e4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8018fc:	e037883a 	mov	sp,fp
  801900:	dfc00117 	ldw	ra,4(sp)
  801904:	df000017 	ldw	fp,0(sp)
  801908:	dec00204 	addi	sp,sp,8
  80190c:	f800283a 	ret

00801910 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801910:	defffa04 	addi	sp,sp,-24
  801914:	dfc00515 	stw	ra,20(sp)
  801918:	df000415 	stw	fp,16(sp)
  80191c:	df000404 	addi	fp,sp,16
  801920:	e13ffd15 	stw	r4,-12(fp)
  801924:	e17ffe15 	stw	r5,-8(fp)
  801928:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80192c:	e0bffd17 	ldw	r2,-12(fp)
  801930:	10800017 	ldw	r2,0(r2)
  801934:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	10c00a04 	addi	r3,r2,40
  801940:	e0bffd17 	ldw	r2,-12(fp)
  801944:	10800217 	ldw	r2,8(r2)
  801948:	1809883a 	mov	r4,r3
  80194c:	e17ffe17 	ldw	r5,-8(fp)
  801950:	e1bfff17 	ldw	r6,-4(fp)
  801954:	100f883a 	mov	r7,r2
  801958:	0801e240 	call	801e24 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80195c:	e037883a 	mov	sp,fp
  801960:	dfc00117 	ldw	ra,4(sp)
  801964:	df000017 	ldw	fp,0(sp)
  801968:	dec00204 	addi	sp,sp,8
  80196c:	f800283a 	ret

00801970 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801970:	defffa04 	addi	sp,sp,-24
  801974:	dfc00515 	stw	ra,20(sp)
  801978:	df000415 	stw	fp,16(sp)
  80197c:	df000404 	addi	fp,sp,16
  801980:	e13ffd15 	stw	r4,-12(fp)
  801984:	e17ffe15 	stw	r5,-8(fp)
  801988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80198c:	e0bffd17 	ldw	r2,-12(fp)
  801990:	10800017 	ldw	r2,0(r2)
  801994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  801998:	e0bffc17 	ldw	r2,-16(fp)
  80199c:	10c00a04 	addi	r3,r2,40
  8019a0:	e0bffd17 	ldw	r2,-12(fp)
  8019a4:	10800217 	ldw	r2,8(r2)
  8019a8:	1809883a 	mov	r4,r3
  8019ac:	e17ffe17 	ldw	r5,-8(fp)
  8019b0:	e1bfff17 	ldw	r6,-4(fp)
  8019b4:	100f883a 	mov	r7,r2
  8019b8:	08020500 	call	802050 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8019bc:	e037883a 	mov	sp,fp
  8019c0:	dfc00117 	ldw	ra,4(sp)
  8019c4:	df000017 	ldw	fp,0(sp)
  8019c8:	dec00204 	addi	sp,sp,8
  8019cc:	f800283a 	ret

008019d0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8019d0:	defffc04 	addi	sp,sp,-16
  8019d4:	dfc00315 	stw	ra,12(sp)
  8019d8:	df000215 	stw	fp,8(sp)
  8019dc:	df000204 	addi	fp,sp,8
  8019e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8019e4:	e0bfff17 	ldw	r2,-4(fp)
  8019e8:	10800017 	ldw	r2,0(r2)
  8019ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8019f0:	e0bffe17 	ldw	r2,-8(fp)
  8019f4:	10c00a04 	addi	r3,r2,40
  8019f8:	e0bfff17 	ldw	r2,-4(fp)
  8019fc:	10800217 	ldw	r2,8(r2)
  801a00:	1809883a 	mov	r4,r3
  801a04:	100b883a 	mov	r5,r2
  801a08:	0801d800 	call	801d80 <altera_avalon_uart_close>
}
  801a0c:	e037883a 	mov	sp,fp
  801a10:	dfc00117 	ldw	ra,4(sp)
  801a14:	df000017 	ldw	fp,0(sp)
  801a18:	dec00204 	addi	sp,sp,8
  801a1c:	f800283a 	ret

00801a20 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  801a20:	defff904 	addi	sp,sp,-28
  801a24:	dfc00615 	stw	ra,24(sp)
  801a28:	df000515 	stw	fp,20(sp)
  801a2c:	df000504 	addi	fp,sp,20
  801a30:	e13ffd15 	stw	r4,-12(fp)
  801a34:	e17ffe15 	stw	r5,-8(fp)
  801a38:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  801a3c:	e0bffd17 	ldw	r2,-12(fp)
  801a40:	10800017 	ldw	r2,0(r2)
  801a44:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  801a48:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  801a4c:	1000041e 	bne	r2,zero,801a60 <altera_avalon_uart_init+0x40>
  801a50:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  801a54:	1000021e 	bne	r2,zero,801a60 <altera_avalon_uart_init+0x40>
  801a58:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  801a5c:	10000226 	beq	r2,zero,801a68 <altera_avalon_uart_init+0x48>
  801a60:	00800044 	movi	r2,1
  801a64:	00000106 	br	801a6c <altera_avalon_uart_init+0x4c>
  801a68:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  801a6c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  801a70:	e0bffc17 	ldw	r2,-16(fp)
  801a74:	10000d1e 	bne	r2,zero,801aac <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  801a78:	e0bffd17 	ldw	r2,-12(fp)
  801a7c:	00c32004 	movi	r3,3200
  801a80:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  801a84:	e0bffb17 	ldw	r2,-20(fp)
  801a88:	10800304 	addi	r2,r2,12
  801a8c:	e0fffd17 	ldw	r3,-12(fp)
  801a90:	18c00117 	ldw	r3,4(r3)
  801a94:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  801a98:	e13fff17 	ldw	r4,-4(fp)
  801a9c:	e17ffd17 	ldw	r5,-12(fp)
  801aa0:	01802034 	movhi	r6,128
  801aa4:	3186b004 	addi	r6,r6,6848
  801aa8:	08030040 	call	803004 <alt_irq_register>
#endif  
  }
}
  801aac:	e037883a 	mov	sp,fp
  801ab0:	dfc00117 	ldw	ra,4(sp)
  801ab4:	df000017 	ldw	fp,0(sp)
  801ab8:	dec00204 	addi	sp,sp,8
  801abc:	f800283a 	ret

00801ac0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  801ac0:	defff904 	addi	sp,sp,-28
  801ac4:	dfc00615 	stw	ra,24(sp)
  801ac8:	df000515 	stw	fp,20(sp)
  801acc:	df000504 	addi	fp,sp,20
  801ad0:	e13ffe15 	stw	r4,-8(fp)
  801ad4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  801ad8:	e0bffe17 	ldw	r2,-8(fp)
  801adc:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  801ae0:	e0bffb17 	ldw	r2,-20(fp)
  801ae4:	10800017 	ldw	r2,0(r2)
  801ae8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  801aec:	e0bffc17 	ldw	r2,-16(fp)
  801af0:	10800204 	addi	r2,r2,8
  801af4:	10800037 	ldwio	r2,0(r2)
  801af8:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10800204 	addi	r2,r2,8
  801b04:	0007883a 	mov	r3,zero
  801b08:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  801b0c:	e0bffc17 	ldw	r2,-16(fp)
  801b10:	10800204 	addi	r2,r2,8
  801b14:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  801b18:	e0bffd17 	ldw	r2,-12(fp)
  801b1c:	1080200c 	andi	r2,r2,128
  801b20:	10000326 	beq	r2,zero,801b30 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  801b24:	e13ffb17 	ldw	r4,-20(fp)
  801b28:	e17ffd17 	ldw	r5,-12(fp)
  801b2c:	0801b5c0 	call	801b5c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  801b30:	e0bffd17 	ldw	r2,-12(fp)
  801b34:	1081100c 	andi	r2,r2,1088
  801b38:	10000326 	beq	r2,zero,801b48 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  801b3c:	e13ffb17 	ldw	r4,-20(fp)
  801b40:	e17ffd17 	ldw	r5,-12(fp)
  801b44:	0801c3c0 	call	801c3c <altera_avalon_uart_txirq>
  }
  

}
  801b48:	e037883a 	mov	sp,fp
  801b4c:	dfc00117 	ldw	ra,4(sp)
  801b50:	df000017 	ldw	fp,0(sp)
  801b54:	dec00204 	addi	sp,sp,8
  801b58:	f800283a 	ret

00801b5c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  801b5c:	defffc04 	addi	sp,sp,-16
  801b60:	df000315 	stw	fp,12(sp)
  801b64:	df000304 	addi	fp,sp,12
  801b68:	e13ffe15 	stw	r4,-8(fp)
  801b6c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  801b70:	e0bfff17 	ldw	r2,-4(fp)
  801b74:	108000cc 	andi	r2,r2,3
  801b78:	10000126 	beq	r2,zero,801b80 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  801b7c:	00002b06 	br	801c2c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  801b80:	e0bffe17 	ldw	r2,-8(fp)
  801b84:	10800317 	ldw	r2,12(r2)
  801b88:	e0bffe17 	ldw	r2,-8(fp)
  801b8c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  801b90:	e0bffe17 	ldw	r2,-8(fp)
  801b94:	10800317 	ldw	r2,12(r2)
  801b98:	10800044 	addi	r2,r2,1
  801b9c:	10800fcc 	andi	r2,r2,63
  801ba0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  801ba4:	e0bffe17 	ldw	r2,-8(fp)
  801ba8:	10800317 	ldw	r2,12(r2)
  801bac:	e0fffe17 	ldw	r3,-8(fp)
  801bb0:	18c00017 	ldw	r3,0(r3)
  801bb4:	18c00037 	ldwio	r3,0(r3)
  801bb8:	1809883a 	mov	r4,r3
  801bbc:	e0fffe17 	ldw	r3,-8(fp)
  801bc0:	1885883a 	add	r2,r3,r2
  801bc4:	10800704 	addi	r2,r2,28
  801bc8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  801bcc:	e0bffe17 	ldw	r2,-8(fp)
  801bd0:	e0fffd17 	ldw	r3,-12(fp)
  801bd4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  801bd8:	e0bffe17 	ldw	r2,-8(fp)
  801bdc:	10800317 	ldw	r2,12(r2)
  801be0:	10800044 	addi	r2,r2,1
  801be4:	10800fcc 	andi	r2,r2,63
  801be8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  801bec:	e0bffe17 	ldw	r2,-8(fp)
  801bf0:	10c00217 	ldw	r3,8(r2)
  801bf4:	e0bffd17 	ldw	r2,-12(fp)
  801bf8:	18800c1e 	bne	r3,r2,801c2c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  801bfc:	e0bffe17 	ldw	r2,-8(fp)
  801c00:	10c00117 	ldw	r3,4(r2)
  801c04:	00bfdfc4 	movi	r2,-129
  801c08:	1886703a 	and	r3,r3,r2
  801c0c:	e0bffe17 	ldw	r2,-8(fp)
  801c10:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  801c14:	e0bffe17 	ldw	r2,-8(fp)
  801c18:	10800017 	ldw	r2,0(r2)
  801c1c:	10800304 	addi	r2,r2,12
  801c20:	e0fffe17 	ldw	r3,-8(fp)
  801c24:	18c00117 	ldw	r3,4(r3)
  801c28:	10c00035 	stwio	r3,0(r2)
  }   
}
  801c2c:	e037883a 	mov	sp,fp
  801c30:	df000017 	ldw	fp,0(sp)
  801c34:	dec00104 	addi	sp,sp,4
  801c38:	f800283a 	ret

00801c3c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  801c3c:	defffb04 	addi	sp,sp,-20
  801c40:	df000415 	stw	fp,16(sp)
  801c44:	df000404 	addi	fp,sp,16
  801c48:	e13ffc15 	stw	r4,-16(fp)
  801c4c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  801c50:	e0bffc17 	ldw	r2,-16(fp)
  801c54:	10c00417 	ldw	r3,16(r2)
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10800517 	ldw	r2,20(r2)
  801c60:	18803226 	beq	r3,r2,801d2c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  801c64:	e0bffc17 	ldw	r2,-16(fp)
  801c68:	10800617 	ldw	r2,24(r2)
  801c6c:	1080008c 	andi	r2,r2,2
  801c70:	10000326 	beq	r2,zero,801c80 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  801c74:	e0bffd17 	ldw	r2,-12(fp)
  801c78:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  801c7c:	10001d26 	beq	r2,zero,801cf4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  801c80:	e0bffc17 	ldw	r2,-16(fp)
  801c84:	10800417 	ldw	r2,16(r2)
  801c88:	e0bffc17 	ldw	r2,-16(fp)
  801c8c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  801c90:	e0bffc17 	ldw	r2,-16(fp)
  801c94:	10800017 	ldw	r2,0(r2)
  801c98:	10800104 	addi	r2,r2,4
  801c9c:	e0fffc17 	ldw	r3,-16(fp)
  801ca0:	18c00417 	ldw	r3,16(r3)
  801ca4:	e13ffc17 	ldw	r4,-16(fp)
  801ca8:	20c7883a 	add	r3,r4,r3
  801cac:	18c01704 	addi	r3,r3,92
  801cb0:	18c00003 	ldbu	r3,0(r3)
  801cb4:	18c03fcc 	andi	r3,r3,255
  801cb8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	10800417 	ldw	r2,16(r2)
  801cc4:	10800044 	addi	r2,r2,1
  801cc8:	e0fffc17 	ldw	r3,-16(fp)
  801ccc:	18800415 	stw	r2,16(r3)
  801cd0:	10c00fcc 	andi	r3,r2,63
  801cd4:	e0bffc17 	ldw	r2,-16(fp)
  801cd8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  801cdc:	e0bffc17 	ldw	r2,-16(fp)
  801ce0:	10800117 	ldw	r2,4(r2)
  801ce4:	10c01014 	ori	r3,r2,64
  801ce8:	e0bffc17 	ldw	r2,-16(fp)
  801cec:	10c00115 	stw	r3,4(r2)
  801cf0:	00000e06 	br	801d2c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  801cf4:	e0bffc17 	ldw	r2,-16(fp)
  801cf8:	10800017 	ldw	r2,0(r2)
  801cfc:	10800204 	addi	r2,r2,8
  801d00:	10800037 	ldwio	r2,0(r2)
  801d04:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  801d08:	e0bffd17 	ldw	r2,-12(fp)
  801d0c:	1082000c 	andi	r2,r2,2048
  801d10:	1000061e 	bne	r2,zero,801d2c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  801d14:	e0bffc17 	ldw	r2,-16(fp)
  801d18:	10c00117 	ldw	r3,4(r2)
  801d1c:	00bfefc4 	movi	r2,-65
  801d20:	1886703a 	and	r3,r3,r2
  801d24:	e0bffc17 	ldw	r2,-16(fp)
  801d28:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  801d2c:	e0bffc17 	ldw	r2,-16(fp)
  801d30:	10c00417 	ldw	r3,16(r2)
  801d34:	e0bffc17 	ldw	r2,-16(fp)
  801d38:	10800517 	ldw	r2,20(r2)
  801d3c:	1880061e 	bne	r3,r2,801d58 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  801d40:	e0bffc17 	ldw	r2,-16(fp)
  801d44:	10c00117 	ldw	r3,4(r2)
  801d48:	00beefc4 	movi	r2,-1089
  801d4c:	1886703a 	and	r3,r3,r2
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  801d58:	e0bffc17 	ldw	r2,-16(fp)
  801d5c:	10800017 	ldw	r2,0(r2)
  801d60:	10800304 	addi	r2,r2,12
  801d64:	e0fffc17 	ldw	r3,-16(fp)
  801d68:	18c00117 	ldw	r3,4(r3)
  801d6c:	10c00035 	stwio	r3,0(r2)
}
  801d70:	e037883a 	mov	sp,fp
  801d74:	df000017 	ldw	fp,0(sp)
  801d78:	dec00104 	addi	sp,sp,4
  801d7c:	f800283a 	ret

00801d80 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  801d80:	defffd04 	addi	sp,sp,-12
  801d84:	df000215 	stw	fp,8(sp)
  801d88:	df000204 	addi	fp,sp,8
  801d8c:	e13ffe15 	stw	r4,-8(fp)
  801d90:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  801d94:	00000506 	br	801dac <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  801d98:	e0bfff17 	ldw	r2,-4(fp)
  801d9c:	1090000c 	andi	r2,r2,16384
  801da0:	10000226 	beq	r2,zero,801dac <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  801da4:	00bffd44 	movi	r2,-11
  801da8:	00000606 	br	801dc4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  801dac:	e0bffe17 	ldw	r2,-8(fp)
  801db0:	10c00417 	ldw	r3,16(r2)
  801db4:	e0bffe17 	ldw	r2,-8(fp)
  801db8:	10800517 	ldw	r2,20(r2)
  801dbc:	18bff61e 	bne	r3,r2,801d98 <__alt_data_end+0xff801d98>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  801dc0:	0005883a 	mov	r2,zero
}
  801dc4:	e037883a 	mov	sp,fp
  801dc8:	df000017 	ldw	fp,0(sp)
  801dcc:	dec00104 	addi	sp,sp,4
  801dd0:	f800283a 	ret

00801dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  801dd4:	defffe04 	addi	sp,sp,-8
  801dd8:	dfc00115 	stw	ra,4(sp)
  801ddc:	df000015 	stw	fp,0(sp)
  801de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  801de4:	00802034 	movhi	r2,128
  801de8:	109dac04 	addi	r2,r2,30384
  801dec:	10800017 	ldw	r2,0(r2)
  801df0:	10000526 	beq	r2,zero,801e08 <alt_get_errno+0x34>
  801df4:	00802034 	movhi	r2,128
  801df8:	109dac04 	addi	r2,r2,30384
  801dfc:	10800017 	ldw	r2,0(r2)
  801e00:	103ee83a 	callr	r2
  801e04:	00000206 	br	801e10 <alt_get_errno+0x3c>
  801e08:	00802074 	movhi	r2,129
  801e0c:	10a0de04 	addi	r2,r2,-31880
}
  801e10:	e037883a 	mov	sp,fp
  801e14:	dfc00117 	ldw	ra,4(sp)
  801e18:	df000017 	ldw	fp,0(sp)
  801e1c:	dec00204 	addi	sp,sp,8
  801e20:	f800283a 	ret

00801e24 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  801e24:	defff204 	addi	sp,sp,-56
  801e28:	dfc00d15 	stw	ra,52(sp)
  801e2c:	df000c15 	stw	fp,48(sp)
  801e30:	df000c04 	addi	fp,sp,48
  801e34:	e13ffc15 	stw	r4,-16(fp)
  801e38:	e17ffd15 	stw	r5,-12(fp)
  801e3c:	e1bffe15 	stw	r6,-8(fp)
  801e40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  801e44:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  801e48:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  801e4c:	e0bfff17 	ldw	r2,-4(fp)
  801e50:	1090000c 	andi	r2,r2,16384
  801e54:	1005003a 	cmpeq	r2,r2,zero
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  801e60:	00001306 	br	801eb0 <altera_avalon_uart_read+0x8c>
    {
      count++;
  801e64:	e0bff517 	ldw	r2,-44(fp)
  801e68:	10800044 	addi	r2,r2,1
  801e6c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  801e70:	e0bffd17 	ldw	r2,-12(fp)
  801e74:	10c00044 	addi	r3,r2,1
  801e78:	e0fffd15 	stw	r3,-12(fp)
  801e7c:	e0fffc17 	ldw	r3,-16(fp)
  801e80:	18c00217 	ldw	r3,8(r3)
  801e84:	e13ffc17 	ldw	r4,-16(fp)
  801e88:	20c7883a 	add	r3,r4,r3
  801e8c:	18c00704 	addi	r3,r3,28
  801e90:	18c00003 	ldbu	r3,0(r3)
  801e94:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	10800217 	ldw	r2,8(r2)
  801ea0:	10800044 	addi	r2,r2,1
  801ea4:	10c00fcc 	andi	r3,r2,63
  801ea8:	e0bffc17 	ldw	r2,-16(fp)
  801eac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  801eb0:	e0fff517 	ldw	r3,-44(fp)
  801eb4:	e0bffe17 	ldw	r2,-8(fp)
  801eb8:	1880050e 	bge	r3,r2,801ed0 <altera_avalon_uart_read+0xac>
  801ebc:	e0bffc17 	ldw	r2,-16(fp)
  801ec0:	10c00217 	ldw	r3,8(r2)
  801ec4:	e0bffc17 	ldw	r2,-16(fp)
  801ec8:	10800317 	ldw	r2,12(r2)
  801ecc:	18bfe51e 	bne	r3,r2,801e64 <__alt_data_end+0xff801e64>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  801ed0:	e0bff517 	ldw	r2,-44(fp)
  801ed4:	1000251e 	bne	r2,zero,801f6c <altera_avalon_uart_read+0x148>
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10c00217 	ldw	r3,8(r2)
  801ee0:	e0bffc17 	ldw	r2,-16(fp)
  801ee4:	10800317 	ldw	r2,12(r2)
  801ee8:	1880201e 	bne	r3,r2,801f6c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  801eec:	e0bff617 	ldw	r2,-40(fp)
  801ef0:	1000071e 	bne	r2,zero,801f10 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  801ef4:	0801dd40 	call	801dd4 <alt_get_errno>
  801ef8:	1007883a 	mov	r3,r2
  801efc:	008002c4 	movi	r2,11
  801f00:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  801f04:	00800044 	movi	r2,1
  801f08:	e0bff405 	stb	r2,-48(fp)
        break;
  801f0c:	00001b06 	br	801f7c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801f10:	0005303a 	rdctl	r2,status
  801f14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801f18:	e0fff817 	ldw	r3,-32(fp)
  801f1c:	00bfff84 	movi	r2,-2
  801f20:	1884703a 	and	r2,r3,r2
  801f24:	1001703a 	wrctl	status,r2
  
  return context;
  801f28:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  801f2c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  801f30:	e0bffc17 	ldw	r2,-16(fp)
  801f34:	10800117 	ldw	r2,4(r2)
  801f38:	10c02014 	ori	r3,r2,128
  801f3c:	e0bffc17 	ldw	r2,-16(fp)
  801f40:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  801f44:	e0bffc17 	ldw	r2,-16(fp)
  801f48:	10800017 	ldw	r2,0(r2)
  801f4c:	10800304 	addi	r2,r2,12
  801f50:	e0fffc17 	ldw	r3,-16(fp)
  801f54:	18c00117 	ldw	r3,4(r3)
  801f58:	10c00035 	stwio	r3,0(r2)
  801f5c:	e0bff717 	ldw	r2,-36(fp)
  801f60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801f64:	e0bff917 	ldw	r2,-28(fp)
  801f68:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  801f6c:	e0bff517 	ldw	r2,-44(fp)
  801f70:	1000021e 	bne	r2,zero,801f7c <altera_avalon_uart_read+0x158>
  801f74:	e0bffe17 	ldw	r2,-8(fp)
  801f78:	103fb91e 	bne	r2,zero,801e60 <__alt_data_end+0xff801e60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801f7c:	0005303a 	rdctl	r2,status
  801f80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801f84:	e0fffa17 	ldw	r3,-24(fp)
  801f88:	00bfff84 	movi	r2,-2
  801f8c:	1884703a 	and	r2,r3,r2
  801f90:	1001703a 	wrctl	status,r2
  
  return context;
  801f94:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  801f98:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  801f9c:	e0bffc17 	ldw	r2,-16(fp)
  801fa0:	10800117 	ldw	r2,4(r2)
  801fa4:	10c02014 	ori	r3,r2,128
  801fa8:	e0bffc17 	ldw	r2,-16(fp)
  801fac:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  801fb0:	e0bffc17 	ldw	r2,-16(fp)
  801fb4:	10800017 	ldw	r2,0(r2)
  801fb8:	10800304 	addi	r2,r2,12
  801fbc:	e0fffc17 	ldw	r3,-16(fp)
  801fc0:	18c00117 	ldw	r3,4(r3)
  801fc4:	10c00035 	stwio	r3,0(r2)
  801fc8:	e0bff717 	ldw	r2,-36(fp)
  801fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801fd0:	e0bffb17 	ldw	r2,-20(fp)
  801fd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  801fd8:	e0bff403 	ldbu	r2,-48(fp)
  801fdc:	10000226 	beq	r2,zero,801fe8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  801fe0:	00bffd44 	movi	r2,-11
  801fe4:	00000106 	br	801fec <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  801fe8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  801fec:	e037883a 	mov	sp,fp
  801ff0:	dfc00117 	ldw	ra,4(sp)
  801ff4:	df000017 	ldw	fp,0(sp)
  801ff8:	dec00204 	addi	sp,sp,8
  801ffc:	f800283a 	ret

00802000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802000:	defffe04 	addi	sp,sp,-8
  802004:	dfc00115 	stw	ra,4(sp)
  802008:	df000015 	stw	fp,0(sp)
  80200c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802010:	00802034 	movhi	r2,128
  802014:	109dac04 	addi	r2,r2,30384
  802018:	10800017 	ldw	r2,0(r2)
  80201c:	10000526 	beq	r2,zero,802034 <alt_get_errno+0x34>
  802020:	00802034 	movhi	r2,128
  802024:	109dac04 	addi	r2,r2,30384
  802028:	10800017 	ldw	r2,0(r2)
  80202c:	103ee83a 	callr	r2
  802030:	00000206 	br	80203c <alt_get_errno+0x3c>
  802034:	00802074 	movhi	r2,129
  802038:	10a0de04 	addi	r2,r2,-31880
}
  80203c:	e037883a 	mov	sp,fp
  802040:	dfc00117 	ldw	ra,4(sp)
  802044:	df000017 	ldw	fp,0(sp)
  802048:	dec00204 	addi	sp,sp,8
  80204c:	f800283a 	ret

00802050 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802050:	defff204 	addi	sp,sp,-56
  802054:	dfc00d15 	stw	ra,52(sp)
  802058:	df000c15 	stw	fp,48(sp)
  80205c:	df000c04 	addi	fp,sp,48
  802060:	e13ffc15 	stw	r4,-16(fp)
  802064:	e17ffd15 	stw	r5,-12(fp)
  802068:	e1bffe15 	stw	r6,-8(fp)
  80206c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  802070:	e0bffe17 	ldw	r2,-8(fp)
  802074:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  802078:	e0bfff17 	ldw	r2,-4(fp)
  80207c:	1090000c 	andi	r2,r2,16384
  802080:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802084:	00003c06 	br	802178 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802088:	e0bffc17 	ldw	r2,-16(fp)
  80208c:	10800517 	ldw	r2,20(r2)
  802090:	10800044 	addi	r2,r2,1
  802094:	10800fcc 	andi	r2,r2,63
  802098:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80209c:	e0bffc17 	ldw	r2,-16(fp)
  8020a0:	10c00417 	ldw	r3,16(r2)
  8020a4:	e0bff617 	ldw	r2,-40(fp)
  8020a8:	1880221e 	bne	r3,r2,802134 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8020ac:	e0bff517 	ldw	r2,-44(fp)
  8020b0:	10000526 	beq	r2,zero,8020c8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8020b4:	08020000 	call	802000 <alt_get_errno>
  8020b8:	1007883a 	mov	r3,r2
  8020bc:	008002c4 	movi	r2,11
  8020c0:	18800015 	stw	r2,0(r3)
        break;
  8020c4:	00002e06 	br	802180 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8020c8:	0005303a 	rdctl	r2,status
  8020cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8020d0:	e0fff817 	ldw	r3,-32(fp)
  8020d4:	00bfff84 	movi	r2,-2
  8020d8:	1884703a 	and	r2,r3,r2
  8020dc:	1001703a 	wrctl	status,r2
  
  return context;
  8020e0:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8020e4:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10800117 	ldw	r2,4(r2)
  8020f0:	10c11014 	ori	r3,r2,1088
  8020f4:	e0bffc17 	ldw	r2,-16(fp)
  8020f8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8020fc:	e0bffc17 	ldw	r2,-16(fp)
  802100:	10800017 	ldw	r2,0(r2)
  802104:	10800304 	addi	r2,r2,12
  802108:	e0fffc17 	ldw	r3,-16(fp)
  80210c:	18c00117 	ldw	r3,4(r3)
  802110:	10c00035 	stwio	r3,0(r2)
  802114:	e0bff717 	ldw	r2,-36(fp)
  802118:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80211c:	e0bff917 	ldw	r2,-28(fp)
  802120:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  802124:	e0bffc17 	ldw	r2,-16(fp)
  802128:	10c00417 	ldw	r3,16(r2)
  80212c:	e0bff617 	ldw	r2,-40(fp)
  802130:	18bffc26 	beq	r3,r2,802124 <__alt_data_end+0xff802124>
      }
    }

    count--;
  802134:	e0bff417 	ldw	r2,-48(fp)
  802138:	10bfffc4 	addi	r2,r2,-1
  80213c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  802140:	e0bffc17 	ldw	r2,-16(fp)
  802144:	10c00517 	ldw	r3,20(r2)
  802148:	e0bffd17 	ldw	r2,-12(fp)
  80214c:	11000044 	addi	r4,r2,1
  802150:	e13ffd15 	stw	r4,-12(fp)
  802154:	10800003 	ldbu	r2,0(r2)
  802158:	1009883a 	mov	r4,r2
  80215c:	e0bffc17 	ldw	r2,-16(fp)
  802160:	10c5883a 	add	r2,r2,r3
  802164:	10801704 	addi	r2,r2,92
  802168:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80216c:	e0bffc17 	ldw	r2,-16(fp)
  802170:	e0fff617 	ldw	r3,-40(fp)
  802174:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802178:	e0bff417 	ldw	r2,-48(fp)
  80217c:	103fc21e 	bne	r2,zero,802088 <__alt_data_end+0xff802088>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802180:	0005303a 	rdctl	r2,status
  802184:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802188:	e0fffa17 	ldw	r3,-24(fp)
  80218c:	00bfff84 	movi	r2,-2
  802190:	1884703a 	and	r2,r3,r2
  802194:	1001703a 	wrctl	status,r2
  
  return context;
  802198:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80219c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	10800117 	ldw	r2,4(r2)
  8021a8:	10c11014 	ori	r3,r2,1088
  8021ac:	e0bffc17 	ldw	r2,-16(fp)
  8021b0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8021b4:	e0bffc17 	ldw	r2,-16(fp)
  8021b8:	10800017 	ldw	r2,0(r2)
  8021bc:	10800304 	addi	r2,r2,12
  8021c0:	e0fffc17 	ldw	r3,-16(fp)
  8021c4:	18c00117 	ldw	r3,4(r3)
  8021c8:	10c00035 	stwio	r3,0(r2)
  8021cc:	e0bff717 	ldw	r2,-36(fp)
  8021d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8021d4:	e0bffb17 	ldw	r2,-20(fp)
  8021d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8021dc:	e0fffe17 	ldw	r3,-8(fp)
  8021e0:	e0bff417 	ldw	r2,-48(fp)
  8021e4:	1885c83a 	sub	r2,r3,r2
}
  8021e8:	e037883a 	mov	sp,fp
  8021ec:	dfc00117 	ldw	ra,4(sp)
  8021f0:	df000017 	ldw	fp,0(sp)
  8021f4:	dec00204 	addi	sp,sp,8
  8021f8:	f800283a 	ret

008021fc <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  8021fc:	defffc04 	addi	sp,sp,-16
  802200:	dfc00315 	stw	ra,12(sp)
  802204:	df000215 	stw	fp,8(sp)
  802208:	df000204 	addi	fp,sp,8
  80220c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  802210:	e13fff17 	ldw	r4,-4(fp)
  802214:	01402034 	movhi	r5,128
  802218:	295da904 	addi	r5,r5,30372
  80221c:	0802e0c0 	call	802e0c <alt_find_dev>
  802220:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  802224:	e0bffe17 	ldw	r2,-8(fp)
}
  802228:	e037883a 	mov	sp,fp
  80222c:	dfc00117 	ldw	ra,4(sp)
  802230:	df000017 	ldw	fp,0(sp)
  802234:	dec00204 	addi	sp,sp,8
  802238:	f800283a 	ret

0080223c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  80223c:	defffd04 	addi	sp,sp,-12
  802240:	df000215 	stw	fp,8(sp)
  802244:	df000204 	addi	fp,sp,8
  802248:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80224c:	e0bfff17 	ldw	r2,-4(fp)
  802250:	10800a17 	ldw	r2,40(r2)
  802254:	10800037 	ldwio	r2,0(r2)
  802258:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  80225c:	e0bffe17 	ldw	r2,-8(fp)
  802260:	10800054 	ori	r2,r2,1
  802264:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802268:	e0bfff17 	ldw	r2,-4(fp)
  80226c:	10800a17 	ldw	r2,40(r2)
  802270:	1007883a 	mov	r3,r2
  802274:	e0bffe17 	ldw	r2,-8(fp)
  802278:	18800035 	stwio	r2,0(r3)
}
  80227c:	e037883a 	mov	sp,fp
  802280:	df000017 	ldw	fp,0(sp)
  802284:	dec00104 	addi	sp,sp,4
  802288:	f800283a 	ret

0080228c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  80228c:	defffd04 	addi	sp,sp,-12
  802290:	df000215 	stw	fp,8(sp)
  802294:	df000204 	addi	fp,sp,8
  802298:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80229c:	e0bfff17 	ldw	r2,-4(fp)
  8022a0:	10800a17 	ldw	r2,40(r2)
  8022a4:	10800037 	ldwio	r2,0(r2)
  8022a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  8022ac:	e0fffe17 	ldw	r3,-8(fp)
  8022b0:	00bfff84 	movi	r2,-2
  8022b4:	1884703a 	and	r2,r3,r2
  8022b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8022bc:	e0bfff17 	ldw	r2,-4(fp)
  8022c0:	10800a17 	ldw	r2,40(r2)
  8022c4:	1007883a 	mov	r3,r2
  8022c8:	e0bffe17 	ldw	r2,-8(fp)
  8022cc:	18800035 	stwio	r2,0(r3)
}
  8022d0:	e037883a 	mov	sp,fp
  8022d4:	df000017 	ldw	fp,0(sp)
  8022d8:	dec00104 	addi	sp,sp,4
  8022dc:	f800283a 	ret

008022e0 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  8022e0:	defffd04 	addi	sp,sp,-12
  8022e4:	df000215 	stw	fp,8(sp)
  8022e8:	df000204 	addi	fp,sp,8
  8022ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8022f0:	e0bfff17 	ldw	r2,-4(fp)
  8022f4:	10800a17 	ldw	r2,40(r2)
  8022f8:	10800037 	ldwio	r2,0(r2)
  8022fc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  802300:	e0bffe17 	ldw	r2,-8(fp)
  802304:	10800094 	ori	r2,r2,2
  802308:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80230c:	e0bfff17 	ldw	r2,-4(fp)
  802310:	10800a17 	ldw	r2,40(r2)
  802314:	1007883a 	mov	r3,r2
  802318:	e0bffe17 	ldw	r2,-8(fp)
  80231c:	18800035 	stwio	r2,0(r3)
}
  802320:	e037883a 	mov	sp,fp
  802324:	df000017 	ldw	fp,0(sp)
  802328:	dec00104 	addi	sp,sp,4
  80232c:	f800283a 	ret

00802330 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  802330:	defffd04 	addi	sp,sp,-12
  802334:	df000215 	stw	fp,8(sp)
  802338:	df000204 	addi	fp,sp,8
  80233c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802340:	e0bfff17 	ldw	r2,-4(fp)
  802344:	10800a17 	ldw	r2,40(r2)
  802348:	10800037 	ldwio	r2,0(r2)
  80234c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  802350:	e0fffe17 	ldw	r3,-8(fp)
  802354:	00bfff44 	movi	r2,-3
  802358:	1884703a 	and	r2,r3,r2
  80235c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802360:	e0bfff17 	ldw	r2,-4(fp)
  802364:	10800a17 	ldw	r2,40(r2)
  802368:	1007883a 	mov	r3,r2
  80236c:	e0bffe17 	ldw	r2,-8(fp)
  802370:	18800035 	stwio	r2,0(r3)
}
  802374:	e037883a 	mov	sp,fp
  802378:	df000017 	ldw	fp,0(sp)
  80237c:	dec00104 	addi	sp,sp,4
  802380:	f800283a 	ret

00802384 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  802384:	defffd04 	addi	sp,sp,-12
  802388:	df000215 	stw	fp,8(sp)
  80238c:	df000204 	addi	fp,sp,8
  802390:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802394:	e0bfff17 	ldw	r2,-4(fp)
  802398:	10800a17 	ldw	r2,40(r2)
  80239c:	10800037 	ldwio	r2,0(r2)
  8023a0:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8023a4:	e0bffe17 	ldw	r2,-8(fp)
  8023a8:	1080400c 	andi	r2,r2,256
  8023ac:	1004c03a 	cmpne	r2,r2,zero
  8023b0:	10803fcc 	andi	r2,r2,255
}
  8023b4:	e037883a 	mov	sp,fp
  8023b8:	df000017 	ldw	fp,0(sp)
  8023bc:	dec00104 	addi	sp,sp,4
  8023c0:	f800283a 	ret

008023c4 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  8023c4:	defffd04 	addi	sp,sp,-12
  8023c8:	df000215 	stw	fp,8(sp)
  8023cc:	df000204 	addi	fp,sp,8
  8023d0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8023d4:	e0bfff17 	ldw	r2,-4(fp)
  8023d8:	10800a17 	ldw	r2,40(r2)
  8023dc:	10800037 	ldwio	r2,0(r2)
  8023e0:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  8023e4:	e0bffe17 	ldw	r2,-8(fp)
  8023e8:	1080800c 	andi	r2,r2,512
  8023ec:	1004c03a 	cmpne	r2,r2,zero
  8023f0:	10803fcc 	andi	r2,r2,255
}
  8023f4:	e037883a 	mov	sp,fp
  8023f8:	df000017 	ldw	fp,0(sp)
  8023fc:	dec00104 	addi	sp,sp,4
  802400:	f800283a 	ret

00802404 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  802404:	defffd04 	addi	sp,sp,-12
  802408:	df000215 	stw	fp,8(sp)
  80240c:	df000204 	addi	fp,sp,8
  802410:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  802414:	e0bfff17 	ldw	r2,-4(fp)
  802418:	10800a17 	ldw	r2,40(r2)
  80241c:	10800037 	ldwio	r2,0(r2)
  802420:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  802424:	e0bffe17 	ldw	r2,-8(fp)
  802428:	10800114 	ori	r2,r2,4
  80242c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  802430:	e0bffe17 	ldw	r2,-8(fp)
  802434:	10800214 	ori	r2,r2,8
  802438:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80243c:	e0bfff17 	ldw	r2,-4(fp)
  802440:	10800a17 	ldw	r2,40(r2)
  802444:	1007883a 	mov	r3,r2
  802448:	e0bffe17 	ldw	r2,-8(fp)
  80244c:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  802450:	e0fffe17 	ldw	r3,-8(fp)
  802454:	00bffec4 	movi	r2,-5
  802458:	1884703a 	and	r2,r3,r2
  80245c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  802460:	e0fffe17 	ldw	r3,-8(fp)
  802464:	00bffdc4 	movi	r2,-9
  802468:	1884703a 	and	r2,r3,r2
  80246c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  802470:	e0bfff17 	ldw	r2,-4(fp)
  802474:	10800a17 	ldw	r2,40(r2)
  802478:	1007883a 	mov	r3,r2
  80247c:	e0bffe17 	ldw	r2,-8(fp)
  802480:	18800035 	stwio	r2,0(r3)
}
  802484:	e037883a 	mov	sp,fp
  802488:	df000017 	ldw	fp,0(sp)
  80248c:	dec00104 	addi	sp,sp,4
  802490:	f800283a 	ret

00802494 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  802494:	defffc04 	addi	sp,sp,-16
  802498:	df000315 	stw	fp,12(sp)
  80249c:	df000304 	addi	fp,sp,12
  8024a0:	e13ffe15 	stw	r4,-8(fp)
  8024a4:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8024a8:	e0bffe17 	ldw	r2,-8(fp)
  8024ac:	10800a17 	ldw	r2,40(r2)
  8024b0:	10800104 	addi	r2,r2,4
  8024b4:	10800037 	ldwio	r2,0(r2)
  8024b8:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  8024bc:	e0bfff17 	ldw	r2,-4(fp)
  8024c0:	1000041e 	bne	r2,zero,8024d4 <alt_up_audio_read_fifo_avail+0x40>
  8024c4:	e0bffd17 	ldw	r2,-12(fp)
  8024c8:	10bfc00c 	andi	r2,r2,65280
  8024cc:	1004d23a 	srli	r2,r2,8
  8024d0:	00000206 	br	8024dc <alt_up_audio_read_fifo_avail+0x48>
  8024d4:	e0bffd17 	ldw	r2,-12(fp)
  8024d8:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8024dc:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  8024e0:	e0bffd17 	ldw	r2,-12(fp)
}
  8024e4:	e037883a 	mov	sp,fp
  8024e8:	df000017 	ldw	fp,0(sp)
  8024ec:	dec00104 	addi	sp,sp,4
  8024f0:	f800283a 	ret

008024f4 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8024f4:	defffa04 	addi	sp,sp,-24
  8024f8:	dfc00515 	stw	ra,20(sp)
  8024fc:	df000415 	stw	fp,16(sp)
  802500:	df000404 	addi	fp,sp,16
  802504:	e13ffd15 	stw	r4,-12(fp)
  802508:	e17ffe15 	stw	r5,-8(fp)
  80250c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  802510:	e13ffd17 	ldw	r4,-12(fp)
  802514:	01400044 	movi	r5,1
  802518:	08024940 	call	802494 <alt_up_audio_read_fifo_avail>
  80251c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10801868 	cmpgeui	r2,r2,97
  802528:	1000021e 	bne	r2,zero,802534 <alt_up_audio_record_r+0x40>
		return 0;
  80252c:	0005883a 	mov	r2,zero
  802530:	00000506 	br	802548 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  802534:	e13ffd17 	ldw	r4,-12(fp)
  802538:	e17ffe17 	ldw	r5,-8(fp)
  80253c:	e1bfff17 	ldw	r6,-4(fp)
  802540:	01c00044 	movi	r7,1
  802544:	08026f40 	call	8026f4 <alt_up_audio_read_fifo>
}
  802548:	e037883a 	mov	sp,fp
  80254c:	dfc00117 	ldw	ra,4(sp)
  802550:	df000017 	ldw	fp,0(sp)
  802554:	dec00204 	addi	sp,sp,8
  802558:	f800283a 	ret

0080255c <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80255c:	defffa04 	addi	sp,sp,-24
  802560:	dfc00515 	stw	ra,20(sp)
  802564:	df000415 	stw	fp,16(sp)
  802568:	df000404 	addi	fp,sp,16
  80256c:	e13ffd15 	stw	r4,-12(fp)
  802570:	e17ffe15 	stw	r5,-8(fp)
  802574:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  802578:	e13ffd17 	ldw	r4,-12(fp)
  80257c:	000b883a 	mov	r5,zero
  802580:	08024940 	call	802494 <alt_up_audio_read_fifo_avail>
  802584:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10801868 	cmpgeui	r2,r2,97
  802590:	1000021e 	bne	r2,zero,80259c <alt_up_audio_record_l+0x40>
		return 0;
  802594:	0005883a 	mov	r2,zero
  802598:	00000506 	br	8025b0 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  80259c:	e13ffd17 	ldw	r4,-12(fp)
  8025a0:	e17ffe17 	ldw	r5,-8(fp)
  8025a4:	e1bfff17 	ldw	r6,-4(fp)
  8025a8:	000f883a 	mov	r7,zero
  8025ac:	08026f40 	call	8026f4 <alt_up_audio_read_fifo>
}
  8025b0:	e037883a 	mov	sp,fp
  8025b4:	dfc00117 	ldw	ra,4(sp)
  8025b8:	df000017 	ldw	fp,0(sp)
  8025bc:	dec00204 	addi	sp,sp,8
  8025c0:	f800283a 	ret

008025c4 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  8025c4:	defffc04 	addi	sp,sp,-16
  8025c8:	df000315 	stw	fp,12(sp)
  8025cc:	df000304 	addi	fp,sp,12
  8025d0:	e13ffe15 	stw	r4,-8(fp)
  8025d4:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8025d8:	e0bffe17 	ldw	r2,-8(fp)
  8025dc:	10800a17 	ldw	r2,40(r2)
  8025e0:	10800104 	addi	r2,r2,4
  8025e4:	10800037 	ldwio	r2,0(r2)
  8025e8:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  8025ec:	e0bfff17 	ldw	r2,-4(fp)
  8025f0:	1000031e 	bne	r2,zero,802600 <alt_up_audio_write_fifo_space+0x3c>
  8025f4:	e0bffd17 	ldw	r2,-12(fp)
  8025f8:	1004d63a 	srli	r2,r2,24
  8025fc:	00000306 	br	80260c <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  802600:	e0bffd17 	ldw	r2,-12(fp)
  802604:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802608:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80260c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  802610:	e0bffd17 	ldw	r2,-12(fp)
}
  802614:	e037883a 	mov	sp,fp
  802618:	df000017 	ldw	fp,0(sp)
  80261c:	dec00104 	addi	sp,sp,4
  802620:	f800283a 	ret

00802624 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  802624:	defffa04 	addi	sp,sp,-24
  802628:	dfc00515 	stw	ra,20(sp)
  80262c:	df000415 	stw	fp,16(sp)
  802630:	df000404 	addi	fp,sp,16
  802634:	e13ffd15 	stw	r4,-12(fp)
  802638:	e17ffe15 	stw	r5,-8(fp)
  80263c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  802640:	e13ffd17 	ldw	r4,-12(fp)
  802644:	01400044 	movi	r5,1
  802648:	08025c40 	call	8025c4 <alt_up_audio_write_fifo_space>
  80264c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  802650:	e0bffc17 	ldw	r2,-16(fp)
  802654:	10801868 	cmpgeui	r2,r2,97
  802658:	1000021e 	bne	r2,zero,802664 <alt_up_audio_play_r+0x40>
		return 0;
  80265c:	0005883a 	mov	r2,zero
  802660:	00000506 	br	802678 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  802664:	e13ffd17 	ldw	r4,-12(fp)
  802668:	e17ffe17 	ldw	r5,-8(fp)
  80266c:	e1bfff17 	ldw	r6,-4(fp)
  802670:	01c00044 	movi	r7,1
  802674:	08027d40 	call	8027d4 <alt_up_audio_write_fifo>
}
  802678:	e037883a 	mov	sp,fp
  80267c:	dfc00117 	ldw	ra,4(sp)
  802680:	df000017 	ldw	fp,0(sp)
  802684:	dec00204 	addi	sp,sp,8
  802688:	f800283a 	ret

0080268c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80268c:	defffa04 	addi	sp,sp,-24
  802690:	dfc00515 	stw	ra,20(sp)
  802694:	df000415 	stw	fp,16(sp)
  802698:	df000404 	addi	fp,sp,16
  80269c:	e13ffd15 	stw	r4,-12(fp)
  8026a0:	e17ffe15 	stw	r5,-8(fp)
  8026a4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  8026a8:	e13ffd17 	ldw	r4,-12(fp)
  8026ac:	000b883a 	mov	r5,zero
  8026b0:	08025c40 	call	8025c4 <alt_up_audio_write_fifo_space>
  8026b4:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  8026b8:	e0bffc17 	ldw	r2,-16(fp)
  8026bc:	10801868 	cmpgeui	r2,r2,97
  8026c0:	1000021e 	bne	r2,zero,8026cc <alt_up_audio_play_l+0x40>
		return 0;
  8026c4:	0005883a 	mov	r2,zero
  8026c8:	00000506 	br	8026e0 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8026cc:	e13ffd17 	ldw	r4,-12(fp)
  8026d0:	e17ffe17 	ldw	r5,-8(fp)
  8026d4:	e1bfff17 	ldw	r6,-4(fp)
  8026d8:	000f883a 	mov	r7,zero
  8026dc:	08027d40 	call	8027d4 <alt_up_audio_write_fifo>
}
  8026e0:	e037883a 	mov	sp,fp
  8026e4:	dfc00117 	ldw	ra,4(sp)
  8026e8:	df000017 	ldw	fp,0(sp)
  8026ec:	dec00204 	addi	sp,sp,8
  8026f0:	f800283a 	ret

008026f4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  8026f4:	defff904 	addi	sp,sp,-28
  8026f8:	df000615 	stw	fp,24(sp)
  8026fc:	df000604 	addi	fp,sp,24
  802700:	e13ffc15 	stw	r4,-16(fp)
  802704:	e17ffd15 	stw	r5,-12(fp)
  802708:	e1bffe15 	stw	r6,-8(fp)
  80270c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  802710:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  802714:	00002706 	br	8027b4 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  802718:	e0bffc17 	ldw	r2,-16(fp)
  80271c:	10800a17 	ldw	r2,40(r2)
  802720:	10800104 	addi	r2,r2,4
  802724:	10800037 	ldwio	r2,0(r2)
  802728:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  80272c:	e0bfff17 	ldw	r2,-4(fp)
  802730:	1000041e 	bne	r2,zero,802744 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  802734:	e0bffb17 	ldw	r2,-20(fp)
  802738:	10bfc00c 	andi	r2,r2,65280
			:
  80273c:	1004d23a 	srli	r2,r2,8
  802740:	00000206 	br	80274c <alt_up_audio_read_fifo+0x58>
  802744:	e0bffb17 	ldw	r2,-20(fp)
  802748:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80274c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  802750:	e0bffb17 	ldw	r2,-20(fp)
  802754:	10001626 	beq	r2,zero,8027b0 <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  802758:	e0bffa17 	ldw	r2,-24(fp)
  80275c:	1085883a 	add	r2,r2,r2
  802760:	1085883a 	add	r2,r2,r2
  802764:	1007883a 	mov	r3,r2
  802768:	e0bffd17 	ldw	r2,-12(fp)
  80276c:	10c5883a 	add	r2,r2,r3
  802770:	e0ffff17 	ldw	r3,-4(fp)
  802774:	1800051e 	bne	r3,zero,80278c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  802778:	e0fffc17 	ldw	r3,-16(fp)
  80277c:	18c00a17 	ldw	r3,40(r3)
  802780:	18c00204 	addi	r3,r3,8
  802784:	18c00037 	ldwio	r3,0(r3)
  802788:	00000406 	br	80279c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  80278c:	e0fffc17 	ldw	r3,-16(fp)
  802790:	18c00a17 	ldw	r3,40(r3)
  802794:	18c00304 	addi	r3,r3,12
  802798:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  80279c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  8027a0:	e0bffa17 	ldw	r2,-24(fp)
  8027a4:	10800044 	addi	r2,r2,1
  8027a8:	e0bffa15 	stw	r2,-24(fp)
  8027ac:	00000106 	br	8027b4 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
  8027b0:	00000306 	br	8027c0 <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8027b4:	e0fffa17 	ldw	r3,-24(fp)
  8027b8:	e0bffe17 	ldw	r2,-8(fp)
  8027bc:	18bfd616 	blt	r3,r2,802718 <__alt_data_end+0xff802718>
		{
			// no more data to read
			break;
		}
	}
	return count;
  8027c0:	e0bffa17 	ldw	r2,-24(fp)
}
  8027c4:	e037883a 	mov	sp,fp
  8027c8:	df000017 	ldw	fp,0(sp)
  8027cc:	dec00104 	addi	sp,sp,4
  8027d0:	f800283a 	ret

008027d4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  8027d4:	defff904 	addi	sp,sp,-28
  8027d8:	df000615 	stw	fp,24(sp)
  8027dc:	df000604 	addi	fp,sp,24
  8027e0:	e13ffc15 	stw	r4,-16(fp)
  8027e4:	e17ffd15 	stw	r5,-12(fp)
  8027e8:	e1bffe15 	stw	r6,-8(fp)
  8027ec:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  8027f0:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  8027f4:	00003106 	br	8028bc <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8027f8:	e0bffc17 	ldw	r2,-16(fp)
  8027fc:	10800a17 	ldw	r2,40(r2)
  802800:	10800104 	addi	r2,r2,4
  802804:	10800037 	ldwio	r2,0(r2)
  802808:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  80280c:	e0bfff17 	ldw	r2,-4(fp)
  802810:	1000031e 	bne	r2,zero,802820 <alt_up_audio_write_fifo+0x4c>
  802814:	e0bffb17 	ldw	r2,-20(fp)
  802818:	1004d63a 	srli	r2,r2,24
  80281c:	00000306 	br	80282c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  802820:	e0bffb17 	ldw	r2,-20(fp)
  802824:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  802828:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80282c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  802830:	e0bffb17 	ldw	r2,-20(fp)
  802834:	10002026 	beq	r2,zero,8028b8 <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  802838:	e0bfff17 	ldw	r2,-4(fp)
  80283c:	10000f1e 	bne	r2,zero,80287c <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  802840:	e0bffc17 	ldw	r2,-16(fp)
  802844:	10800a17 	ldw	r2,40(r2)
  802848:	10800204 	addi	r2,r2,8
  80284c:	1009883a 	mov	r4,r2
  802850:	e0bffa17 	ldw	r2,-24(fp)
  802854:	10c00044 	addi	r3,r2,1
  802858:	e0fffa15 	stw	r3,-24(fp)
  80285c:	1085883a 	add	r2,r2,r2
  802860:	1085883a 	add	r2,r2,r2
  802864:	1007883a 	mov	r3,r2
  802868:	e0bffd17 	ldw	r2,-12(fp)
  80286c:	10c5883a 	add	r2,r2,r3
  802870:	10800017 	ldw	r2,0(r2)
  802874:	20800035 	stwio	r2,0(r4)
  802878:	00001006 	br	8028bc <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  80287c:	e0bffc17 	ldw	r2,-16(fp)
  802880:	10800a17 	ldw	r2,40(r2)
  802884:	10800304 	addi	r2,r2,12
  802888:	1009883a 	mov	r4,r2
  80288c:	e0bffa17 	ldw	r2,-24(fp)
  802890:	10c00044 	addi	r3,r2,1
  802894:	e0fffa15 	stw	r3,-24(fp)
  802898:	1085883a 	add	r2,r2,r2
  80289c:	1085883a 	add	r2,r2,r2
  8028a0:	1007883a 	mov	r3,r2
  8028a4:	e0bffd17 	ldw	r2,-12(fp)
  8028a8:	10c5883a 	add	r2,r2,r3
  8028ac:	10800017 	ldw	r2,0(r2)
  8028b0:	20800035 	stwio	r2,0(r4)
  8028b4:	00000106 	br	8028bc <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
  8028b8:	00000306 	br	8028c8 <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8028bc:	e0fffa17 	ldw	r3,-24(fp)
  8028c0:	e0bffe17 	ldw	r2,-8(fp)
  8028c4:	18bfcc16 	blt	r3,r2,8027f8 <__alt_data_end+0xff8027f8>
		{
			// no more space to write
			break;
		}
	}
	return count;
  8028c8:	e0bffa17 	ldw	r2,-24(fp)
}
  8028cc:	e037883a 	mov	sp,fp
  8028d0:	df000017 	ldw	fp,0(sp)
  8028d4:	dec00104 	addi	sp,sp,4
  8028d8:	f800283a 	ret

008028dc <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8028dc:	defffd04 	addi	sp,sp,-12
  8028e0:	df000215 	stw	fp,8(sp)
  8028e4:	df000204 	addi	fp,sp,8
  8028e8:	e13ffe15 	stw	r4,-8(fp)
  8028ec:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8028f0:	e0bfff17 	ldw	r2,-4(fp)
  8028f4:	1000051e 	bne	r2,zero,80290c <alt_up_audio_read_fifo_head+0x30>
  8028f8:	e0bffe17 	ldw	r2,-8(fp)
  8028fc:	10800a17 	ldw	r2,40(r2)
  802900:	10800204 	addi	r2,r2,8
  802904:	10800037 	ldwio	r2,0(r2)
  802908:	00000406 	br	80291c <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  80290c:	e0bffe17 	ldw	r2,-8(fp)
  802910:	10800a17 	ldw	r2,40(r2)
  802914:	10800304 	addi	r2,r2,12
  802918:	10800037 	ldwio	r2,0(r2)
}
  80291c:	e037883a 	mov	sp,fp
  802920:	df000017 	ldw	fp,0(sp)
  802924:	dec00104 	addi	sp,sp,4
  802928:	f800283a 	ret

0080292c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  80292c:	defffc04 	addi	sp,sp,-16
  802930:	df000315 	stw	fp,12(sp)
  802934:	df000304 	addi	fp,sp,12
  802938:	e13ffd15 	stw	r4,-12(fp)
  80293c:	e17ffe15 	stw	r5,-8(fp)
  802940:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  802944:	e0bfff17 	ldw	r2,-4(fp)
  802948:	1000071e 	bne	r2,zero,802968 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  80294c:	e0bffd17 	ldw	r2,-12(fp)
  802950:	10800a17 	ldw	r2,40(r2)
  802954:	10800204 	addi	r2,r2,8
  802958:	1007883a 	mov	r3,r2
  80295c:	e0bffe17 	ldw	r2,-8(fp)
  802960:	18800035 	stwio	r2,0(r3)
  802964:	00000606 	br	802980 <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  802968:	e0bffd17 	ldw	r2,-12(fp)
  80296c:	10800a17 	ldw	r2,40(r2)
  802970:	10800304 	addi	r2,r2,12
  802974:	1007883a 	mov	r3,r2
  802978:	e0bffe17 	ldw	r2,-8(fp)
  80297c:	18800035 	stwio	r2,0(r3)
}
  802980:	e037883a 	mov	sp,fp
  802984:	df000017 	ldw	fp,0(sp)
  802988:	dec00104 	addi	sp,sp,4
  80298c:	f800283a 	ret

00802990 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802990:	defff504 	addi	sp,sp,-44
  802994:	df000a15 	stw	fp,40(sp)
  802998:	df000a04 	addi	fp,sp,40
  80299c:	e13ffc15 	stw	r4,-16(fp)
  8029a0:	e17ffd15 	stw	r5,-12(fp)
  8029a4:	e1bffe15 	stw	r6,-8(fp)
  8029a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8029ac:	e03ff615 	stw	zero,-40(fp)
  8029b0:	00802074 	movhi	r2,129
  8029b4:	10a0db04 	addi	r2,r2,-31892
  8029b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8029bc:	10003f26 	beq	r2,zero,802abc <alt_alarm_start+0x12c>
  {
    if (alarm)
  8029c0:	e0bffc17 	ldw	r2,-16(fp)
  8029c4:	10003b26 	beq	r2,zero,802ab4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  8029c8:	e0bffc17 	ldw	r2,-16(fp)
  8029cc:	e0fffe17 	ldw	r3,-8(fp)
  8029d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8029d4:	e0bffc17 	ldw	r2,-16(fp)
  8029d8:	e0ffff17 	ldw	r3,-4(fp)
  8029dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8029e0:	0005303a 	rdctl	r2,status
  8029e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8029e8:	e0fff817 	ldw	r3,-32(fp)
  8029ec:	00bfff84 	movi	r2,-2
  8029f0:	1884703a 	and	r2,r3,r2
  8029f4:	1001703a 	wrctl	status,r2
  
  return context;
  8029f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8029fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  802a00:	00802074 	movhi	r2,129
  802a04:	10a0dc04 	addi	r2,r2,-31888
  802a08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  802a0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  802a10:	e0fffd17 	ldw	r3,-12(fp)
  802a14:	e0bff617 	ldw	r2,-40(fp)
  802a18:	1885883a 	add	r2,r3,r2
  802a1c:	10c00044 	addi	r3,r2,1
  802a20:	e0bffc17 	ldw	r2,-16(fp)
  802a24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  802a28:	e0bffc17 	ldw	r2,-16(fp)
  802a2c:	10c00217 	ldw	r3,8(r2)
  802a30:	e0bff617 	ldw	r2,-40(fp)
  802a34:	1880042e 	bgeu	r3,r2,802a48 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  802a38:	e0bffc17 	ldw	r2,-16(fp)
  802a3c:	00c00044 	movi	r3,1
  802a40:	10c00405 	stb	r3,16(r2)
  802a44:	00000206 	br	802a50 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802a50:	e0fffc17 	ldw	r3,-16(fp)
  802a54:	00802034 	movhi	r2,128
  802a58:	109dae04 	addi	r2,r2,30392
  802a5c:	e0bff915 	stw	r2,-28(fp)
  802a60:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802a64:	e0bffa17 	ldw	r2,-24(fp)
  802a68:	e0fff917 	ldw	r3,-28(fp)
  802a6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802a70:	e0bff917 	ldw	r2,-28(fp)
  802a74:	10c00017 	ldw	r3,0(r2)
  802a78:	e0bffa17 	ldw	r2,-24(fp)
  802a7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802a80:	e0bff917 	ldw	r2,-28(fp)
  802a84:	10800017 	ldw	r2,0(r2)
  802a88:	e0fffa17 	ldw	r3,-24(fp)
  802a8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802a90:	e0bff917 	ldw	r2,-28(fp)
  802a94:	e0fffa17 	ldw	r3,-24(fp)
  802a98:	10c00015 	stw	r3,0(r2)
  802a9c:	e0bff717 	ldw	r2,-36(fp)
  802aa0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802aa4:	e0bffb17 	ldw	r2,-20(fp)
  802aa8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  802aac:	0005883a 	mov	r2,zero
  802ab0:	00000306 	br	802ac0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  802ab4:	00bffa84 	movi	r2,-22
  802ab8:	00000106 	br	802ac0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  802abc:	00bfde84 	movi	r2,-134
  }
}
  802ac0:	e037883a 	mov	sp,fp
  802ac4:	df000017 	ldw	fp,0(sp)
  802ac8:	dec00104 	addi	sp,sp,4
  802acc:	f800283a 	ret

00802ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802ad0:	defffe04 	addi	sp,sp,-8
  802ad4:	dfc00115 	stw	ra,4(sp)
  802ad8:	df000015 	stw	fp,0(sp)
  802adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802ae0:	00802034 	movhi	r2,128
  802ae4:	109dac04 	addi	r2,r2,30384
  802ae8:	10800017 	ldw	r2,0(r2)
  802aec:	10000526 	beq	r2,zero,802b04 <alt_get_errno+0x34>
  802af0:	00802034 	movhi	r2,128
  802af4:	109dac04 	addi	r2,r2,30384
  802af8:	10800017 	ldw	r2,0(r2)
  802afc:	103ee83a 	callr	r2
  802b00:	00000206 	br	802b0c <alt_get_errno+0x3c>
  802b04:	00802074 	movhi	r2,129
  802b08:	10a0de04 	addi	r2,r2,-31880
}
  802b0c:	e037883a 	mov	sp,fp
  802b10:	dfc00117 	ldw	ra,4(sp)
  802b14:	df000017 	ldw	fp,0(sp)
  802b18:	dec00204 	addi	sp,sp,8
  802b1c:	f800283a 	ret

00802b20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802b20:	defffb04 	addi	sp,sp,-20
  802b24:	dfc00415 	stw	ra,16(sp)
  802b28:	df000315 	stw	fp,12(sp)
  802b2c:	df000304 	addi	fp,sp,12
  802b30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802b34:	e0bfff17 	ldw	r2,-4(fp)
  802b38:	10000616 	blt	r2,zero,802b54 <close+0x34>
  802b3c:	e0bfff17 	ldw	r2,-4(fp)
  802b40:	10c00324 	muli	r3,r2,12
  802b44:	00802034 	movhi	r2,128
  802b48:	109b3b04 	addi	r2,r2,27884
  802b4c:	1885883a 	add	r2,r3,r2
  802b50:	00000106 	br	802b58 <close+0x38>
  802b54:	0005883a 	mov	r2,zero
  802b58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802b5c:	e0bffd17 	ldw	r2,-12(fp)
  802b60:	10001926 	beq	r2,zero,802bc8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802b64:	e0bffd17 	ldw	r2,-12(fp)
  802b68:	10800017 	ldw	r2,0(r2)
  802b6c:	10800417 	ldw	r2,16(r2)
  802b70:	10000626 	beq	r2,zero,802b8c <close+0x6c>
  802b74:	e0bffd17 	ldw	r2,-12(fp)
  802b78:	10800017 	ldw	r2,0(r2)
  802b7c:	10800417 	ldw	r2,16(r2)
  802b80:	e13ffd17 	ldw	r4,-12(fp)
  802b84:	103ee83a 	callr	r2
  802b88:	00000106 	br	802b90 <close+0x70>
  802b8c:	0005883a 	mov	r2,zero
  802b90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802b94:	e13fff17 	ldw	r4,-4(fp)
  802b98:	08034280 	call	803428 <alt_release_fd>
    if (rval < 0)
  802b9c:	e0bffe17 	ldw	r2,-8(fp)
  802ba0:	1000070e 	bge	r2,zero,802bc0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802ba4:	0802ad00 	call	802ad0 <alt_get_errno>
  802ba8:	1007883a 	mov	r3,r2
  802bac:	e0bffe17 	ldw	r2,-8(fp)
  802bb0:	0085c83a 	sub	r2,zero,r2
  802bb4:	18800015 	stw	r2,0(r3)
      return -1;
  802bb8:	00bfffc4 	movi	r2,-1
  802bbc:	00000706 	br	802bdc <close+0xbc>
    }
    return 0;
  802bc0:	0005883a 	mov	r2,zero
  802bc4:	00000506 	br	802bdc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802bc8:	0802ad00 	call	802ad0 <alt_get_errno>
  802bcc:	1007883a 	mov	r3,r2
  802bd0:	00801444 	movi	r2,81
  802bd4:	18800015 	stw	r2,0(r3)
    return -1;
  802bd8:	00bfffc4 	movi	r2,-1
  }
}
  802bdc:	e037883a 	mov	sp,fp
  802be0:	dfc00117 	ldw	ra,4(sp)
  802be4:	df000017 	ldw	fp,0(sp)
  802be8:	dec00204 	addi	sp,sp,8
  802bec:	f800283a 	ret

00802bf0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802bf0:	defffe04 	addi	sp,sp,-8
  802bf4:	df000115 	stw	fp,4(sp)
  802bf8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802bfc:	e03fff15 	stw	zero,-4(fp)
  802c00:	00000506 	br	802c18 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802c04:	e0bfff17 	ldw	r2,-4(fp)
  802c08:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802c0c:	e0bfff17 	ldw	r2,-4(fp)
  802c10:	10800804 	addi	r2,r2,32
  802c14:	e0bfff15 	stw	r2,-4(fp)
  802c18:	e0bfff17 	ldw	r2,-4(fp)
  802c1c:	10820030 	cmpltui	r2,r2,2048
  802c20:	103ff81e 	bne	r2,zero,802c04 <__alt_data_end+0xff802c04>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802c24:	e037883a 	mov	sp,fp
  802c28:	df000017 	ldw	fp,0(sp)
  802c2c:	dec00104 	addi	sp,sp,4
  802c30:	f800283a 	ret

00802c34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802c34:	defffc04 	addi	sp,sp,-16
  802c38:	df000315 	stw	fp,12(sp)
  802c3c:	df000304 	addi	fp,sp,12
  802c40:	e13ffd15 	stw	r4,-12(fp)
  802c44:	e17ffe15 	stw	r5,-8(fp)
  802c48:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802c4c:	e0bfff17 	ldw	r2,-4(fp)
}
  802c50:	e037883a 	mov	sp,fp
  802c54:	df000017 	ldw	fp,0(sp)
  802c58:	dec00104 	addi	sp,sp,4
  802c5c:	f800283a 	ret

00802c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802c60:	defffe04 	addi	sp,sp,-8
  802c64:	dfc00115 	stw	ra,4(sp)
  802c68:	df000015 	stw	fp,0(sp)
  802c6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802c70:	00802034 	movhi	r2,128
  802c74:	109dac04 	addi	r2,r2,30384
  802c78:	10800017 	ldw	r2,0(r2)
  802c7c:	10000526 	beq	r2,zero,802c94 <alt_get_errno+0x34>
  802c80:	00802034 	movhi	r2,128
  802c84:	109dac04 	addi	r2,r2,30384
  802c88:	10800017 	ldw	r2,0(r2)
  802c8c:	103ee83a 	callr	r2
  802c90:	00000206 	br	802c9c <alt_get_errno+0x3c>
  802c94:	00802074 	movhi	r2,129
  802c98:	10a0de04 	addi	r2,r2,-31880
}
  802c9c:	e037883a 	mov	sp,fp
  802ca0:	dfc00117 	ldw	ra,4(sp)
  802ca4:	df000017 	ldw	fp,0(sp)
  802ca8:	dec00204 	addi	sp,sp,8
  802cac:	f800283a 	ret

00802cb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802cb0:	defffa04 	addi	sp,sp,-24
  802cb4:	dfc00515 	stw	ra,20(sp)
  802cb8:	df000415 	stw	fp,16(sp)
  802cbc:	df000404 	addi	fp,sp,16
  802cc0:	e13ffe15 	stw	r4,-8(fp)
  802cc4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802cc8:	e0bffe17 	ldw	r2,-8(fp)
  802ccc:	10000326 	beq	r2,zero,802cdc <alt_dev_llist_insert+0x2c>
  802cd0:	e0bffe17 	ldw	r2,-8(fp)
  802cd4:	10800217 	ldw	r2,8(r2)
  802cd8:	1000061e 	bne	r2,zero,802cf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802cdc:	0802c600 	call	802c60 <alt_get_errno>
  802ce0:	1007883a 	mov	r3,r2
  802ce4:	00800584 	movi	r2,22
  802ce8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802cec:	00bffa84 	movi	r2,-22
  802cf0:	00001306 	br	802d40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  802cf4:	e0bffe17 	ldw	r2,-8(fp)
  802cf8:	e0ffff17 	ldw	r3,-4(fp)
  802cfc:	e0fffc15 	stw	r3,-16(fp)
  802d00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802d04:	e0bffd17 	ldw	r2,-12(fp)
  802d08:	e0fffc17 	ldw	r3,-16(fp)
  802d0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	10c00017 	ldw	r3,0(r2)
  802d18:	e0bffd17 	ldw	r2,-12(fp)
  802d1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802d20:	e0bffc17 	ldw	r2,-16(fp)
  802d24:	10800017 	ldw	r2,0(r2)
  802d28:	e0fffd17 	ldw	r3,-12(fp)
  802d2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802d30:	e0bffc17 	ldw	r2,-16(fp)
  802d34:	e0fffd17 	ldw	r3,-12(fp)
  802d38:	10c00015 	stw	r3,0(r2)

  return 0;  
  802d3c:	0005883a 	mov	r2,zero
}
  802d40:	e037883a 	mov	sp,fp
  802d44:	dfc00117 	ldw	ra,4(sp)
  802d48:	df000017 	ldw	fp,0(sp)
  802d4c:	dec00204 	addi	sp,sp,8
  802d50:	f800283a 	ret

00802d54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  802d54:	defffd04 	addi	sp,sp,-12
  802d58:	dfc00215 	stw	ra,8(sp)
  802d5c:	df000115 	stw	fp,4(sp)
  802d60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802d64:	00802034 	movhi	r2,128
  802d68:	1099c104 	addi	r2,r2,26372
  802d6c:	e0bfff15 	stw	r2,-4(fp)
  802d70:	00000606 	br	802d8c <_do_ctors+0x38>
        (*ctor) (); 
  802d74:	e0bfff17 	ldw	r2,-4(fp)
  802d78:	10800017 	ldw	r2,0(r2)
  802d7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802d80:	e0bfff17 	ldw	r2,-4(fp)
  802d84:	10bfff04 	addi	r2,r2,-4
  802d88:	e0bfff15 	stw	r2,-4(fp)
  802d8c:	e0ffff17 	ldw	r3,-4(fp)
  802d90:	00802034 	movhi	r2,128
  802d94:	1099c204 	addi	r2,r2,26376
  802d98:	18bff62e 	bgeu	r3,r2,802d74 <__alt_data_end+0xff802d74>
        (*ctor) (); 
}
  802d9c:	e037883a 	mov	sp,fp
  802da0:	dfc00117 	ldw	ra,4(sp)
  802da4:	df000017 	ldw	fp,0(sp)
  802da8:	dec00204 	addi	sp,sp,8
  802dac:	f800283a 	ret

00802db0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  802db0:	defffd04 	addi	sp,sp,-12
  802db4:	dfc00215 	stw	ra,8(sp)
  802db8:	df000115 	stw	fp,4(sp)
  802dbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802dc0:	00802034 	movhi	r2,128
  802dc4:	1099c104 	addi	r2,r2,26372
  802dc8:	e0bfff15 	stw	r2,-4(fp)
  802dcc:	00000606 	br	802de8 <_do_dtors+0x38>
        (*dtor) (); 
  802dd0:	e0bfff17 	ldw	r2,-4(fp)
  802dd4:	10800017 	ldw	r2,0(r2)
  802dd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802ddc:	e0bfff17 	ldw	r2,-4(fp)
  802de0:	10bfff04 	addi	r2,r2,-4
  802de4:	e0bfff15 	stw	r2,-4(fp)
  802de8:	e0ffff17 	ldw	r3,-4(fp)
  802dec:	00802034 	movhi	r2,128
  802df0:	1099c204 	addi	r2,r2,26376
  802df4:	18bff62e 	bgeu	r3,r2,802dd0 <__alt_data_end+0xff802dd0>
        (*dtor) (); 
}
  802df8:	e037883a 	mov	sp,fp
  802dfc:	dfc00117 	ldw	ra,4(sp)
  802e00:	df000017 	ldw	fp,0(sp)
  802e04:	dec00204 	addi	sp,sp,8
  802e08:	f800283a 	ret

00802e0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  802e0c:	defffa04 	addi	sp,sp,-24
  802e10:	dfc00515 	stw	ra,20(sp)
  802e14:	df000415 	stw	fp,16(sp)
  802e18:	df000404 	addi	fp,sp,16
  802e1c:	e13ffe15 	stw	r4,-8(fp)
  802e20:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  802e24:	e0bfff17 	ldw	r2,-4(fp)
  802e28:	10800017 	ldw	r2,0(r2)
  802e2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  802e30:	e13ffe17 	ldw	r4,-8(fp)
  802e34:	0803f4c0 	call	803f4c <strlen>
  802e38:	10800044 	addi	r2,r2,1
  802e3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  802e40:	00000d06 	br	802e78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  802e44:	e0bffc17 	ldw	r2,-16(fp)
  802e48:	10c00217 	ldw	r3,8(r2)
  802e4c:	e0bffd17 	ldw	r2,-12(fp)
  802e50:	1809883a 	mov	r4,r3
  802e54:	e17ffe17 	ldw	r5,-8(fp)
  802e58:	100d883a 	mov	r6,r2
  802e5c:	0803b080 	call	803b08 <memcmp>
  802e60:	1000021e 	bne	r2,zero,802e6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	00000706 	br	802e88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	10800017 	ldw	r2,0(r2)
  802e74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  802e78:	e0fffc17 	ldw	r3,-16(fp)
  802e7c:	e0bfff17 	ldw	r2,-4(fp)
  802e80:	18bff01e 	bne	r3,r2,802e44 <__alt_data_end+0xff802e44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  802e84:	0005883a 	mov	r2,zero
}
  802e88:	e037883a 	mov	sp,fp
  802e8c:	dfc00117 	ldw	ra,4(sp)
  802e90:	df000017 	ldw	fp,0(sp)
  802e94:	dec00204 	addi	sp,sp,8
  802e98:	f800283a 	ret

00802e9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802e9c:	defffe04 	addi	sp,sp,-8
  802ea0:	dfc00115 	stw	ra,4(sp)
  802ea4:	df000015 	stw	fp,0(sp)
  802ea8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  802eac:	0009883a 	mov	r4,zero
  802eb0:	01440004 	movi	r5,4096
  802eb4:	08039940 	call	803994 <alt_icache_flush>
#endif
}
  802eb8:	e037883a 	mov	sp,fp
  802ebc:	dfc00117 	ldw	ra,4(sp)
  802ec0:	df000017 	ldw	fp,0(sp)
  802ec4:	dec00204 	addi	sp,sp,8
  802ec8:	f800283a 	ret

00802ecc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802ecc:	defff904 	addi	sp,sp,-28
  802ed0:	dfc00615 	stw	ra,24(sp)
  802ed4:	df000515 	stw	fp,20(sp)
  802ed8:	df000504 	addi	fp,sp,20
  802edc:	e13ffc15 	stw	r4,-16(fp)
  802ee0:	e17ffd15 	stw	r5,-12(fp)
  802ee4:	e1bffe15 	stw	r6,-8(fp)
  802ee8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802eec:	e13ffd17 	ldw	r4,-12(fp)
  802ef0:	e17ffe17 	ldw	r5,-8(fp)
  802ef4:	e1bfff17 	ldw	r6,-4(fp)
  802ef8:	08032d00 	call	8032d0 <open>
  802efc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802f00:	e0bffb17 	ldw	r2,-20(fp)
  802f04:	10001c16 	blt	r2,zero,802f78 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  802f08:	00802034 	movhi	r2,128
  802f0c:	109b3b04 	addi	r2,r2,27884
  802f10:	e0fffb17 	ldw	r3,-20(fp)
  802f14:	18c00324 	muli	r3,r3,12
  802f18:	10c5883a 	add	r2,r2,r3
  802f1c:	10c00017 	ldw	r3,0(r2)
  802f20:	e0bffc17 	ldw	r2,-16(fp)
  802f24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  802f28:	00802034 	movhi	r2,128
  802f2c:	109b3b04 	addi	r2,r2,27884
  802f30:	e0fffb17 	ldw	r3,-20(fp)
  802f34:	18c00324 	muli	r3,r3,12
  802f38:	18c00104 	addi	r3,r3,4
  802f3c:	10c5883a 	add	r2,r2,r3
  802f40:	10c00017 	ldw	r3,0(r2)
  802f44:	e0bffc17 	ldw	r2,-16(fp)
  802f48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802f4c:	00802034 	movhi	r2,128
  802f50:	109b3b04 	addi	r2,r2,27884
  802f54:	e0fffb17 	ldw	r3,-20(fp)
  802f58:	18c00324 	muli	r3,r3,12
  802f5c:	18c00204 	addi	r3,r3,8
  802f60:	10c5883a 	add	r2,r2,r3
  802f64:	10c00017 	ldw	r3,0(r2)
  802f68:	e0bffc17 	ldw	r2,-16(fp)
  802f6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802f70:	e13ffb17 	ldw	r4,-20(fp)
  802f74:	08034280 	call	803428 <alt_release_fd>
  }
} 
  802f78:	e037883a 	mov	sp,fp
  802f7c:	dfc00117 	ldw	ra,4(sp)
  802f80:	df000017 	ldw	fp,0(sp)
  802f84:	dec00204 	addi	sp,sp,8
  802f88:	f800283a 	ret

00802f8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802f8c:	defffb04 	addi	sp,sp,-20
  802f90:	dfc00415 	stw	ra,16(sp)
  802f94:	df000315 	stw	fp,12(sp)
  802f98:	df000304 	addi	fp,sp,12
  802f9c:	e13ffd15 	stw	r4,-12(fp)
  802fa0:	e17ffe15 	stw	r5,-8(fp)
  802fa4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802fa8:	01002034 	movhi	r4,128
  802fac:	211b3e04 	addi	r4,r4,27896
  802fb0:	e17ffd17 	ldw	r5,-12(fp)
  802fb4:	01800044 	movi	r6,1
  802fb8:	01c07fc4 	movi	r7,511
  802fbc:	0802ecc0 	call	802ecc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802fc0:	01002034 	movhi	r4,128
  802fc4:	211b3b04 	addi	r4,r4,27884
  802fc8:	e17ffe17 	ldw	r5,-8(fp)
  802fcc:	000d883a 	mov	r6,zero
  802fd0:	01c07fc4 	movi	r7,511
  802fd4:	0802ecc0 	call	802ecc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802fd8:	01002034 	movhi	r4,128
  802fdc:	211b4104 	addi	r4,r4,27908
  802fe0:	e17fff17 	ldw	r5,-4(fp)
  802fe4:	01800044 	movi	r6,1
  802fe8:	01c07fc4 	movi	r7,511
  802fec:	0802ecc0 	call	802ecc <alt_open_fd>
}  
  802ff0:	e037883a 	mov	sp,fp
  802ff4:	dfc00117 	ldw	ra,4(sp)
  802ff8:	df000017 	ldw	fp,0(sp)
  802ffc:	dec00204 	addi	sp,sp,8
  803000:	f800283a 	ret

00803004 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  803004:	defff004 	addi	sp,sp,-64
  803008:	df000f15 	stw	fp,60(sp)
  80300c:	df000f04 	addi	fp,sp,60
  803010:	e13ffd15 	stw	r4,-12(fp)
  803014:	e17ffe15 	stw	r5,-8(fp)
  803018:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80301c:	00bffa84 	movi	r2,-22
  803020:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803024:	e0bffd17 	ldw	r2,-12(fp)
  803028:	10800828 	cmpgeui	r2,r2,32
  80302c:	10005c1e 	bne	r2,zero,8031a0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803030:	0005303a 	rdctl	r2,status
  803034:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803038:	e0fff317 	ldw	r3,-52(fp)
  80303c:	00bfff84 	movi	r2,-2
  803040:	1884703a 	and	r2,r3,r2
  803044:	1001703a 	wrctl	status,r2
  
  return context;
  803048:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80304c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  803050:	00802074 	movhi	r2,129
  803054:	10a0ec04 	addi	r2,r2,-31824
  803058:	e0fffd17 	ldw	r3,-12(fp)
  80305c:	180690fa 	slli	r3,r3,3
  803060:	10c5883a 	add	r2,r2,r3
  803064:	e0ffff17 	ldw	r3,-4(fp)
  803068:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80306c:	00802074 	movhi	r2,129
  803070:	10a0ec04 	addi	r2,r2,-31824
  803074:	e0fffd17 	ldw	r3,-12(fp)
  803078:	180690fa 	slli	r3,r3,3
  80307c:	18c00104 	addi	r3,r3,4
  803080:	10c5883a 	add	r2,r2,r3
  803084:	e0fffe17 	ldw	r3,-8(fp)
  803088:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80308c:	e0bfff17 	ldw	r2,-4(fp)
  803090:	10001f26 	beq	r2,zero,803110 <alt_irq_register+0x10c>
  803094:	e0bffd17 	ldw	r2,-12(fp)
  803098:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80309c:	0005303a 	rdctl	r2,status
  8030a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8030a4:	e0fff517 	ldw	r3,-44(fp)
  8030a8:	00bfff84 	movi	r2,-2
  8030ac:	1884703a 	and	r2,r3,r2
  8030b0:	1001703a 	wrctl	status,r2
  
  return context;
  8030b4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8030b8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  8030bc:	e0bff417 	ldw	r2,-48(fp)
  8030c0:	00c00044 	movi	r3,1
  8030c4:	1884983a 	sll	r2,r3,r2
  8030c8:	1007883a 	mov	r3,r2
  8030cc:	00802074 	movhi	r2,129
  8030d0:	10a0da04 	addi	r2,r2,-31896
  8030d4:	10800017 	ldw	r2,0(r2)
  8030d8:	1886b03a 	or	r3,r3,r2
  8030dc:	00802074 	movhi	r2,129
  8030e0:	10a0da04 	addi	r2,r2,-31896
  8030e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8030e8:	00802074 	movhi	r2,129
  8030ec:	10a0da04 	addi	r2,r2,-31896
  8030f0:	10800017 	ldw	r2,0(r2)
  8030f4:	100170fa 	wrctl	ienable,r2
  8030f8:	e0bff617 	ldw	r2,-40(fp)
  8030fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803100:	e0bff717 	ldw	r2,-36(fp)
  803104:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803108:	0005883a 	mov	r2,zero
  80310c:	00001f06 	br	80318c <alt_irq_register+0x188>
  803110:	e0bffd17 	ldw	r2,-12(fp)
  803114:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803118:	0005303a 	rdctl	r2,status
  80311c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803120:	e0fff917 	ldw	r3,-28(fp)
  803124:	00bfff84 	movi	r2,-2
  803128:	1884703a 	and	r2,r3,r2
  80312c:	1001703a 	wrctl	status,r2
  
  return context;
  803130:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803134:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  803138:	e0bff817 	ldw	r2,-32(fp)
  80313c:	00c00044 	movi	r3,1
  803140:	1884983a 	sll	r2,r3,r2
  803144:	0084303a 	nor	r2,zero,r2
  803148:	1007883a 	mov	r3,r2
  80314c:	00802074 	movhi	r2,129
  803150:	10a0da04 	addi	r2,r2,-31896
  803154:	10800017 	ldw	r2,0(r2)
  803158:	1886703a 	and	r3,r3,r2
  80315c:	00802074 	movhi	r2,129
  803160:	10a0da04 	addi	r2,r2,-31896
  803164:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803168:	00802074 	movhi	r2,129
  80316c:	10a0da04 	addi	r2,r2,-31896
  803170:	10800017 	ldw	r2,0(r2)
  803174:	100170fa 	wrctl	ienable,r2
  803178:	e0bffa17 	ldw	r2,-24(fp)
  80317c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803180:	e0bffb17 	ldw	r2,-20(fp)
  803184:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803188:	0005883a 	mov	r2,zero
  80318c:	e0bff115 	stw	r2,-60(fp)
  803190:	e0bff217 	ldw	r2,-56(fp)
  803194:	e0bffc15 	stw	r2,-16(fp)
  803198:	e0bffc17 	ldw	r2,-16(fp)
  80319c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8031a0:	e0bff117 	ldw	r2,-60(fp)
}
  8031a4:	e037883a 	mov	sp,fp
  8031a8:	df000017 	ldw	fp,0(sp)
  8031ac:	dec00104 	addi	sp,sp,4
  8031b0:	f800283a 	ret

008031b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8031b4:	defffe04 	addi	sp,sp,-8
  8031b8:	dfc00115 	stw	ra,4(sp)
  8031bc:	df000015 	stw	fp,0(sp)
  8031c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8031c4:	00802034 	movhi	r2,128
  8031c8:	109dac04 	addi	r2,r2,30384
  8031cc:	10800017 	ldw	r2,0(r2)
  8031d0:	10000526 	beq	r2,zero,8031e8 <alt_get_errno+0x34>
  8031d4:	00802034 	movhi	r2,128
  8031d8:	109dac04 	addi	r2,r2,30384
  8031dc:	10800017 	ldw	r2,0(r2)
  8031e0:	103ee83a 	callr	r2
  8031e4:	00000206 	br	8031f0 <alt_get_errno+0x3c>
  8031e8:	00802074 	movhi	r2,129
  8031ec:	10a0de04 	addi	r2,r2,-31880
}
  8031f0:	e037883a 	mov	sp,fp
  8031f4:	dfc00117 	ldw	ra,4(sp)
  8031f8:	df000017 	ldw	fp,0(sp)
  8031fc:	dec00204 	addi	sp,sp,8
  803200:	f800283a 	ret

00803204 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803204:	defffd04 	addi	sp,sp,-12
  803208:	df000215 	stw	fp,8(sp)
  80320c:	df000204 	addi	fp,sp,8
  803210:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803214:	e0bfff17 	ldw	r2,-4(fp)
  803218:	10800217 	ldw	r2,8(r2)
  80321c:	10d00034 	orhi	r3,r2,16384
  803220:	e0bfff17 	ldw	r2,-4(fp)
  803224:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803228:	e03ffe15 	stw	zero,-8(fp)
  80322c:	00001d06 	br	8032a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803230:	00802034 	movhi	r2,128
  803234:	109b3b04 	addi	r2,r2,27884
  803238:	e0fffe17 	ldw	r3,-8(fp)
  80323c:	18c00324 	muli	r3,r3,12
  803240:	10c5883a 	add	r2,r2,r3
  803244:	10c00017 	ldw	r3,0(r2)
  803248:	e0bfff17 	ldw	r2,-4(fp)
  80324c:	10800017 	ldw	r2,0(r2)
  803250:	1880111e 	bne	r3,r2,803298 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803254:	00802034 	movhi	r2,128
  803258:	109b3b04 	addi	r2,r2,27884
  80325c:	e0fffe17 	ldw	r3,-8(fp)
  803260:	18c00324 	muli	r3,r3,12
  803264:	18c00204 	addi	r3,r3,8
  803268:	10c5883a 	add	r2,r2,r3
  80326c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803270:	1000090e 	bge	r2,zero,803298 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  803274:	e0bffe17 	ldw	r2,-8(fp)
  803278:	10c00324 	muli	r3,r2,12
  80327c:	00802034 	movhi	r2,128
  803280:	109b3b04 	addi	r2,r2,27884
  803284:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803288:	e0bfff17 	ldw	r2,-4(fp)
  80328c:	18800226 	beq	r3,r2,803298 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  803290:	00bffcc4 	movi	r2,-13
  803294:	00000a06 	br	8032c0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803298:	e0bffe17 	ldw	r2,-8(fp)
  80329c:	10800044 	addi	r2,r2,1
  8032a0:	e0bffe15 	stw	r2,-8(fp)
  8032a4:	00802034 	movhi	r2,128
  8032a8:	109dab04 	addi	r2,r2,30380
  8032ac:	10800017 	ldw	r2,0(r2)
  8032b0:	1007883a 	mov	r3,r2
  8032b4:	e0bffe17 	ldw	r2,-8(fp)
  8032b8:	18bfdd2e 	bgeu	r3,r2,803230 <__alt_data_end+0xff803230>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8032bc:	0005883a 	mov	r2,zero
}
  8032c0:	e037883a 	mov	sp,fp
  8032c4:	df000017 	ldw	fp,0(sp)
  8032c8:	dec00104 	addi	sp,sp,4
  8032cc:	f800283a 	ret

008032d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8032d0:	defff604 	addi	sp,sp,-40
  8032d4:	dfc00915 	stw	ra,36(sp)
  8032d8:	df000815 	stw	fp,32(sp)
  8032dc:	df000804 	addi	fp,sp,32
  8032e0:	e13ffd15 	stw	r4,-12(fp)
  8032e4:	e17ffe15 	stw	r5,-8(fp)
  8032e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8032ec:	00bfffc4 	movi	r2,-1
  8032f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8032f4:	00bffb44 	movi	r2,-19
  8032f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8032fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803300:	e13ffd17 	ldw	r4,-12(fp)
  803304:	01402034 	movhi	r5,128
  803308:	295da904 	addi	r5,r5,30372
  80330c:	0802e0c0 	call	802e0c <alt_find_dev>
  803310:	e0bff815 	stw	r2,-32(fp)
  803314:	e0bff817 	ldw	r2,-32(fp)
  803318:	1000051e 	bne	r2,zero,803330 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80331c:	e13ffd17 	ldw	r4,-12(fp)
  803320:	08037cc0 	call	8037cc <alt_find_file>
  803324:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803328:	00800044 	movi	r2,1
  80332c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803330:	e0bff817 	ldw	r2,-32(fp)
  803334:	10002926 	beq	r2,zero,8033dc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803338:	e13ff817 	ldw	r4,-32(fp)
  80333c:	08038e00 	call	8038e0 <alt_get_fd>
  803340:	e0bff915 	stw	r2,-28(fp)
  803344:	e0bff917 	ldw	r2,-28(fp)
  803348:	1000030e 	bge	r2,zero,803358 <open+0x88>
    {
      status = index;
  80334c:	e0bff917 	ldw	r2,-28(fp)
  803350:	e0bffa15 	stw	r2,-24(fp)
  803354:	00002306 	br	8033e4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  803358:	e0bff917 	ldw	r2,-28(fp)
  80335c:	10c00324 	muli	r3,r2,12
  803360:	00802034 	movhi	r2,128
  803364:	109b3b04 	addi	r2,r2,27884
  803368:	1885883a 	add	r2,r3,r2
  80336c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  803370:	e0fffe17 	ldw	r3,-8(fp)
  803374:	00900034 	movhi	r2,16384
  803378:	10bfffc4 	addi	r2,r2,-1
  80337c:	1886703a 	and	r3,r3,r2
  803380:	e0bffc17 	ldw	r2,-16(fp)
  803384:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  803388:	e0bffb17 	ldw	r2,-20(fp)
  80338c:	1000051e 	bne	r2,zero,8033a4 <open+0xd4>
  803390:	e13ffc17 	ldw	r4,-16(fp)
  803394:	08032040 	call	803204 <alt_file_locked>
  803398:	e0bffa15 	stw	r2,-24(fp)
  80339c:	e0bffa17 	ldw	r2,-24(fp)
  8033a0:	10001016 	blt	r2,zero,8033e4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8033a4:	e0bff817 	ldw	r2,-32(fp)
  8033a8:	10800317 	ldw	r2,12(r2)
  8033ac:	10000826 	beq	r2,zero,8033d0 <open+0x100>
  8033b0:	e0bff817 	ldw	r2,-32(fp)
  8033b4:	10800317 	ldw	r2,12(r2)
  8033b8:	e13ffc17 	ldw	r4,-16(fp)
  8033bc:	e17ffd17 	ldw	r5,-12(fp)
  8033c0:	e1bffe17 	ldw	r6,-8(fp)
  8033c4:	e1ffff17 	ldw	r7,-4(fp)
  8033c8:	103ee83a 	callr	r2
  8033cc:	00000106 	br	8033d4 <open+0x104>
  8033d0:	0005883a 	mov	r2,zero
  8033d4:	e0bffa15 	stw	r2,-24(fp)
  8033d8:	00000206 	br	8033e4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8033dc:	00bffb44 	movi	r2,-19
  8033e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8033e4:	e0bffa17 	ldw	r2,-24(fp)
  8033e8:	1000090e 	bge	r2,zero,803410 <open+0x140>
  {
    alt_release_fd (index);  
  8033ec:	e13ff917 	ldw	r4,-28(fp)
  8033f0:	08034280 	call	803428 <alt_release_fd>
    ALT_ERRNO = -status;
  8033f4:	08031b40 	call	8031b4 <alt_get_errno>
  8033f8:	1007883a 	mov	r3,r2
  8033fc:	e0bffa17 	ldw	r2,-24(fp)
  803400:	0085c83a 	sub	r2,zero,r2
  803404:	18800015 	stw	r2,0(r3)
    return -1;
  803408:	00bfffc4 	movi	r2,-1
  80340c:	00000106 	br	803414 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  803410:	e0bff917 	ldw	r2,-28(fp)
}
  803414:	e037883a 	mov	sp,fp
  803418:	dfc00117 	ldw	ra,4(sp)
  80341c:	df000017 	ldw	fp,0(sp)
  803420:	dec00204 	addi	sp,sp,8
  803424:	f800283a 	ret

00803428 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803428:	defffe04 	addi	sp,sp,-8
  80342c:	df000115 	stw	fp,4(sp)
  803430:	df000104 	addi	fp,sp,4
  803434:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803438:	e0bfff17 	ldw	r2,-4(fp)
  80343c:	108000d0 	cmplti	r2,r2,3
  803440:	10000d1e 	bne	r2,zero,803478 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803444:	00802034 	movhi	r2,128
  803448:	109b3b04 	addi	r2,r2,27884
  80344c:	e0ffff17 	ldw	r3,-4(fp)
  803450:	18c00324 	muli	r3,r3,12
  803454:	18c00204 	addi	r3,r3,8
  803458:	10c5883a 	add	r2,r2,r3
  80345c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803460:	00802034 	movhi	r2,128
  803464:	109b3b04 	addi	r2,r2,27884
  803468:	e0ffff17 	ldw	r3,-4(fp)
  80346c:	18c00324 	muli	r3,r3,12
  803470:	10c5883a 	add	r2,r2,r3
  803474:	10000015 	stw	zero,0(r2)
  }
}
  803478:	e037883a 	mov	sp,fp
  80347c:	df000017 	ldw	fp,0(sp)
  803480:	dec00104 	addi	sp,sp,4
  803484:	f800283a 	ret

00803488 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  803488:	defffa04 	addi	sp,sp,-24
  80348c:	df000515 	stw	fp,20(sp)
  803490:	df000504 	addi	fp,sp,20
  803494:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803498:	0005303a 	rdctl	r2,status
  80349c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8034a0:	e0fffc17 	ldw	r3,-16(fp)
  8034a4:	00bfff84 	movi	r2,-2
  8034a8:	1884703a 	and	r2,r3,r2
  8034ac:	1001703a 	wrctl	status,r2
  
  return context;
  8034b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8034b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8034b8:	e0bfff17 	ldw	r2,-4(fp)
  8034bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8034c0:	e0bffd17 	ldw	r2,-12(fp)
  8034c4:	10800017 	ldw	r2,0(r2)
  8034c8:	e0fffd17 	ldw	r3,-12(fp)
  8034cc:	18c00117 	ldw	r3,4(r3)
  8034d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8034d4:	e0bffd17 	ldw	r2,-12(fp)
  8034d8:	10800117 	ldw	r2,4(r2)
  8034dc:	e0fffd17 	ldw	r3,-12(fp)
  8034e0:	18c00017 	ldw	r3,0(r3)
  8034e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8034e8:	e0bffd17 	ldw	r2,-12(fp)
  8034ec:	e0fffd17 	ldw	r3,-12(fp)
  8034f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8034f4:	e0bffd17 	ldw	r2,-12(fp)
  8034f8:	e0fffd17 	ldw	r3,-12(fp)
  8034fc:	10c00015 	stw	r3,0(r2)
  803500:	e0bffb17 	ldw	r2,-20(fp)
  803504:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803508:	e0bffe17 	ldw	r2,-8(fp)
  80350c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803510:	e037883a 	mov	sp,fp
  803514:	df000017 	ldw	fp,0(sp)
  803518:	dec00104 	addi	sp,sp,4
  80351c:	f800283a 	ret

00803520 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803520:	defffb04 	addi	sp,sp,-20
  803524:	dfc00415 	stw	ra,16(sp)
  803528:	df000315 	stw	fp,12(sp)
  80352c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803530:	d0a00817 	ldw	r2,-32736(gp)
  803534:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803538:	d0a33617 	ldw	r2,-29480(gp)
  80353c:	10800044 	addi	r2,r2,1
  803540:	d0a33615 	stw	r2,-29480(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803544:	00002e06 	br	803600 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  803548:	e0bffd17 	ldw	r2,-12(fp)
  80354c:	10800017 	ldw	r2,0(r2)
  803550:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803554:	e0bffd17 	ldw	r2,-12(fp)
  803558:	10800403 	ldbu	r2,16(r2)
  80355c:	10803fcc 	andi	r2,r2,255
  803560:	10000426 	beq	r2,zero,803574 <alt_tick+0x54>
  803564:	d0a33617 	ldw	r2,-29480(gp)
  803568:	1000021e 	bne	r2,zero,803574 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80356c:	e0bffd17 	ldw	r2,-12(fp)
  803570:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803574:	e0bffd17 	ldw	r2,-12(fp)
  803578:	10800217 	ldw	r2,8(r2)
  80357c:	d0e33617 	ldw	r3,-29480(gp)
  803580:	18801d36 	bltu	r3,r2,8035f8 <alt_tick+0xd8>
  803584:	e0bffd17 	ldw	r2,-12(fp)
  803588:	10800403 	ldbu	r2,16(r2)
  80358c:	10803fcc 	andi	r2,r2,255
  803590:	1000191e 	bne	r2,zero,8035f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  803594:	e0bffd17 	ldw	r2,-12(fp)
  803598:	10800317 	ldw	r2,12(r2)
  80359c:	e0fffd17 	ldw	r3,-12(fp)
  8035a0:	18c00517 	ldw	r3,20(r3)
  8035a4:	1809883a 	mov	r4,r3
  8035a8:	103ee83a 	callr	r2
  8035ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8035b0:	e0bfff17 	ldw	r2,-4(fp)
  8035b4:	1000031e 	bne	r2,zero,8035c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8035b8:	e13ffd17 	ldw	r4,-12(fp)
  8035bc:	08034880 	call	803488 <alt_alarm_stop>
  8035c0:	00000d06 	br	8035f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8035c4:	e0bffd17 	ldw	r2,-12(fp)
  8035c8:	10c00217 	ldw	r3,8(r2)
  8035cc:	e0bfff17 	ldw	r2,-4(fp)
  8035d0:	1887883a 	add	r3,r3,r2
  8035d4:	e0bffd17 	ldw	r2,-12(fp)
  8035d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8035dc:	e0bffd17 	ldw	r2,-12(fp)
  8035e0:	10c00217 	ldw	r3,8(r2)
  8035e4:	d0a33617 	ldw	r2,-29480(gp)
  8035e8:	1880032e 	bgeu	r3,r2,8035f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8035ec:	e0bffd17 	ldw	r2,-12(fp)
  8035f0:	00c00044 	movi	r3,1
  8035f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8035f8:	e0bffe17 	ldw	r2,-8(fp)
  8035fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803600:	e0fffd17 	ldw	r3,-12(fp)
  803604:	d0a00804 	addi	r2,gp,-32736
  803608:	18bfcf1e 	bne	r3,r2,803548 <__alt_data_end+0xff803548>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80360c:	0001883a 	nop
}
  803610:	e037883a 	mov	sp,fp
  803614:	dfc00117 	ldw	ra,4(sp)
  803618:	df000017 	ldw	fp,0(sp)
  80361c:	dec00204 	addi	sp,sp,8
  803620:	f800283a 	ret

00803624 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803624:	defffd04 	addi	sp,sp,-12
  803628:	dfc00215 	stw	ra,8(sp)
  80362c:	df000115 	stw	fp,4(sp)
  803630:	df000104 	addi	fp,sp,4
  803634:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803638:	e13fff17 	ldw	r4,-4(fp)
  80363c:	08036740 	call	803674 <alt_busy_sleep>
}
  803640:	e037883a 	mov	sp,fp
  803644:	dfc00117 	ldw	ra,4(sp)
  803648:	df000017 	ldw	fp,0(sp)
  80364c:	dec00204 	addi	sp,sp,8
  803650:	f800283a 	ret

00803654 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803654:	deffff04 	addi	sp,sp,-4
  803658:	df000015 	stw	fp,0(sp)
  80365c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803660:	000170fa 	wrctl	ienable,zero
}
  803664:	e037883a 	mov	sp,fp
  803668:	df000017 	ldw	fp,0(sp)
  80366c:	dec00104 	addi	sp,sp,4
  803670:	f800283a 	ret

00803674 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803674:	defffa04 	addi	sp,sp,-24
  803678:	dfc00515 	stw	ra,20(sp)
  80367c:	df000415 	stw	fp,16(sp)
  803680:	df000404 	addi	fp,sp,16
  803684:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  803688:	008000c4 	movi	r2,3
  80368c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  803690:	e0fffd17 	ldw	r3,-12(fp)
  803694:	008003f4 	movhi	r2,15
  803698:	10909004 	addi	r2,r2,16960
  80369c:	1885383a 	mul	r2,r3,r2
  8036a0:	0100bef4 	movhi	r4,763
  8036a4:	213c2004 	addi	r4,r4,-3968
  8036a8:	100b883a 	mov	r5,r2
  8036ac:	08060280 	call	806028 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8036b0:	01200034 	movhi	r4,32768
  8036b4:	213fffc4 	addi	r4,r4,-1
  8036b8:	100b883a 	mov	r5,r2
  8036bc:	08060280 	call	806028 <__udivsi3>
  8036c0:	e13fff17 	ldw	r4,-4(fp)
  8036c4:	100b883a 	mov	r5,r2
  8036c8:	08060280 	call	806028 <__udivsi3>
  8036cc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8036d0:	e0bffe17 	ldw	r2,-8(fp)
  8036d4:	10002a26 	beq	r2,zero,803780 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8036d8:	e03ffc15 	stw	zero,-16(fp)
  8036dc:	00001706 	br	80373c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8036e0:	00a00034 	movhi	r2,32768
  8036e4:	10bfffc4 	addi	r2,r2,-1
  8036e8:	10bfffc4 	addi	r2,r2,-1
  8036ec:	103ffe1e 	bne	r2,zero,8036e8 <__alt_data_end+0xff8036e8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8036f0:	e0fffd17 	ldw	r3,-12(fp)
  8036f4:	008003f4 	movhi	r2,15
  8036f8:	10909004 	addi	r2,r2,16960
  8036fc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803700:	0100bef4 	movhi	r4,763
  803704:	213c2004 	addi	r4,r4,-3968
  803708:	100b883a 	mov	r5,r2
  80370c:	08060280 	call	806028 <__udivsi3>
  803710:	01200034 	movhi	r4,32768
  803714:	213fffc4 	addi	r4,r4,-1
  803718:	100b883a 	mov	r5,r2
  80371c:	08060280 	call	806028 <__udivsi3>
  803720:	1007883a 	mov	r3,r2
  803724:	e0bfff17 	ldw	r2,-4(fp)
  803728:	10c5c83a 	sub	r2,r2,r3
  80372c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	10800044 	addi	r2,r2,1
  803738:	e0bffc15 	stw	r2,-16(fp)
  80373c:	e0fffc17 	ldw	r3,-16(fp)
  803740:	e0bffe17 	ldw	r2,-8(fp)
  803744:	18bfe616 	blt	r3,r2,8036e0 <__alt_data_end+0xff8036e0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803748:	e0fffd17 	ldw	r3,-12(fp)
  80374c:	008003f4 	movhi	r2,15
  803750:	10909004 	addi	r2,r2,16960
  803754:	1885383a 	mul	r2,r3,r2
  803758:	0100bef4 	movhi	r4,763
  80375c:	213c2004 	addi	r4,r4,-3968
  803760:	100b883a 	mov	r5,r2
  803764:	08060280 	call	806028 <__udivsi3>
  803768:	1007883a 	mov	r3,r2
  80376c:	e0bfff17 	ldw	r2,-4(fp)
  803770:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803774:	10bfffc4 	addi	r2,r2,-1
  803778:	103ffe1e 	bne	r2,zero,803774 <__alt_data_end+0xff803774>
  80377c:	00000d06 	br	8037b4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803780:	e0fffd17 	ldw	r3,-12(fp)
  803784:	008003f4 	movhi	r2,15
  803788:	10909004 	addi	r2,r2,16960
  80378c:	1885383a 	mul	r2,r3,r2
  803790:	0100bef4 	movhi	r4,763
  803794:	213c2004 	addi	r4,r4,-3968
  803798:	100b883a 	mov	r5,r2
  80379c:	08060280 	call	806028 <__udivsi3>
  8037a0:	1007883a 	mov	r3,r2
  8037a4:	e0bfff17 	ldw	r2,-4(fp)
  8037a8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8037ac:	10bfffc4 	addi	r2,r2,-1
  8037b0:	00bffe16 	blt	zero,r2,8037ac <__alt_data_end+0xff8037ac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8037b4:	0005883a 	mov	r2,zero
}
  8037b8:	e037883a 	mov	sp,fp
  8037bc:	dfc00117 	ldw	ra,4(sp)
  8037c0:	df000017 	ldw	fp,0(sp)
  8037c4:	dec00204 	addi	sp,sp,8
  8037c8:	f800283a 	ret

008037cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8037cc:	defffb04 	addi	sp,sp,-20
  8037d0:	dfc00415 	stw	ra,16(sp)
  8037d4:	df000315 	stw	fp,12(sp)
  8037d8:	df000304 	addi	fp,sp,12
  8037dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8037e0:	00802034 	movhi	r2,128
  8037e4:	109da704 	addi	r2,r2,30364
  8037e8:	10800017 	ldw	r2,0(r2)
  8037ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8037f0:	00003106 	br	8038b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  8037f4:	e0bffd17 	ldw	r2,-12(fp)
  8037f8:	10800217 	ldw	r2,8(r2)
  8037fc:	1009883a 	mov	r4,r2
  803800:	0803f4c0 	call	803f4c <strlen>
  803804:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  803808:	e0bffd17 	ldw	r2,-12(fp)
  80380c:	10c00217 	ldw	r3,8(r2)
  803810:	e0bffe17 	ldw	r2,-8(fp)
  803814:	10bfffc4 	addi	r2,r2,-1
  803818:	1885883a 	add	r2,r3,r2
  80381c:	10800003 	ldbu	r2,0(r2)
  803820:	10803fcc 	andi	r2,r2,255
  803824:	1080201c 	xori	r2,r2,128
  803828:	10bfe004 	addi	r2,r2,-128
  80382c:	10800bd8 	cmpnei	r2,r2,47
  803830:	1000031e 	bne	r2,zero,803840 <alt_find_file+0x74>
    {
      len -= 1;
  803834:	e0bffe17 	ldw	r2,-8(fp)
  803838:	10bfffc4 	addi	r2,r2,-1
  80383c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803840:	e0bffe17 	ldw	r2,-8(fp)
  803844:	e0ffff17 	ldw	r3,-4(fp)
  803848:	1885883a 	add	r2,r3,r2
  80384c:	10800003 	ldbu	r2,0(r2)
  803850:	10803fcc 	andi	r2,r2,255
  803854:	1080201c 	xori	r2,r2,128
  803858:	10bfe004 	addi	r2,r2,-128
  80385c:	10800be0 	cmpeqi	r2,r2,47
  803860:	1000081e 	bne	r2,zero,803884 <alt_find_file+0xb8>
  803864:	e0bffe17 	ldw	r2,-8(fp)
  803868:	e0ffff17 	ldw	r3,-4(fp)
  80386c:	1885883a 	add	r2,r3,r2
  803870:	10800003 	ldbu	r2,0(r2)
  803874:	10803fcc 	andi	r2,r2,255
  803878:	1080201c 	xori	r2,r2,128
  80387c:	10bfe004 	addi	r2,r2,-128
  803880:	10000a1e 	bne	r2,zero,8038ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  803884:	e0bffd17 	ldw	r2,-12(fp)
  803888:	10c00217 	ldw	r3,8(r2)
  80388c:	e0bffe17 	ldw	r2,-8(fp)
  803890:	1809883a 	mov	r4,r3
  803894:	e17fff17 	ldw	r5,-4(fp)
  803898:	100d883a 	mov	r6,r2
  80389c:	0803b080 	call	803b08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8038a0:	1000021e 	bne	r2,zero,8038ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8038a4:	e0bffd17 	ldw	r2,-12(fp)
  8038a8:	00000806 	br	8038cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  8038ac:	e0bffd17 	ldw	r2,-12(fp)
  8038b0:	10800017 	ldw	r2,0(r2)
  8038b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8038b8:	e0fffd17 	ldw	r3,-12(fp)
  8038bc:	00802034 	movhi	r2,128
  8038c0:	109da704 	addi	r2,r2,30364
  8038c4:	18bfcb1e 	bne	r3,r2,8037f4 <__alt_data_end+0xff8037f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8038c8:	0005883a 	mov	r2,zero
}
  8038cc:	e037883a 	mov	sp,fp
  8038d0:	dfc00117 	ldw	ra,4(sp)
  8038d4:	df000017 	ldw	fp,0(sp)
  8038d8:	dec00204 	addi	sp,sp,8
  8038dc:	f800283a 	ret

008038e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8038e0:	defffc04 	addi	sp,sp,-16
  8038e4:	df000315 	stw	fp,12(sp)
  8038e8:	df000304 	addi	fp,sp,12
  8038ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8038f0:	00bffa04 	movi	r2,-24
  8038f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8038f8:	e03ffd15 	stw	zero,-12(fp)
  8038fc:	00001d06 	br	803974 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  803900:	00802034 	movhi	r2,128
  803904:	109b3b04 	addi	r2,r2,27884
  803908:	e0fffd17 	ldw	r3,-12(fp)
  80390c:	18c00324 	muli	r3,r3,12
  803910:	10c5883a 	add	r2,r2,r3
  803914:	10800017 	ldw	r2,0(r2)
  803918:	1000131e 	bne	r2,zero,803968 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  80391c:	00802034 	movhi	r2,128
  803920:	109b3b04 	addi	r2,r2,27884
  803924:	e0fffd17 	ldw	r3,-12(fp)
  803928:	18c00324 	muli	r3,r3,12
  80392c:	10c5883a 	add	r2,r2,r3
  803930:	e0ffff17 	ldw	r3,-4(fp)
  803934:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  803938:	00802034 	movhi	r2,128
  80393c:	109dab04 	addi	r2,r2,30380
  803940:	10c00017 	ldw	r3,0(r2)
  803944:	e0bffd17 	ldw	r2,-12(fp)
  803948:	1880040e 	bge	r3,r2,80395c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  80394c:	00802034 	movhi	r2,128
  803950:	109dab04 	addi	r2,r2,30380
  803954:	e0fffd17 	ldw	r3,-12(fp)
  803958:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  80395c:	e0bffd17 	ldw	r2,-12(fp)
  803960:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  803964:	00000606 	br	803980 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803968:	e0bffd17 	ldw	r2,-12(fp)
  80396c:	10800044 	addi	r2,r2,1
  803970:	e0bffd15 	stw	r2,-12(fp)
  803974:	e0bffd17 	ldw	r2,-12(fp)
  803978:	10800810 	cmplti	r2,r2,32
  80397c:	103fe01e 	bne	r2,zero,803900 <__alt_data_end+0xff803900>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803980:	e0bffe17 	ldw	r2,-8(fp)
}
  803984:	e037883a 	mov	sp,fp
  803988:	df000017 	ldw	fp,0(sp)
  80398c:	dec00104 	addi	sp,sp,4
  803990:	f800283a 	ret

00803994 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803994:	defffb04 	addi	sp,sp,-20
  803998:	df000415 	stw	fp,16(sp)
  80399c:	df000404 	addi	fp,sp,16
  8039a0:	e13ffe15 	stw	r4,-8(fp)
  8039a4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8039a8:	e0bfff17 	ldw	r2,-4(fp)
  8039ac:	10840070 	cmpltui	r2,r2,4097
  8039b0:	1000021e 	bne	r2,zero,8039bc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8039b4:	00840004 	movi	r2,4096
  8039b8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8039bc:	e0fffe17 	ldw	r3,-8(fp)
  8039c0:	e0bfff17 	ldw	r2,-4(fp)
  8039c4:	1885883a 	add	r2,r3,r2
  8039c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8039cc:	e0bffe17 	ldw	r2,-8(fp)
  8039d0:	e0bffc15 	stw	r2,-16(fp)
  8039d4:	00000506 	br	8039ec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8039d8:	e0bffc17 	ldw	r2,-16(fp)
  8039dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8039e0:	e0bffc17 	ldw	r2,-16(fp)
  8039e4:	10800804 	addi	r2,r2,32
  8039e8:	e0bffc15 	stw	r2,-16(fp)
  8039ec:	e0fffc17 	ldw	r3,-16(fp)
  8039f0:	e0bffd17 	ldw	r2,-12(fp)
  8039f4:	18bff836 	bltu	r3,r2,8039d8 <__alt_data_end+0xff8039d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8039f8:	e0bffe17 	ldw	r2,-8(fp)
  8039fc:	108007cc 	andi	r2,r2,31
  803a00:	10000226 	beq	r2,zero,803a0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  803a04:	e0bffc17 	ldw	r2,-16(fp)
  803a08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  803a0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  803a10:	e037883a 	mov	sp,fp
  803a14:	df000017 	ldw	fp,0(sp)
  803a18:	dec00104 	addi	sp,sp,4
  803a1c:	f800283a 	ret

00803a20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803a20:	defffe04 	addi	sp,sp,-8
  803a24:	df000115 	stw	fp,4(sp)
  803a28:	df000104 	addi	fp,sp,4
  803a2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803a30:	e0bfff17 	ldw	r2,-4(fp)
  803a34:	10bffe84 	addi	r2,r2,-6
  803a38:	10c00428 	cmpgeui	r3,r2,16
  803a3c:	18001a1e 	bne	r3,zero,803aa8 <alt_exception_cause_generated_bad_addr+0x88>
  803a40:	100690ba 	slli	r3,r2,2
  803a44:	00802034 	movhi	r2,128
  803a48:	108e9604 	addi	r2,r2,14936
  803a4c:	1885883a 	add	r2,r3,r2
  803a50:	10800017 	ldw	r2,0(r2)
  803a54:	1000683a 	jmp	r2
  803a58:	00803a98 	cmpnei	r2,zero,234
  803a5c:	00803a98 	cmpnei	r2,zero,234
  803a60:	00803aa8 	cmpgeui	r2,zero,234
  803a64:	00803aa8 	cmpgeui	r2,zero,234
  803a68:	00803aa8 	cmpgeui	r2,zero,234
  803a6c:	00803a98 	cmpnei	r2,zero,234
  803a70:	00803aa0 	cmpeqi	r2,zero,234
  803a74:	00803aa8 	cmpgeui	r2,zero,234
  803a78:	00803a98 	cmpnei	r2,zero,234
  803a7c:	00803a98 	cmpnei	r2,zero,234
  803a80:	00803aa8 	cmpgeui	r2,zero,234
  803a84:	00803a98 	cmpnei	r2,zero,234
  803a88:	00803aa0 	cmpeqi	r2,zero,234
  803a8c:	00803aa8 	cmpgeui	r2,zero,234
  803a90:	00803aa8 	cmpgeui	r2,zero,234
  803a94:	00803a98 	cmpnei	r2,zero,234
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803a98:	00800044 	movi	r2,1
  803a9c:	00000306 	br	803aac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803aa0:	0005883a 	mov	r2,zero
  803aa4:	00000106 	br	803aac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803aa8:	0005883a 	mov	r2,zero
  }
}
  803aac:	e037883a 	mov	sp,fp
  803ab0:	df000017 	ldw	fp,0(sp)
  803ab4:	dec00104 	addi	sp,sp,4
  803ab8:	f800283a 	ret

00803abc <atexit>:
  803abc:	200b883a 	mov	r5,r4
  803ac0:	000d883a 	mov	r6,zero
  803ac4:	0009883a 	mov	r4,zero
  803ac8:	000f883a 	mov	r7,zero
  803acc:	080428c1 	jmpi	80428c <__register_exitproc>

00803ad0 <exit>:
  803ad0:	defffe04 	addi	sp,sp,-8
  803ad4:	000b883a 	mov	r5,zero
  803ad8:	dc000015 	stw	r16,0(sp)
  803adc:	dfc00115 	stw	ra,4(sp)
  803ae0:	2021883a 	mov	r16,r4
  803ae4:	08043a00 	call	8043a0 <__call_exitprocs>
  803ae8:	00802034 	movhi	r2,128
  803aec:	109db104 	addi	r2,r2,30404
  803af0:	11000017 	ldw	r4,0(r2)
  803af4:	20800f17 	ldw	r2,60(r4)
  803af8:	10000126 	beq	r2,zero,803b00 <exit+0x30>
  803afc:	103ee83a 	callr	r2
  803b00:	8009883a 	mov	r4,r16
  803b04:	08060380 	call	806038 <_exit>

00803b08 <memcmp>:
  803b08:	01c000c4 	movi	r7,3
  803b0c:	3980192e 	bgeu	r7,r6,803b74 <memcmp+0x6c>
  803b10:	2144b03a 	or	r2,r4,r5
  803b14:	11c4703a 	and	r2,r2,r7
  803b18:	10000f26 	beq	r2,zero,803b58 <memcmp+0x50>
  803b1c:	20800003 	ldbu	r2,0(r4)
  803b20:	28c00003 	ldbu	r3,0(r5)
  803b24:	10c0151e 	bne	r2,r3,803b7c <memcmp+0x74>
  803b28:	31bfff84 	addi	r6,r6,-2
  803b2c:	01ffffc4 	movi	r7,-1
  803b30:	00000406 	br	803b44 <memcmp+0x3c>
  803b34:	20800003 	ldbu	r2,0(r4)
  803b38:	28c00003 	ldbu	r3,0(r5)
  803b3c:	31bfffc4 	addi	r6,r6,-1
  803b40:	10c00e1e 	bne	r2,r3,803b7c <memcmp+0x74>
  803b44:	21000044 	addi	r4,r4,1
  803b48:	29400044 	addi	r5,r5,1
  803b4c:	31fff91e 	bne	r6,r7,803b34 <__alt_data_end+0xff803b34>
  803b50:	0005883a 	mov	r2,zero
  803b54:	f800283a 	ret
  803b58:	20c00017 	ldw	r3,0(r4)
  803b5c:	28800017 	ldw	r2,0(r5)
  803b60:	1880041e 	bne	r3,r2,803b74 <memcmp+0x6c>
  803b64:	31bfff04 	addi	r6,r6,-4
  803b68:	21000104 	addi	r4,r4,4
  803b6c:	29400104 	addi	r5,r5,4
  803b70:	39bff936 	bltu	r7,r6,803b58 <__alt_data_end+0xff803b58>
  803b74:	303fe91e 	bne	r6,zero,803b1c <__alt_data_end+0xff803b1c>
  803b78:	003ff506 	br	803b50 <__alt_data_end+0xff803b50>
  803b7c:	10c5c83a 	sub	r2,r2,r3
  803b80:	f800283a 	ret

00803b84 <memcpy>:
  803b84:	deffff04 	addi	sp,sp,-4
  803b88:	dc000015 	stw	r16,0(sp)
  803b8c:	00c003c4 	movi	r3,15
  803b90:	2005883a 	mov	r2,r4
  803b94:	1980432e 	bgeu	r3,r6,803ca4 <memcpy+0x120>
  803b98:	2146b03a 	or	r3,r4,r5
  803b9c:	18c000cc 	andi	r3,r3,3
  803ba0:	1800421e 	bne	r3,zero,803cac <memcpy+0x128>
  803ba4:	343ffc04 	addi	r16,r6,-16
  803ba8:	8020d13a 	srli	r16,r16,4
  803bac:	28c00104 	addi	r3,r5,4
  803bb0:	23400104 	addi	r13,r4,4
  803bb4:	801e913a 	slli	r15,r16,4
  803bb8:	2b000204 	addi	r12,r5,8
  803bbc:	22c00204 	addi	r11,r4,8
  803bc0:	7bc00504 	addi	r15,r15,20
  803bc4:	2a800304 	addi	r10,r5,12
  803bc8:	22400304 	addi	r9,r4,12
  803bcc:	2bdf883a 	add	r15,r5,r15
  803bd0:	2811883a 	mov	r8,r5
  803bd4:	200f883a 	mov	r7,r4
  803bd8:	41000017 	ldw	r4,0(r8)
  803bdc:	39c00404 	addi	r7,r7,16
  803be0:	18c00404 	addi	r3,r3,16
  803be4:	393ffc15 	stw	r4,-16(r7)
  803be8:	1bbffc17 	ldw	r14,-16(r3)
  803bec:	6b400404 	addi	r13,r13,16
  803bf0:	5ac00404 	addi	r11,r11,16
  803bf4:	6bbffc15 	stw	r14,-16(r13)
  803bf8:	63800017 	ldw	r14,0(r12)
  803bfc:	4a400404 	addi	r9,r9,16
  803c00:	42000404 	addi	r8,r8,16
  803c04:	5bbffc15 	stw	r14,-16(r11)
  803c08:	53800017 	ldw	r14,0(r10)
  803c0c:	63000404 	addi	r12,r12,16
  803c10:	52800404 	addi	r10,r10,16
  803c14:	4bbffc15 	stw	r14,-16(r9)
  803c18:	1bffef1e 	bne	r3,r15,803bd8 <__alt_data_end+0xff803bd8>
  803c1c:	81c00044 	addi	r7,r16,1
  803c20:	380e913a 	slli	r7,r7,4
  803c24:	310003cc 	andi	r4,r6,15
  803c28:	02c000c4 	movi	r11,3
  803c2c:	11c7883a 	add	r3,r2,r7
  803c30:	29cb883a 	add	r5,r5,r7
  803c34:	59001f2e 	bgeu	r11,r4,803cb4 <memcpy+0x130>
  803c38:	1813883a 	mov	r9,r3
  803c3c:	2811883a 	mov	r8,r5
  803c40:	200f883a 	mov	r7,r4
  803c44:	42800017 	ldw	r10,0(r8)
  803c48:	4a400104 	addi	r9,r9,4
  803c4c:	39ffff04 	addi	r7,r7,-4
  803c50:	4abfff15 	stw	r10,-4(r9)
  803c54:	42000104 	addi	r8,r8,4
  803c58:	59fffa36 	bltu	r11,r7,803c44 <__alt_data_end+0xff803c44>
  803c5c:	213fff04 	addi	r4,r4,-4
  803c60:	2008d0ba 	srli	r4,r4,2
  803c64:	318000cc 	andi	r6,r6,3
  803c68:	21000044 	addi	r4,r4,1
  803c6c:	2109883a 	add	r4,r4,r4
  803c70:	2109883a 	add	r4,r4,r4
  803c74:	1907883a 	add	r3,r3,r4
  803c78:	290b883a 	add	r5,r5,r4
  803c7c:	30000626 	beq	r6,zero,803c98 <memcpy+0x114>
  803c80:	198d883a 	add	r6,r3,r6
  803c84:	29c00003 	ldbu	r7,0(r5)
  803c88:	18c00044 	addi	r3,r3,1
  803c8c:	29400044 	addi	r5,r5,1
  803c90:	19ffffc5 	stb	r7,-1(r3)
  803c94:	19bffb1e 	bne	r3,r6,803c84 <__alt_data_end+0xff803c84>
  803c98:	dc000017 	ldw	r16,0(sp)
  803c9c:	dec00104 	addi	sp,sp,4
  803ca0:	f800283a 	ret
  803ca4:	2007883a 	mov	r3,r4
  803ca8:	003ff406 	br	803c7c <__alt_data_end+0xff803c7c>
  803cac:	2007883a 	mov	r3,r4
  803cb0:	003ff306 	br	803c80 <__alt_data_end+0xff803c80>
  803cb4:	200d883a 	mov	r6,r4
  803cb8:	003ff006 	br	803c7c <__alt_data_end+0xff803c7c>

00803cbc <memset>:
  803cbc:	20c000cc 	andi	r3,r4,3
  803cc0:	2005883a 	mov	r2,r4
  803cc4:	18004326 	beq	r3,zero,803dd4 <memset+0x118>
  803cc8:	31ffffc4 	addi	r7,r6,-1
  803ccc:	30004026 	beq	r6,zero,803dd0 <memset+0x114>
  803cd0:	2813883a 	mov	r9,r5
  803cd4:	200d883a 	mov	r6,r4
  803cd8:	2007883a 	mov	r3,r4
  803cdc:	00000406 	br	803cf0 <memset+0x34>
  803ce0:	3a3fffc4 	addi	r8,r7,-1
  803ce4:	31800044 	addi	r6,r6,1
  803ce8:	38003926 	beq	r7,zero,803dd0 <memset+0x114>
  803cec:	400f883a 	mov	r7,r8
  803cf0:	18c00044 	addi	r3,r3,1
  803cf4:	32400005 	stb	r9,0(r6)
  803cf8:	1a0000cc 	andi	r8,r3,3
  803cfc:	403ff81e 	bne	r8,zero,803ce0 <__alt_data_end+0xff803ce0>
  803d00:	010000c4 	movi	r4,3
  803d04:	21c02d2e 	bgeu	r4,r7,803dbc <memset+0x100>
  803d08:	29803fcc 	andi	r6,r5,255
  803d0c:	3008923a 	slli	r4,r6,8
  803d10:	218cb03a 	or	r6,r4,r6
  803d14:	3008943a 	slli	r4,r6,16
  803d18:	218cb03a 	or	r6,r4,r6
  803d1c:	010003c4 	movi	r4,15
  803d20:	21c0182e 	bgeu	r4,r7,803d84 <memset+0xc8>
  803d24:	3b3ffc04 	addi	r12,r7,-16
  803d28:	6018d13a 	srli	r12,r12,4
  803d2c:	1a000104 	addi	r8,r3,4
  803d30:	1ac00204 	addi	r11,r3,8
  803d34:	6008913a 	slli	r4,r12,4
  803d38:	1a800304 	addi	r10,r3,12
  803d3c:	1813883a 	mov	r9,r3
  803d40:	21000504 	addi	r4,r4,20
  803d44:	1909883a 	add	r4,r3,r4
  803d48:	49800015 	stw	r6,0(r9)
  803d4c:	41800015 	stw	r6,0(r8)
  803d50:	59800015 	stw	r6,0(r11)
  803d54:	51800015 	stw	r6,0(r10)
  803d58:	42000404 	addi	r8,r8,16
  803d5c:	4a400404 	addi	r9,r9,16
  803d60:	5ac00404 	addi	r11,r11,16
  803d64:	52800404 	addi	r10,r10,16
  803d68:	413ff71e 	bne	r8,r4,803d48 <__alt_data_end+0xff803d48>
  803d6c:	63000044 	addi	r12,r12,1
  803d70:	6018913a 	slli	r12,r12,4
  803d74:	39c003cc 	andi	r7,r7,15
  803d78:	010000c4 	movi	r4,3
  803d7c:	1b07883a 	add	r3,r3,r12
  803d80:	21c00e2e 	bgeu	r4,r7,803dbc <memset+0x100>
  803d84:	1813883a 	mov	r9,r3
  803d88:	3811883a 	mov	r8,r7
  803d8c:	010000c4 	movi	r4,3
  803d90:	49800015 	stw	r6,0(r9)
  803d94:	423fff04 	addi	r8,r8,-4
  803d98:	4a400104 	addi	r9,r9,4
  803d9c:	223ffc36 	bltu	r4,r8,803d90 <__alt_data_end+0xff803d90>
  803da0:	393fff04 	addi	r4,r7,-4
  803da4:	2008d0ba 	srli	r4,r4,2
  803da8:	39c000cc 	andi	r7,r7,3
  803dac:	21000044 	addi	r4,r4,1
  803db0:	2109883a 	add	r4,r4,r4
  803db4:	2109883a 	add	r4,r4,r4
  803db8:	1907883a 	add	r3,r3,r4
  803dbc:	38000426 	beq	r7,zero,803dd0 <memset+0x114>
  803dc0:	19cf883a 	add	r7,r3,r7
  803dc4:	19400005 	stb	r5,0(r3)
  803dc8:	18c00044 	addi	r3,r3,1
  803dcc:	19fffd1e 	bne	r3,r7,803dc4 <__alt_data_end+0xff803dc4>
  803dd0:	f800283a 	ret
  803dd4:	2007883a 	mov	r3,r4
  803dd8:	300f883a 	mov	r7,r6
  803ddc:	003fc806 	br	803d00 <__alt_data_end+0xff803d00>

00803de0 <_putc_r>:
  803de0:	defffc04 	addi	sp,sp,-16
  803de4:	dc000215 	stw	r16,8(sp)
  803de8:	dfc00315 	stw	ra,12(sp)
  803dec:	2021883a 	mov	r16,r4
  803df0:	20000226 	beq	r4,zero,803dfc <_putc_r+0x1c>
  803df4:	20800e17 	ldw	r2,56(r4)
  803df8:	10001b26 	beq	r2,zero,803e68 <_putc_r+0x88>
  803dfc:	30800217 	ldw	r2,8(r6)
  803e00:	10bfffc4 	addi	r2,r2,-1
  803e04:	30800215 	stw	r2,8(r6)
  803e08:	10000a16 	blt	r2,zero,803e34 <_putc_r+0x54>
  803e0c:	30800017 	ldw	r2,0(r6)
  803e10:	11400005 	stb	r5,0(r2)
  803e14:	30800017 	ldw	r2,0(r6)
  803e18:	10c00044 	addi	r3,r2,1
  803e1c:	30c00015 	stw	r3,0(r6)
  803e20:	10800003 	ldbu	r2,0(r2)
  803e24:	dfc00317 	ldw	ra,12(sp)
  803e28:	dc000217 	ldw	r16,8(sp)
  803e2c:	dec00404 	addi	sp,sp,16
  803e30:	f800283a 	ret
  803e34:	30c00617 	ldw	r3,24(r6)
  803e38:	10c00616 	blt	r2,r3,803e54 <_putc_r+0x74>
  803e3c:	30800017 	ldw	r2,0(r6)
  803e40:	00c00284 	movi	r3,10
  803e44:	11400005 	stb	r5,0(r2)
  803e48:	30800017 	ldw	r2,0(r6)
  803e4c:	11400003 	ldbu	r5,0(r2)
  803e50:	28fff11e 	bne	r5,r3,803e18 <__alt_data_end+0xff803e18>
  803e54:	8009883a 	mov	r4,r16
  803e58:	dfc00317 	ldw	ra,12(sp)
  803e5c:	dc000217 	ldw	r16,8(sp)
  803e60:	dec00404 	addi	sp,sp,16
  803e64:	0803fe41 	jmpi	803fe4 <__swbuf_r>
  803e68:	d9400015 	stw	r5,0(sp)
  803e6c:	d9800115 	stw	r6,4(sp)
  803e70:	0804b180 	call	804b18 <__sinit>
  803e74:	d9800117 	ldw	r6,4(sp)
  803e78:	d9400017 	ldw	r5,0(sp)
  803e7c:	003fdf06 	br	803dfc <__alt_data_end+0xff803dfc>

00803e80 <putc>:
  803e80:	00802034 	movhi	r2,128
  803e84:	defffc04 	addi	sp,sp,-16
  803e88:	109db204 	addi	r2,r2,30408
  803e8c:	dc400115 	stw	r17,4(sp)
  803e90:	14400017 	ldw	r17,0(r2)
  803e94:	dc800215 	stw	r18,8(sp)
  803e98:	dc000015 	stw	r16,0(sp)
  803e9c:	dfc00315 	stw	ra,12(sp)
  803ea0:	2025883a 	mov	r18,r4
  803ea4:	2821883a 	mov	r16,r5
  803ea8:	88000226 	beq	r17,zero,803eb4 <putc+0x34>
  803eac:	88800e17 	ldw	r2,56(r17)
  803eb0:	10001a26 	beq	r2,zero,803f1c <putc+0x9c>
  803eb4:	80800217 	ldw	r2,8(r16)
  803eb8:	10bfffc4 	addi	r2,r2,-1
  803ebc:	80800215 	stw	r2,8(r16)
  803ec0:	10000c16 	blt	r2,zero,803ef4 <putc+0x74>
  803ec4:	80800017 	ldw	r2,0(r16)
  803ec8:	14800005 	stb	r18,0(r2)
  803ecc:	80800017 	ldw	r2,0(r16)
  803ed0:	10c00044 	addi	r3,r2,1
  803ed4:	80c00015 	stw	r3,0(r16)
  803ed8:	10800003 	ldbu	r2,0(r2)
  803edc:	dfc00317 	ldw	ra,12(sp)
  803ee0:	dc800217 	ldw	r18,8(sp)
  803ee4:	dc400117 	ldw	r17,4(sp)
  803ee8:	dc000017 	ldw	r16,0(sp)
  803eec:	dec00404 	addi	sp,sp,16
  803ef0:	f800283a 	ret
  803ef4:	80c00617 	ldw	r3,24(r16)
  803ef8:	10c00b16 	blt	r2,r3,803f28 <putc+0xa8>
  803efc:	80800017 	ldw	r2,0(r16)
  803f00:	00c00284 	movi	r3,10
  803f04:	14800005 	stb	r18,0(r2)
  803f08:	80800017 	ldw	r2,0(r16)
  803f0c:	11400003 	ldbu	r5,0(r2)
  803f10:	28ffef1e 	bne	r5,r3,803ed0 <__alt_data_end+0xff803ed0>
  803f14:	8809883a 	mov	r4,r17
  803f18:	00000506 	br	803f30 <putc+0xb0>
  803f1c:	8809883a 	mov	r4,r17
  803f20:	0804b180 	call	804b18 <__sinit>
  803f24:	003fe306 	br	803eb4 <__alt_data_end+0xff803eb4>
  803f28:	8809883a 	mov	r4,r17
  803f2c:	900b883a 	mov	r5,r18
  803f30:	800d883a 	mov	r6,r16
  803f34:	dfc00317 	ldw	ra,12(sp)
  803f38:	dc800217 	ldw	r18,8(sp)
  803f3c:	dc400117 	ldw	r17,4(sp)
  803f40:	dc000017 	ldw	r16,0(sp)
  803f44:	dec00404 	addi	sp,sp,16
  803f48:	0803fe41 	jmpi	803fe4 <__swbuf_r>

00803f4c <strlen>:
  803f4c:	208000cc 	andi	r2,r4,3
  803f50:	10002026 	beq	r2,zero,803fd4 <strlen+0x88>
  803f54:	20800007 	ldb	r2,0(r4)
  803f58:	10002026 	beq	r2,zero,803fdc <strlen+0x90>
  803f5c:	2005883a 	mov	r2,r4
  803f60:	00000206 	br	803f6c <strlen+0x20>
  803f64:	10c00007 	ldb	r3,0(r2)
  803f68:	18001826 	beq	r3,zero,803fcc <strlen+0x80>
  803f6c:	10800044 	addi	r2,r2,1
  803f70:	10c000cc 	andi	r3,r2,3
  803f74:	183ffb1e 	bne	r3,zero,803f64 <__alt_data_end+0xff803f64>
  803f78:	10c00017 	ldw	r3,0(r2)
  803f7c:	01ffbff4 	movhi	r7,65279
  803f80:	39ffbfc4 	addi	r7,r7,-257
  803f84:	00ca303a 	nor	r5,zero,r3
  803f88:	01a02074 	movhi	r6,32897
  803f8c:	19c7883a 	add	r3,r3,r7
  803f90:	31a02004 	addi	r6,r6,-32640
  803f94:	1946703a 	and	r3,r3,r5
  803f98:	1986703a 	and	r3,r3,r6
  803f9c:	1800091e 	bne	r3,zero,803fc4 <strlen+0x78>
  803fa0:	10800104 	addi	r2,r2,4
  803fa4:	10c00017 	ldw	r3,0(r2)
  803fa8:	19cb883a 	add	r5,r3,r7
  803fac:	00c6303a 	nor	r3,zero,r3
  803fb0:	28c6703a 	and	r3,r5,r3
  803fb4:	1986703a 	and	r3,r3,r6
  803fb8:	183ff926 	beq	r3,zero,803fa0 <__alt_data_end+0xff803fa0>
  803fbc:	00000106 	br	803fc4 <strlen+0x78>
  803fc0:	10800044 	addi	r2,r2,1
  803fc4:	10c00007 	ldb	r3,0(r2)
  803fc8:	183ffd1e 	bne	r3,zero,803fc0 <__alt_data_end+0xff803fc0>
  803fcc:	1105c83a 	sub	r2,r2,r4
  803fd0:	f800283a 	ret
  803fd4:	2005883a 	mov	r2,r4
  803fd8:	003fe706 	br	803f78 <__alt_data_end+0xff803f78>
  803fdc:	0005883a 	mov	r2,zero
  803fe0:	f800283a 	ret

00803fe4 <__swbuf_r>:
  803fe4:	defffc04 	addi	sp,sp,-16
  803fe8:	dc800215 	stw	r18,8(sp)
  803fec:	dc400115 	stw	r17,4(sp)
  803ff0:	dc000015 	stw	r16,0(sp)
  803ff4:	dfc00315 	stw	ra,12(sp)
  803ff8:	2025883a 	mov	r18,r4
  803ffc:	2823883a 	mov	r17,r5
  804000:	3021883a 	mov	r16,r6
  804004:	20000226 	beq	r4,zero,804010 <__swbuf_r+0x2c>
  804008:	20800e17 	ldw	r2,56(r4)
  80400c:	10004126 	beq	r2,zero,804114 <__swbuf_r+0x130>
  804010:	80c00617 	ldw	r3,24(r16)
  804014:	8180030b 	ldhu	r6,12(r16)
  804018:	80c00215 	stw	r3,8(r16)
  80401c:	30c0020c 	andi	r3,r6,8
  804020:	18003526 	beq	r3,zero,8040f8 <__swbuf_r+0x114>
  804024:	80c00417 	ldw	r3,16(r16)
  804028:	18003326 	beq	r3,zero,8040f8 <__swbuf_r+0x114>
  80402c:	3088000c 	andi	r2,r6,8192
  804030:	8c403fcc 	andi	r17,r17,255
  804034:	10001726 	beq	r2,zero,804094 <__swbuf_r+0xb0>
  804038:	80800017 	ldw	r2,0(r16)
  80403c:	81000517 	ldw	r4,20(r16)
  804040:	10c7c83a 	sub	r3,r2,r3
  804044:	19001d0e 	bge	r3,r4,8040bc <__swbuf_r+0xd8>
  804048:	18c00044 	addi	r3,r3,1
  80404c:	81400217 	ldw	r5,8(r16)
  804050:	11000044 	addi	r4,r2,1
  804054:	81000015 	stw	r4,0(r16)
  804058:	297fffc4 	addi	r5,r5,-1
  80405c:	81400215 	stw	r5,8(r16)
  804060:	14400005 	stb	r17,0(r2)
  804064:	80800517 	ldw	r2,20(r16)
  804068:	10c01d26 	beq	r2,r3,8040e0 <__swbuf_r+0xfc>
  80406c:	8080030b 	ldhu	r2,12(r16)
  804070:	1080004c 	andi	r2,r2,1
  804074:	1000181e 	bne	r2,zero,8040d8 <__swbuf_r+0xf4>
  804078:	8805883a 	mov	r2,r17
  80407c:	dfc00317 	ldw	ra,12(sp)
  804080:	dc800217 	ldw	r18,8(sp)
  804084:	dc400117 	ldw	r17,4(sp)
  804088:	dc000017 	ldw	r16,0(sp)
  80408c:	dec00404 	addi	sp,sp,16
  804090:	f800283a 	ret
  804094:	81001917 	ldw	r4,100(r16)
  804098:	00b7ffc4 	movi	r2,-8193
  80409c:	31880014 	ori	r6,r6,8192
  8040a0:	2084703a 	and	r2,r4,r2
  8040a4:	80801915 	stw	r2,100(r16)
  8040a8:	80800017 	ldw	r2,0(r16)
  8040ac:	81000517 	ldw	r4,20(r16)
  8040b0:	8180030d 	sth	r6,12(r16)
  8040b4:	10c7c83a 	sub	r3,r2,r3
  8040b8:	193fe316 	blt	r3,r4,804048 <__alt_data_end+0xff804048>
  8040bc:	9009883a 	mov	r4,r18
  8040c0:	800b883a 	mov	r5,r16
  8040c4:	080473c0 	call	80473c <_fflush_r>
  8040c8:	1000091e 	bne	r2,zero,8040f0 <__swbuf_r+0x10c>
  8040cc:	80800017 	ldw	r2,0(r16)
  8040d0:	00c00044 	movi	r3,1
  8040d4:	003fdd06 	br	80404c <__alt_data_end+0xff80404c>
  8040d8:	00800284 	movi	r2,10
  8040dc:	88bfe61e 	bne	r17,r2,804078 <__alt_data_end+0xff804078>
  8040e0:	9009883a 	mov	r4,r18
  8040e4:	800b883a 	mov	r5,r16
  8040e8:	080473c0 	call	80473c <_fflush_r>
  8040ec:	103fe226 	beq	r2,zero,804078 <__alt_data_end+0xff804078>
  8040f0:	00bfffc4 	movi	r2,-1
  8040f4:	003fe106 	br	80407c <__alt_data_end+0xff80407c>
  8040f8:	9009883a 	mov	r4,r18
  8040fc:	800b883a 	mov	r5,r16
  804100:	08041380 	call	804138 <__swsetup_r>
  804104:	103ffa1e 	bne	r2,zero,8040f0 <__alt_data_end+0xff8040f0>
  804108:	8180030b 	ldhu	r6,12(r16)
  80410c:	80c00417 	ldw	r3,16(r16)
  804110:	003fc606 	br	80402c <__alt_data_end+0xff80402c>
  804114:	0804b180 	call	804b18 <__sinit>
  804118:	003fbd06 	br	804010 <__alt_data_end+0xff804010>

0080411c <__swbuf>:
  80411c:	00c02034 	movhi	r3,128
  804120:	18ddb204 	addi	r3,r3,30408
  804124:	2005883a 	mov	r2,r4
  804128:	19000017 	ldw	r4,0(r3)
  80412c:	280d883a 	mov	r6,r5
  804130:	100b883a 	mov	r5,r2
  804134:	0803fe41 	jmpi	803fe4 <__swbuf_r>

00804138 <__swsetup_r>:
  804138:	00802034 	movhi	r2,128
  80413c:	defffd04 	addi	sp,sp,-12
  804140:	109db204 	addi	r2,r2,30408
  804144:	dc400115 	stw	r17,4(sp)
  804148:	2023883a 	mov	r17,r4
  80414c:	11000017 	ldw	r4,0(r2)
  804150:	dc000015 	stw	r16,0(sp)
  804154:	dfc00215 	stw	ra,8(sp)
  804158:	2821883a 	mov	r16,r5
  80415c:	20000226 	beq	r4,zero,804168 <__swsetup_r+0x30>
  804160:	20c00e17 	ldw	r3,56(r4)
  804164:	18003126 	beq	r3,zero,80422c <__swsetup_r+0xf4>
  804168:	8080030b 	ldhu	r2,12(r16)
  80416c:	10c0020c 	andi	r3,r2,8
  804170:	100d883a 	mov	r6,r2
  804174:	18000f26 	beq	r3,zero,8041b4 <__swsetup_r+0x7c>
  804178:	80c00417 	ldw	r3,16(r16)
  80417c:	18001526 	beq	r3,zero,8041d4 <__swsetup_r+0x9c>
  804180:	1100004c 	andi	r4,r2,1
  804184:	20001c1e 	bne	r4,zero,8041f8 <__swsetup_r+0xc0>
  804188:	1080008c 	andi	r2,r2,2
  80418c:	1000291e 	bne	r2,zero,804234 <__swsetup_r+0xfc>
  804190:	80800517 	ldw	r2,20(r16)
  804194:	80800215 	stw	r2,8(r16)
  804198:	18001c26 	beq	r3,zero,80420c <__swsetup_r+0xd4>
  80419c:	0005883a 	mov	r2,zero
  8041a0:	dfc00217 	ldw	ra,8(sp)
  8041a4:	dc400117 	ldw	r17,4(sp)
  8041a8:	dc000017 	ldw	r16,0(sp)
  8041ac:	dec00304 	addi	sp,sp,12
  8041b0:	f800283a 	ret
  8041b4:	3080040c 	andi	r2,r6,16
  8041b8:	10002e26 	beq	r2,zero,804274 <__swsetup_r+0x13c>
  8041bc:	3080010c 	andi	r2,r6,4
  8041c0:	10001e1e 	bne	r2,zero,80423c <__swsetup_r+0x104>
  8041c4:	80c00417 	ldw	r3,16(r16)
  8041c8:	30800214 	ori	r2,r6,8
  8041cc:	8080030d 	sth	r2,12(r16)
  8041d0:	183feb1e 	bne	r3,zero,804180 <__alt_data_end+0xff804180>
  8041d4:	1140a00c 	andi	r5,r2,640
  8041d8:	01008004 	movi	r4,512
  8041dc:	293fe826 	beq	r5,r4,804180 <__alt_data_end+0xff804180>
  8041e0:	8809883a 	mov	r4,r17
  8041e4:	800b883a 	mov	r5,r16
  8041e8:	08051040 	call	805104 <__smakebuf_r>
  8041ec:	8080030b 	ldhu	r2,12(r16)
  8041f0:	80c00417 	ldw	r3,16(r16)
  8041f4:	003fe206 	br	804180 <__alt_data_end+0xff804180>
  8041f8:	80800517 	ldw	r2,20(r16)
  8041fc:	80000215 	stw	zero,8(r16)
  804200:	0085c83a 	sub	r2,zero,r2
  804204:	80800615 	stw	r2,24(r16)
  804208:	183fe41e 	bne	r3,zero,80419c <__alt_data_end+0xff80419c>
  80420c:	80c0030b 	ldhu	r3,12(r16)
  804210:	0005883a 	mov	r2,zero
  804214:	1900200c 	andi	r4,r3,128
  804218:	203fe126 	beq	r4,zero,8041a0 <__alt_data_end+0xff8041a0>
  80421c:	18c01014 	ori	r3,r3,64
  804220:	80c0030d 	sth	r3,12(r16)
  804224:	00bfffc4 	movi	r2,-1
  804228:	003fdd06 	br	8041a0 <__alt_data_end+0xff8041a0>
  80422c:	0804b180 	call	804b18 <__sinit>
  804230:	003fcd06 	br	804168 <__alt_data_end+0xff804168>
  804234:	0005883a 	mov	r2,zero
  804238:	003fd606 	br	804194 <__alt_data_end+0xff804194>
  80423c:	81400c17 	ldw	r5,48(r16)
  804240:	28000626 	beq	r5,zero,80425c <__swsetup_r+0x124>
  804244:	80801004 	addi	r2,r16,64
  804248:	28800326 	beq	r5,r2,804258 <__swsetup_r+0x120>
  80424c:	8809883a 	mov	r4,r17
  804250:	0804c8c0 	call	804c8c <_free_r>
  804254:	8180030b 	ldhu	r6,12(r16)
  804258:	80000c15 	stw	zero,48(r16)
  80425c:	80c00417 	ldw	r3,16(r16)
  804260:	00bff6c4 	movi	r2,-37
  804264:	118c703a 	and	r6,r2,r6
  804268:	80000115 	stw	zero,4(r16)
  80426c:	80c00015 	stw	r3,0(r16)
  804270:	003fd506 	br	8041c8 <__alt_data_end+0xff8041c8>
  804274:	00800244 	movi	r2,9
  804278:	88800015 	stw	r2,0(r17)
  80427c:	30801014 	ori	r2,r6,64
  804280:	8080030d 	sth	r2,12(r16)
  804284:	00bfffc4 	movi	r2,-1
  804288:	003fc506 	br	8041a0 <__alt_data_end+0xff8041a0>

0080428c <__register_exitproc>:
  80428c:	00802034 	movhi	r2,128
  804290:	defffa04 	addi	sp,sp,-24
  804294:	109db104 	addi	r2,r2,30404
  804298:	dc000315 	stw	r16,12(sp)
  80429c:	14000017 	ldw	r16,0(r2)
  8042a0:	dc400415 	stw	r17,16(sp)
  8042a4:	dfc00515 	stw	ra,20(sp)
  8042a8:	80805217 	ldw	r2,328(r16)
  8042ac:	2023883a 	mov	r17,r4
  8042b0:	10003626 	beq	r2,zero,80438c <__register_exitproc+0x100>
  8042b4:	10c00117 	ldw	r3,4(r2)
  8042b8:	010007c4 	movi	r4,31
  8042bc:	20c00e16 	blt	r4,r3,8042f8 <__register_exitproc+0x6c>
  8042c0:	1a400044 	addi	r9,r3,1
  8042c4:	8800211e 	bne	r17,zero,80434c <__register_exitproc+0xc0>
  8042c8:	18c00084 	addi	r3,r3,2
  8042cc:	18c7883a 	add	r3,r3,r3
  8042d0:	18c7883a 	add	r3,r3,r3
  8042d4:	12400115 	stw	r9,4(r2)
  8042d8:	10c7883a 	add	r3,r2,r3
  8042dc:	19400015 	stw	r5,0(r3)
  8042e0:	0005883a 	mov	r2,zero
  8042e4:	dfc00517 	ldw	ra,20(sp)
  8042e8:	dc400417 	ldw	r17,16(sp)
  8042ec:	dc000317 	ldw	r16,12(sp)
  8042f0:	dec00604 	addi	sp,sp,24
  8042f4:	f800283a 	ret
  8042f8:	00800034 	movhi	r2,0
  8042fc:	10800004 	addi	r2,r2,0
  804300:	10002526 	beq	r2,zero,804398 <__register_exitproc+0x10c>
  804304:	01006404 	movi	r4,400
  804308:	d9400015 	stw	r5,0(sp)
  80430c:	d9800115 	stw	r6,4(sp)
  804310:	d9c00215 	stw	r7,8(sp)
  804314:	00000000 	call	0 <__reset-0x800000>
  804318:	d9400017 	ldw	r5,0(sp)
  80431c:	d9800117 	ldw	r6,4(sp)
  804320:	d9c00217 	ldw	r7,8(sp)
  804324:	10001c26 	beq	r2,zero,804398 <__register_exitproc+0x10c>
  804328:	80c05217 	ldw	r3,328(r16)
  80432c:	10000115 	stw	zero,4(r2)
  804330:	02400044 	movi	r9,1
  804334:	10c00015 	stw	r3,0(r2)
  804338:	80805215 	stw	r2,328(r16)
  80433c:	10006215 	stw	zero,392(r2)
  804340:	10006315 	stw	zero,396(r2)
  804344:	0007883a 	mov	r3,zero
  804348:	883fdf26 	beq	r17,zero,8042c8 <__alt_data_end+0xff8042c8>
  80434c:	18d1883a 	add	r8,r3,r3
  804350:	4211883a 	add	r8,r8,r8
  804354:	1211883a 	add	r8,r2,r8
  804358:	41802215 	stw	r6,136(r8)
  80435c:	01000044 	movi	r4,1
  804360:	11806217 	ldw	r6,392(r2)
  804364:	20c8983a 	sll	r4,r4,r3
  804368:	310cb03a 	or	r6,r6,r4
  80436c:	11806215 	stw	r6,392(r2)
  804370:	41c04215 	stw	r7,264(r8)
  804374:	01800084 	movi	r6,2
  804378:	89bfd31e 	bne	r17,r6,8042c8 <__alt_data_end+0xff8042c8>
  80437c:	11806317 	ldw	r6,396(r2)
  804380:	3108b03a 	or	r4,r6,r4
  804384:	11006315 	stw	r4,396(r2)
  804388:	003fcf06 	br	8042c8 <__alt_data_end+0xff8042c8>
  80438c:	80805304 	addi	r2,r16,332
  804390:	80805215 	stw	r2,328(r16)
  804394:	003fc706 	br	8042b4 <__alt_data_end+0xff8042b4>
  804398:	00bfffc4 	movi	r2,-1
  80439c:	003fd106 	br	8042e4 <__alt_data_end+0xff8042e4>

008043a0 <__call_exitprocs>:
  8043a0:	00802034 	movhi	r2,128
  8043a4:	109db104 	addi	r2,r2,30404
  8043a8:	10800017 	ldw	r2,0(r2)
  8043ac:	defff404 	addi	sp,sp,-48
  8043b0:	dd800815 	stw	r22,32(sp)
  8043b4:	d8800015 	stw	r2,0(sp)
  8043b8:	10805204 	addi	r2,r2,328
  8043bc:	dd000615 	stw	r20,24(sp)
  8043c0:	dc800415 	stw	r18,16(sp)
  8043c4:	dfc00b15 	stw	ra,44(sp)
  8043c8:	df000a15 	stw	fp,40(sp)
  8043cc:	ddc00915 	stw	r23,36(sp)
  8043d0:	dd400715 	stw	r21,28(sp)
  8043d4:	dcc00515 	stw	r19,20(sp)
  8043d8:	dc400315 	stw	r17,12(sp)
  8043dc:	dc000215 	stw	r16,8(sp)
  8043e0:	2025883a 	mov	r18,r4
  8043e4:	2829883a 	mov	r20,r5
  8043e8:	d8800115 	stw	r2,4(sp)
  8043ec:	05bfffc4 	movi	r22,-1
  8043f0:	d8800017 	ldw	r2,0(sp)
  8043f4:	14c05217 	ldw	r19,328(r2)
  8043f8:	98001d26 	beq	r19,zero,804470 <__call_exitprocs+0xd0>
  8043fc:	dd400117 	ldw	r21,4(sp)
  804400:	98800117 	ldw	r2,4(r19)
  804404:	173fffc4 	addi	fp,r2,-1
  804408:	e0000d16 	blt	fp,zero,804440 <__call_exitprocs+0xa0>
  80440c:	14000044 	addi	r16,r2,1
  804410:	8421883a 	add	r16,r16,r16
  804414:	8421883a 	add	r16,r16,r16
  804418:	84402004 	addi	r17,r16,128
  80441c:	9c63883a 	add	r17,r19,r17
  804420:	9c21883a 	add	r16,r19,r16
  804424:	a0001e26 	beq	r20,zero,8044a0 <__call_exitprocs+0x100>
  804428:	80804017 	ldw	r2,256(r16)
  80442c:	15001c26 	beq	r2,r20,8044a0 <__call_exitprocs+0x100>
  804430:	e73fffc4 	addi	fp,fp,-1
  804434:	843fff04 	addi	r16,r16,-4
  804438:	8c7fff04 	addi	r17,r17,-4
  80443c:	e5bff91e 	bne	fp,r22,804424 <__alt_data_end+0xff804424>
  804440:	00800034 	movhi	r2,0
  804444:	10800004 	addi	r2,r2,0
  804448:	10000926 	beq	r2,zero,804470 <__call_exitprocs+0xd0>
  80444c:	98800117 	ldw	r2,4(r19)
  804450:	1000311e 	bne	r2,zero,804518 <__call_exitprocs+0x178>
  804454:	98800017 	ldw	r2,0(r19)
  804458:	10003426 	beq	r2,zero,80452c <__call_exitprocs+0x18c>
  80445c:	9809883a 	mov	r4,r19
  804460:	a8800015 	stw	r2,0(r21)
  804464:	00000000 	call	0 <__reset-0x800000>
  804468:	acc00017 	ldw	r19,0(r21)
  80446c:	983fe41e 	bne	r19,zero,804400 <__alt_data_end+0xff804400>
  804470:	dfc00b17 	ldw	ra,44(sp)
  804474:	df000a17 	ldw	fp,40(sp)
  804478:	ddc00917 	ldw	r23,36(sp)
  80447c:	dd800817 	ldw	r22,32(sp)
  804480:	dd400717 	ldw	r21,28(sp)
  804484:	dd000617 	ldw	r20,24(sp)
  804488:	dcc00517 	ldw	r19,20(sp)
  80448c:	dc800417 	ldw	r18,16(sp)
  804490:	dc400317 	ldw	r17,12(sp)
  804494:	dc000217 	ldw	r16,8(sp)
  804498:	dec00c04 	addi	sp,sp,48
  80449c:	f800283a 	ret
  8044a0:	98800117 	ldw	r2,4(r19)
  8044a4:	80c00017 	ldw	r3,0(r16)
  8044a8:	10bfffc4 	addi	r2,r2,-1
  8044ac:	17001526 	beq	r2,fp,804504 <__call_exitprocs+0x164>
  8044b0:	80000015 	stw	zero,0(r16)
  8044b4:	183fde26 	beq	r3,zero,804430 <__alt_data_end+0xff804430>
  8044b8:	00800044 	movi	r2,1
  8044bc:	1708983a 	sll	r4,r2,fp
  8044c0:	98806217 	ldw	r2,392(r19)
  8044c4:	9dc00117 	ldw	r23,4(r19)
  8044c8:	2084703a 	and	r2,r4,r2
  8044cc:	1000061e 	bne	r2,zero,8044e8 <__call_exitprocs+0x148>
  8044d0:	183ee83a 	callr	r3
  8044d4:	98800117 	ldw	r2,4(r19)
  8044d8:	15ffc51e 	bne	r2,r23,8043f0 <__alt_data_end+0xff8043f0>
  8044dc:	a8800017 	ldw	r2,0(r21)
  8044e0:	14ffd326 	beq	r2,r19,804430 <__alt_data_end+0xff804430>
  8044e4:	003fc206 	br	8043f0 <__alt_data_end+0xff8043f0>
  8044e8:	98806317 	ldw	r2,396(r19)
  8044ec:	2084703a 	and	r2,r4,r2
  8044f0:	1000061e 	bne	r2,zero,80450c <__call_exitprocs+0x16c>
  8044f4:	89400017 	ldw	r5,0(r17)
  8044f8:	9009883a 	mov	r4,r18
  8044fc:	183ee83a 	callr	r3
  804500:	003ff406 	br	8044d4 <__alt_data_end+0xff8044d4>
  804504:	9f000115 	stw	fp,4(r19)
  804508:	003fea06 	br	8044b4 <__alt_data_end+0xff8044b4>
  80450c:	89000017 	ldw	r4,0(r17)
  804510:	183ee83a 	callr	r3
  804514:	003fef06 	br	8044d4 <__alt_data_end+0xff8044d4>
  804518:	98800017 	ldw	r2,0(r19)
  80451c:	982b883a 	mov	r21,r19
  804520:	1027883a 	mov	r19,r2
  804524:	983fb61e 	bne	r19,zero,804400 <__alt_data_end+0xff804400>
  804528:	003fd106 	br	804470 <__alt_data_end+0xff804470>
  80452c:	0005883a 	mov	r2,zero
  804530:	003ffa06 	br	80451c <__alt_data_end+0xff80451c>

00804534 <__sflush_r>:
  804534:	2880030b 	ldhu	r2,12(r5)
  804538:	defffb04 	addi	sp,sp,-20
  80453c:	dcc00315 	stw	r19,12(sp)
  804540:	dc400115 	stw	r17,4(sp)
  804544:	dfc00415 	stw	ra,16(sp)
  804548:	dc800215 	stw	r18,8(sp)
  80454c:	dc000015 	stw	r16,0(sp)
  804550:	10c0020c 	andi	r3,r2,8
  804554:	2823883a 	mov	r17,r5
  804558:	2027883a 	mov	r19,r4
  80455c:	1800311e 	bne	r3,zero,804624 <__sflush_r+0xf0>
  804560:	28c00117 	ldw	r3,4(r5)
  804564:	10820014 	ori	r2,r2,2048
  804568:	2880030d 	sth	r2,12(r5)
  80456c:	00c04b0e 	bge	zero,r3,80469c <__sflush_r+0x168>
  804570:	8a000a17 	ldw	r8,40(r17)
  804574:	40002326 	beq	r8,zero,804604 <__sflush_r+0xd0>
  804578:	9c000017 	ldw	r16,0(r19)
  80457c:	10c4000c 	andi	r3,r2,4096
  804580:	98000015 	stw	zero,0(r19)
  804584:	18004826 	beq	r3,zero,8046a8 <__sflush_r+0x174>
  804588:	89801417 	ldw	r6,80(r17)
  80458c:	10c0010c 	andi	r3,r2,4
  804590:	18000626 	beq	r3,zero,8045ac <__sflush_r+0x78>
  804594:	88c00117 	ldw	r3,4(r17)
  804598:	88800c17 	ldw	r2,48(r17)
  80459c:	30cdc83a 	sub	r6,r6,r3
  8045a0:	10000226 	beq	r2,zero,8045ac <__sflush_r+0x78>
  8045a4:	88800f17 	ldw	r2,60(r17)
  8045a8:	308dc83a 	sub	r6,r6,r2
  8045ac:	89400717 	ldw	r5,28(r17)
  8045b0:	9809883a 	mov	r4,r19
  8045b4:	000f883a 	mov	r7,zero
  8045b8:	403ee83a 	callr	r8
  8045bc:	00ffffc4 	movi	r3,-1
  8045c0:	10c04426 	beq	r2,r3,8046d4 <__sflush_r+0x1a0>
  8045c4:	88c0030b 	ldhu	r3,12(r17)
  8045c8:	89000417 	ldw	r4,16(r17)
  8045cc:	88000115 	stw	zero,4(r17)
  8045d0:	197dffcc 	andi	r5,r3,63487
  8045d4:	8940030d 	sth	r5,12(r17)
  8045d8:	89000015 	stw	r4,0(r17)
  8045dc:	18c4000c 	andi	r3,r3,4096
  8045e0:	18002c1e 	bne	r3,zero,804694 <__sflush_r+0x160>
  8045e4:	89400c17 	ldw	r5,48(r17)
  8045e8:	9c000015 	stw	r16,0(r19)
  8045ec:	28000526 	beq	r5,zero,804604 <__sflush_r+0xd0>
  8045f0:	88801004 	addi	r2,r17,64
  8045f4:	28800226 	beq	r5,r2,804600 <__sflush_r+0xcc>
  8045f8:	9809883a 	mov	r4,r19
  8045fc:	0804c8c0 	call	804c8c <_free_r>
  804600:	88000c15 	stw	zero,48(r17)
  804604:	0005883a 	mov	r2,zero
  804608:	dfc00417 	ldw	ra,16(sp)
  80460c:	dcc00317 	ldw	r19,12(sp)
  804610:	dc800217 	ldw	r18,8(sp)
  804614:	dc400117 	ldw	r17,4(sp)
  804618:	dc000017 	ldw	r16,0(sp)
  80461c:	dec00504 	addi	sp,sp,20
  804620:	f800283a 	ret
  804624:	2c800417 	ldw	r18,16(r5)
  804628:	903ff626 	beq	r18,zero,804604 <__alt_data_end+0xff804604>
  80462c:	2c000017 	ldw	r16,0(r5)
  804630:	108000cc 	andi	r2,r2,3
  804634:	2c800015 	stw	r18,0(r5)
  804638:	84a1c83a 	sub	r16,r16,r18
  80463c:	1000131e 	bne	r2,zero,80468c <__sflush_r+0x158>
  804640:	28800517 	ldw	r2,20(r5)
  804644:	88800215 	stw	r2,8(r17)
  804648:	04000316 	blt	zero,r16,804658 <__sflush_r+0x124>
  80464c:	003fed06 	br	804604 <__alt_data_end+0xff804604>
  804650:	90a5883a 	add	r18,r18,r2
  804654:	043feb0e 	bge	zero,r16,804604 <__alt_data_end+0xff804604>
  804658:	88800917 	ldw	r2,36(r17)
  80465c:	89400717 	ldw	r5,28(r17)
  804660:	800f883a 	mov	r7,r16
  804664:	900d883a 	mov	r6,r18
  804668:	9809883a 	mov	r4,r19
  80466c:	103ee83a 	callr	r2
  804670:	80a1c83a 	sub	r16,r16,r2
  804674:	00bff616 	blt	zero,r2,804650 <__alt_data_end+0xff804650>
  804678:	88c0030b 	ldhu	r3,12(r17)
  80467c:	00bfffc4 	movi	r2,-1
  804680:	18c01014 	ori	r3,r3,64
  804684:	88c0030d 	sth	r3,12(r17)
  804688:	003fdf06 	br	804608 <__alt_data_end+0xff804608>
  80468c:	0005883a 	mov	r2,zero
  804690:	003fec06 	br	804644 <__alt_data_end+0xff804644>
  804694:	88801415 	stw	r2,80(r17)
  804698:	003fd206 	br	8045e4 <__alt_data_end+0xff8045e4>
  80469c:	28c00f17 	ldw	r3,60(r5)
  8046a0:	00ffb316 	blt	zero,r3,804570 <__alt_data_end+0xff804570>
  8046a4:	003fd706 	br	804604 <__alt_data_end+0xff804604>
  8046a8:	89400717 	ldw	r5,28(r17)
  8046ac:	000d883a 	mov	r6,zero
  8046b0:	9809883a 	mov	r4,r19
  8046b4:	01c00044 	movi	r7,1
  8046b8:	403ee83a 	callr	r8
  8046bc:	100d883a 	mov	r6,r2
  8046c0:	00bfffc4 	movi	r2,-1
  8046c4:	30801426 	beq	r6,r2,804718 <__sflush_r+0x1e4>
  8046c8:	8880030b 	ldhu	r2,12(r17)
  8046cc:	8a000a17 	ldw	r8,40(r17)
  8046d0:	003fae06 	br	80458c <__alt_data_end+0xff80458c>
  8046d4:	98c00017 	ldw	r3,0(r19)
  8046d8:	183fba26 	beq	r3,zero,8045c4 <__alt_data_end+0xff8045c4>
  8046dc:	01000744 	movi	r4,29
  8046e0:	19000626 	beq	r3,r4,8046fc <__sflush_r+0x1c8>
  8046e4:	01000584 	movi	r4,22
  8046e8:	19000426 	beq	r3,r4,8046fc <__sflush_r+0x1c8>
  8046ec:	88c0030b 	ldhu	r3,12(r17)
  8046f0:	18c01014 	ori	r3,r3,64
  8046f4:	88c0030d 	sth	r3,12(r17)
  8046f8:	003fc306 	br	804608 <__alt_data_end+0xff804608>
  8046fc:	8880030b 	ldhu	r2,12(r17)
  804700:	88c00417 	ldw	r3,16(r17)
  804704:	88000115 	stw	zero,4(r17)
  804708:	10bdffcc 	andi	r2,r2,63487
  80470c:	8880030d 	sth	r2,12(r17)
  804710:	88c00015 	stw	r3,0(r17)
  804714:	003fb306 	br	8045e4 <__alt_data_end+0xff8045e4>
  804718:	98800017 	ldw	r2,0(r19)
  80471c:	103fea26 	beq	r2,zero,8046c8 <__alt_data_end+0xff8046c8>
  804720:	00c00744 	movi	r3,29
  804724:	10c00226 	beq	r2,r3,804730 <__sflush_r+0x1fc>
  804728:	00c00584 	movi	r3,22
  80472c:	10ffd21e 	bne	r2,r3,804678 <__alt_data_end+0xff804678>
  804730:	9c000015 	stw	r16,0(r19)
  804734:	0005883a 	mov	r2,zero
  804738:	003fb306 	br	804608 <__alt_data_end+0xff804608>

0080473c <_fflush_r>:
  80473c:	defffd04 	addi	sp,sp,-12
  804740:	dc000115 	stw	r16,4(sp)
  804744:	dfc00215 	stw	ra,8(sp)
  804748:	2021883a 	mov	r16,r4
  80474c:	20000226 	beq	r4,zero,804758 <_fflush_r+0x1c>
  804750:	20800e17 	ldw	r2,56(r4)
  804754:	10000c26 	beq	r2,zero,804788 <_fflush_r+0x4c>
  804758:	2880030f 	ldh	r2,12(r5)
  80475c:	1000051e 	bne	r2,zero,804774 <_fflush_r+0x38>
  804760:	0005883a 	mov	r2,zero
  804764:	dfc00217 	ldw	ra,8(sp)
  804768:	dc000117 	ldw	r16,4(sp)
  80476c:	dec00304 	addi	sp,sp,12
  804770:	f800283a 	ret
  804774:	8009883a 	mov	r4,r16
  804778:	dfc00217 	ldw	ra,8(sp)
  80477c:	dc000117 	ldw	r16,4(sp)
  804780:	dec00304 	addi	sp,sp,12
  804784:	08045341 	jmpi	804534 <__sflush_r>
  804788:	d9400015 	stw	r5,0(sp)
  80478c:	0804b180 	call	804b18 <__sinit>
  804790:	d9400017 	ldw	r5,0(sp)
  804794:	003ff006 	br	804758 <__alt_data_end+0xff804758>

00804798 <fflush>:
  804798:	20000526 	beq	r4,zero,8047b0 <fflush+0x18>
  80479c:	00802034 	movhi	r2,128
  8047a0:	109db204 	addi	r2,r2,30408
  8047a4:	200b883a 	mov	r5,r4
  8047a8:	11000017 	ldw	r4,0(r2)
  8047ac:	080473c1 	jmpi	80473c <_fflush_r>
  8047b0:	00802034 	movhi	r2,128
  8047b4:	109db104 	addi	r2,r2,30404
  8047b8:	11000017 	ldw	r4,0(r2)
  8047bc:	01402034 	movhi	r5,128
  8047c0:	2951cf04 	addi	r5,r5,18236
  8047c4:	08050401 	jmpi	805040 <_fwalk_reent>

008047c8 <__fp_lock>:
  8047c8:	0005883a 	mov	r2,zero
  8047cc:	f800283a 	ret

008047d0 <__fp_unlock>:
  8047d0:	0005883a 	mov	r2,zero
  8047d4:	f800283a 	ret

008047d8 <_cleanup_r>:
  8047d8:	01402034 	movhi	r5,128
  8047dc:	29572904 	addi	r5,r5,23716
  8047e0:	08050401 	jmpi	805040 <_fwalk_reent>

008047e4 <__sinit.part.1>:
  8047e4:	defff704 	addi	sp,sp,-36
  8047e8:	00c02034 	movhi	r3,128
  8047ec:	dfc00815 	stw	ra,32(sp)
  8047f0:	ddc00715 	stw	r23,28(sp)
  8047f4:	dd800615 	stw	r22,24(sp)
  8047f8:	dd400515 	stw	r21,20(sp)
  8047fc:	dd000415 	stw	r20,16(sp)
  804800:	dcc00315 	stw	r19,12(sp)
  804804:	dc800215 	stw	r18,8(sp)
  804808:	dc400115 	stw	r17,4(sp)
  80480c:	dc000015 	stw	r16,0(sp)
  804810:	18d1f604 	addi	r3,r3,18392
  804814:	24000117 	ldw	r16,4(r4)
  804818:	20c00f15 	stw	r3,60(r4)
  80481c:	2080bb04 	addi	r2,r4,748
  804820:	00c000c4 	movi	r3,3
  804824:	20c0b915 	stw	r3,740(r4)
  804828:	2080ba15 	stw	r2,744(r4)
  80482c:	2000b815 	stw	zero,736(r4)
  804830:	05c00204 	movi	r23,8
  804834:	00800104 	movi	r2,4
  804838:	2025883a 	mov	r18,r4
  80483c:	b80d883a 	mov	r6,r23
  804840:	81001704 	addi	r4,r16,92
  804844:	000b883a 	mov	r5,zero
  804848:	80000015 	stw	zero,0(r16)
  80484c:	80000115 	stw	zero,4(r16)
  804850:	80000215 	stw	zero,8(r16)
  804854:	8080030d 	sth	r2,12(r16)
  804858:	80001915 	stw	zero,100(r16)
  80485c:	8000038d 	sth	zero,14(r16)
  804860:	80000415 	stw	zero,16(r16)
  804864:	80000515 	stw	zero,20(r16)
  804868:	80000615 	stw	zero,24(r16)
  80486c:	0803cbc0 	call	803cbc <memset>
  804870:	05802034 	movhi	r22,128
  804874:	94400217 	ldw	r17,8(r18)
  804878:	05402034 	movhi	r21,128
  80487c:	05002034 	movhi	r20,128
  804880:	04c02034 	movhi	r19,128
  804884:	b596ae04 	addi	r22,r22,23224
  804888:	ad56c504 	addi	r21,r21,23316
  80488c:	a516e404 	addi	r20,r20,23440
  804890:	9cd6fb04 	addi	r19,r19,23532
  804894:	85800815 	stw	r22,32(r16)
  804898:	85400915 	stw	r21,36(r16)
  80489c:	85000a15 	stw	r20,40(r16)
  8048a0:	84c00b15 	stw	r19,44(r16)
  8048a4:	84000715 	stw	r16,28(r16)
  8048a8:	00800284 	movi	r2,10
  8048ac:	8880030d 	sth	r2,12(r17)
  8048b0:	00800044 	movi	r2,1
  8048b4:	89001704 	addi	r4,r17,92
  8048b8:	b80d883a 	mov	r6,r23
  8048bc:	000b883a 	mov	r5,zero
  8048c0:	88000015 	stw	zero,0(r17)
  8048c4:	88000115 	stw	zero,4(r17)
  8048c8:	88000215 	stw	zero,8(r17)
  8048cc:	88001915 	stw	zero,100(r17)
  8048d0:	8880038d 	sth	r2,14(r17)
  8048d4:	88000415 	stw	zero,16(r17)
  8048d8:	88000515 	stw	zero,20(r17)
  8048dc:	88000615 	stw	zero,24(r17)
  8048e0:	0803cbc0 	call	803cbc <memset>
  8048e4:	94000317 	ldw	r16,12(r18)
  8048e8:	00800484 	movi	r2,18
  8048ec:	8c400715 	stw	r17,28(r17)
  8048f0:	8d800815 	stw	r22,32(r17)
  8048f4:	8d400915 	stw	r21,36(r17)
  8048f8:	8d000a15 	stw	r20,40(r17)
  8048fc:	8cc00b15 	stw	r19,44(r17)
  804900:	8080030d 	sth	r2,12(r16)
  804904:	00800084 	movi	r2,2
  804908:	80000015 	stw	zero,0(r16)
  80490c:	80000115 	stw	zero,4(r16)
  804910:	80000215 	stw	zero,8(r16)
  804914:	80001915 	stw	zero,100(r16)
  804918:	8080038d 	sth	r2,14(r16)
  80491c:	80000415 	stw	zero,16(r16)
  804920:	80000515 	stw	zero,20(r16)
  804924:	80000615 	stw	zero,24(r16)
  804928:	81001704 	addi	r4,r16,92
  80492c:	000b883a 	mov	r5,zero
  804930:	b80d883a 	mov	r6,r23
  804934:	0803cbc0 	call	803cbc <memset>
  804938:	00800044 	movi	r2,1
  80493c:	84000715 	stw	r16,28(r16)
  804940:	85800815 	stw	r22,32(r16)
  804944:	85400915 	stw	r21,36(r16)
  804948:	85000a15 	stw	r20,40(r16)
  80494c:	84c00b15 	stw	r19,44(r16)
  804950:	90800e15 	stw	r2,56(r18)
  804954:	dfc00817 	ldw	ra,32(sp)
  804958:	ddc00717 	ldw	r23,28(sp)
  80495c:	dd800617 	ldw	r22,24(sp)
  804960:	dd400517 	ldw	r21,20(sp)
  804964:	dd000417 	ldw	r20,16(sp)
  804968:	dcc00317 	ldw	r19,12(sp)
  80496c:	dc800217 	ldw	r18,8(sp)
  804970:	dc400117 	ldw	r17,4(sp)
  804974:	dc000017 	ldw	r16,0(sp)
  804978:	dec00904 	addi	sp,sp,36
  80497c:	f800283a 	ret

00804980 <__sfmoreglue>:
  804980:	defffc04 	addi	sp,sp,-16
  804984:	dc400115 	stw	r17,4(sp)
  804988:	2c7fffc4 	addi	r17,r5,-1
  80498c:	8c401a24 	muli	r17,r17,104
  804990:	dc800215 	stw	r18,8(sp)
  804994:	2825883a 	mov	r18,r5
  804998:	89401d04 	addi	r5,r17,116
  80499c:	dc000015 	stw	r16,0(sp)
  8049a0:	dfc00315 	stw	ra,12(sp)
  8049a4:	08052bc0 	call	8052bc <_malloc_r>
  8049a8:	1021883a 	mov	r16,r2
  8049ac:	10000726 	beq	r2,zero,8049cc <__sfmoreglue+0x4c>
  8049b0:	11000304 	addi	r4,r2,12
  8049b4:	10000015 	stw	zero,0(r2)
  8049b8:	14800115 	stw	r18,4(r2)
  8049bc:	11000215 	stw	r4,8(r2)
  8049c0:	000b883a 	mov	r5,zero
  8049c4:	89801a04 	addi	r6,r17,104
  8049c8:	0803cbc0 	call	803cbc <memset>
  8049cc:	8005883a 	mov	r2,r16
  8049d0:	dfc00317 	ldw	ra,12(sp)
  8049d4:	dc800217 	ldw	r18,8(sp)
  8049d8:	dc400117 	ldw	r17,4(sp)
  8049dc:	dc000017 	ldw	r16,0(sp)
  8049e0:	dec00404 	addi	sp,sp,16
  8049e4:	f800283a 	ret

008049e8 <__sfp>:
  8049e8:	00802034 	movhi	r2,128
  8049ec:	defffb04 	addi	sp,sp,-20
  8049f0:	109db104 	addi	r2,r2,30404
  8049f4:	dc800215 	stw	r18,8(sp)
  8049f8:	14800017 	ldw	r18,0(r2)
  8049fc:	dcc00315 	stw	r19,12(sp)
  804a00:	dfc00415 	stw	ra,16(sp)
  804a04:	90800e17 	ldw	r2,56(r18)
  804a08:	dc400115 	stw	r17,4(sp)
  804a0c:	dc000015 	stw	r16,0(sp)
  804a10:	2027883a 	mov	r19,r4
  804a14:	1000021e 	bne	r2,zero,804a20 <__sfp+0x38>
  804a18:	9009883a 	mov	r4,r18
  804a1c:	08047e40 	call	8047e4 <__sinit.part.1>
  804a20:	9480b804 	addi	r18,r18,736
  804a24:	047fffc4 	movi	r17,-1
  804a28:	91400117 	ldw	r5,4(r18)
  804a2c:	94000217 	ldw	r16,8(r18)
  804a30:	297fffc4 	addi	r5,r5,-1
  804a34:	28000a16 	blt	r5,zero,804a60 <__sfp+0x78>
  804a38:	8080030f 	ldh	r2,12(r16)
  804a3c:	10000c26 	beq	r2,zero,804a70 <__sfp+0x88>
  804a40:	80c01d04 	addi	r3,r16,116
  804a44:	00000206 	br	804a50 <__sfp+0x68>
  804a48:	18bfe60f 	ldh	r2,-104(r3)
  804a4c:	10000826 	beq	r2,zero,804a70 <__sfp+0x88>
  804a50:	297fffc4 	addi	r5,r5,-1
  804a54:	1c3ffd04 	addi	r16,r3,-12
  804a58:	18c01a04 	addi	r3,r3,104
  804a5c:	2c7ffa1e 	bne	r5,r17,804a48 <__alt_data_end+0xff804a48>
  804a60:	90800017 	ldw	r2,0(r18)
  804a64:	10001d26 	beq	r2,zero,804adc <__sfp+0xf4>
  804a68:	1025883a 	mov	r18,r2
  804a6c:	003fee06 	br	804a28 <__alt_data_end+0xff804a28>
  804a70:	00bfffc4 	movi	r2,-1
  804a74:	8080038d 	sth	r2,14(r16)
  804a78:	00800044 	movi	r2,1
  804a7c:	8080030d 	sth	r2,12(r16)
  804a80:	80001915 	stw	zero,100(r16)
  804a84:	80000015 	stw	zero,0(r16)
  804a88:	80000215 	stw	zero,8(r16)
  804a8c:	80000115 	stw	zero,4(r16)
  804a90:	80000415 	stw	zero,16(r16)
  804a94:	80000515 	stw	zero,20(r16)
  804a98:	80000615 	stw	zero,24(r16)
  804a9c:	81001704 	addi	r4,r16,92
  804aa0:	000b883a 	mov	r5,zero
  804aa4:	01800204 	movi	r6,8
  804aa8:	0803cbc0 	call	803cbc <memset>
  804aac:	8005883a 	mov	r2,r16
  804ab0:	80000c15 	stw	zero,48(r16)
  804ab4:	80000d15 	stw	zero,52(r16)
  804ab8:	80001115 	stw	zero,68(r16)
  804abc:	80001215 	stw	zero,72(r16)
  804ac0:	dfc00417 	ldw	ra,16(sp)
  804ac4:	dcc00317 	ldw	r19,12(sp)
  804ac8:	dc800217 	ldw	r18,8(sp)
  804acc:	dc400117 	ldw	r17,4(sp)
  804ad0:	dc000017 	ldw	r16,0(sp)
  804ad4:	dec00504 	addi	sp,sp,20
  804ad8:	f800283a 	ret
  804adc:	9809883a 	mov	r4,r19
  804ae0:	01400104 	movi	r5,4
  804ae4:	08049800 	call	804980 <__sfmoreglue>
  804ae8:	90800015 	stw	r2,0(r18)
  804aec:	103fde1e 	bne	r2,zero,804a68 <__alt_data_end+0xff804a68>
  804af0:	00800304 	movi	r2,12
  804af4:	98800015 	stw	r2,0(r19)
  804af8:	0005883a 	mov	r2,zero
  804afc:	003ff006 	br	804ac0 <__alt_data_end+0xff804ac0>

00804b00 <_cleanup>:
  804b00:	00802034 	movhi	r2,128
  804b04:	109db104 	addi	r2,r2,30404
  804b08:	11000017 	ldw	r4,0(r2)
  804b0c:	01402034 	movhi	r5,128
  804b10:	29572904 	addi	r5,r5,23716
  804b14:	08050401 	jmpi	805040 <_fwalk_reent>

00804b18 <__sinit>:
  804b18:	20800e17 	ldw	r2,56(r4)
  804b1c:	10000126 	beq	r2,zero,804b24 <__sinit+0xc>
  804b20:	f800283a 	ret
  804b24:	08047e41 	jmpi	8047e4 <__sinit.part.1>

00804b28 <__sfp_lock_acquire>:
  804b28:	f800283a 	ret

00804b2c <__sfp_lock_release>:
  804b2c:	f800283a 	ret

00804b30 <__sinit_lock_acquire>:
  804b30:	f800283a 	ret

00804b34 <__sinit_lock_release>:
  804b34:	f800283a 	ret

00804b38 <__fp_lock_all>:
  804b38:	00802034 	movhi	r2,128
  804b3c:	109db204 	addi	r2,r2,30408
  804b40:	11000017 	ldw	r4,0(r2)
  804b44:	01402034 	movhi	r5,128
  804b48:	2951f204 	addi	r5,r5,18376
  804b4c:	0804f7c1 	jmpi	804f7c <_fwalk>

00804b50 <__fp_unlock_all>:
  804b50:	00802034 	movhi	r2,128
  804b54:	109db204 	addi	r2,r2,30408
  804b58:	11000017 	ldw	r4,0(r2)
  804b5c:	01402034 	movhi	r5,128
  804b60:	2951f404 	addi	r5,r5,18384
  804b64:	0804f7c1 	jmpi	804f7c <_fwalk>

00804b68 <_malloc_trim_r>:
  804b68:	defffb04 	addi	sp,sp,-20
  804b6c:	dcc00315 	stw	r19,12(sp)
  804b70:	04c02034 	movhi	r19,128
  804b74:	dc800215 	stw	r18,8(sp)
  804b78:	dc400115 	stw	r17,4(sp)
  804b7c:	dc000015 	stw	r16,0(sp)
  804b80:	dfc00415 	stw	ra,16(sp)
  804b84:	2821883a 	mov	r16,r5
  804b88:	9cdca404 	addi	r19,r19,29328
  804b8c:	2025883a 	mov	r18,r4
  804b90:	08063840 	call	806384 <__malloc_lock>
  804b94:	98800217 	ldw	r2,8(r19)
  804b98:	14400117 	ldw	r17,4(r2)
  804b9c:	00bfff04 	movi	r2,-4
  804ba0:	88a2703a 	and	r17,r17,r2
  804ba4:	8c21c83a 	sub	r16,r17,r16
  804ba8:	8403fbc4 	addi	r16,r16,4079
  804bac:	8020d33a 	srli	r16,r16,12
  804bb0:	0083ffc4 	movi	r2,4095
  804bb4:	843fffc4 	addi	r16,r16,-1
  804bb8:	8020933a 	slli	r16,r16,12
  804bbc:	1400060e 	bge	r2,r16,804bd8 <_malloc_trim_r+0x70>
  804bc0:	9009883a 	mov	r4,r18
  804bc4:	000b883a 	mov	r5,zero
  804bc8:	0805a640 	call	805a64 <_sbrk_r>
  804bcc:	98c00217 	ldw	r3,8(r19)
  804bd0:	1c47883a 	add	r3,r3,r17
  804bd4:	10c00a26 	beq	r2,r3,804c00 <_malloc_trim_r+0x98>
  804bd8:	9009883a 	mov	r4,r18
  804bdc:	08063a40 	call	8063a4 <__malloc_unlock>
  804be0:	0005883a 	mov	r2,zero
  804be4:	dfc00417 	ldw	ra,16(sp)
  804be8:	dcc00317 	ldw	r19,12(sp)
  804bec:	dc800217 	ldw	r18,8(sp)
  804bf0:	dc400117 	ldw	r17,4(sp)
  804bf4:	dc000017 	ldw	r16,0(sp)
  804bf8:	dec00504 	addi	sp,sp,20
  804bfc:	f800283a 	ret
  804c00:	9009883a 	mov	r4,r18
  804c04:	040bc83a 	sub	r5,zero,r16
  804c08:	0805a640 	call	805a64 <_sbrk_r>
  804c0c:	00ffffc4 	movi	r3,-1
  804c10:	10c00d26 	beq	r2,r3,804c48 <_malloc_trim_r+0xe0>
  804c14:	00c02074 	movhi	r3,129
  804c18:	18e0e204 	addi	r3,r3,-31864
  804c1c:	18800017 	ldw	r2,0(r3)
  804c20:	99000217 	ldw	r4,8(r19)
  804c24:	8c23c83a 	sub	r17,r17,r16
  804c28:	8c400054 	ori	r17,r17,1
  804c2c:	1421c83a 	sub	r16,r2,r16
  804c30:	24400115 	stw	r17,4(r4)
  804c34:	9009883a 	mov	r4,r18
  804c38:	1c000015 	stw	r16,0(r3)
  804c3c:	08063a40 	call	8063a4 <__malloc_unlock>
  804c40:	00800044 	movi	r2,1
  804c44:	003fe706 	br	804be4 <__alt_data_end+0xff804be4>
  804c48:	9009883a 	mov	r4,r18
  804c4c:	000b883a 	mov	r5,zero
  804c50:	0805a640 	call	805a64 <_sbrk_r>
  804c54:	99000217 	ldw	r4,8(r19)
  804c58:	014003c4 	movi	r5,15
  804c5c:	1107c83a 	sub	r3,r2,r4
  804c60:	28ffdd0e 	bge	r5,r3,804bd8 <__alt_data_end+0xff804bd8>
  804c64:	01402034 	movhi	r5,128
  804c68:	295db304 	addi	r5,r5,30412
  804c6c:	29400017 	ldw	r5,0(r5)
  804c70:	18c00054 	ori	r3,r3,1
  804c74:	20c00115 	stw	r3,4(r4)
  804c78:	00c02074 	movhi	r3,129
  804c7c:	1145c83a 	sub	r2,r2,r5
  804c80:	18e0e204 	addi	r3,r3,-31864
  804c84:	18800015 	stw	r2,0(r3)
  804c88:	003fd306 	br	804bd8 <__alt_data_end+0xff804bd8>

00804c8c <_free_r>:
  804c8c:	28004c26 	beq	r5,zero,804dc0 <_free_r+0x134>
  804c90:	defffd04 	addi	sp,sp,-12
  804c94:	dc400115 	stw	r17,4(sp)
  804c98:	dc000015 	stw	r16,0(sp)
  804c9c:	2023883a 	mov	r17,r4
  804ca0:	2821883a 	mov	r16,r5
  804ca4:	dfc00215 	stw	ra,8(sp)
  804ca8:	08063840 	call	806384 <__malloc_lock>
  804cac:	813fff17 	ldw	r4,-4(r16)
  804cb0:	00bfff84 	movi	r2,-2
  804cb4:	02402034 	movhi	r9,128
  804cb8:	81bffe04 	addi	r6,r16,-8
  804cbc:	2084703a 	and	r2,r4,r2
  804cc0:	4a5ca404 	addi	r9,r9,29328
  804cc4:	308b883a 	add	r5,r6,r2
  804cc8:	2a000117 	ldw	r8,4(r5)
  804ccc:	49c00217 	ldw	r7,8(r9)
  804cd0:	00ffff04 	movi	r3,-4
  804cd4:	40c6703a 	and	r3,r8,r3
  804cd8:	39405326 	beq	r7,r5,804e28 <_free_r+0x19c>
  804cdc:	28c00115 	stw	r3,4(r5)
  804ce0:	2100004c 	andi	r4,r4,1
  804ce4:	2000091e 	bne	r4,zero,804d0c <_free_r+0x80>
  804ce8:	81fffe17 	ldw	r7,-8(r16)
  804cec:	4a000204 	addi	r8,r9,8
  804cf0:	31cdc83a 	sub	r6,r6,r7
  804cf4:	31000217 	ldw	r4,8(r6)
  804cf8:	11c5883a 	add	r2,r2,r7
  804cfc:	22006126 	beq	r4,r8,804e84 <_free_r+0x1f8>
  804d00:	31c00317 	ldw	r7,12(r6)
  804d04:	21c00315 	stw	r7,12(r4)
  804d08:	39000215 	stw	r4,8(r7)
  804d0c:	28c9883a 	add	r4,r5,r3
  804d10:	21c00117 	ldw	r7,4(r4)
  804d14:	39c0004c 	andi	r7,r7,1
  804d18:	38000d1e 	bne	r7,zero,804d50 <_free_r+0xc4>
  804d1c:	29000217 	ldw	r4,8(r5)
  804d20:	10c5883a 	add	r2,r2,r3
  804d24:	00c02034 	movhi	r3,128
  804d28:	18dca604 	addi	r3,r3,29336
  804d2c:	20c07526 	beq	r4,r3,804f04 <_free_r+0x278>
  804d30:	29c00317 	ldw	r7,12(r5)
  804d34:	11400054 	ori	r5,r2,1
  804d38:	3087883a 	add	r3,r6,r2
  804d3c:	21c00315 	stw	r7,12(r4)
  804d40:	39000215 	stw	r4,8(r7)
  804d44:	31400115 	stw	r5,4(r6)
  804d48:	18800015 	stw	r2,0(r3)
  804d4c:	00000406 	br	804d60 <_free_r+0xd4>
  804d50:	10c00054 	ori	r3,r2,1
  804d54:	30c00115 	stw	r3,4(r6)
  804d58:	3087883a 	add	r3,r6,r2
  804d5c:	18800015 	stw	r2,0(r3)
  804d60:	00c07fc4 	movi	r3,511
  804d64:	18801736 	bltu	r3,r2,804dc4 <_free_r+0x138>
  804d68:	1004d0fa 	srli	r2,r2,3
  804d6c:	01400044 	movi	r5,1
  804d70:	49000117 	ldw	r4,4(r9)
  804d74:	1087883a 	add	r3,r2,r2
  804d78:	18c7883a 	add	r3,r3,r3
  804d7c:	1005d0ba 	srai	r2,r2,2
  804d80:	18c7883a 	add	r3,r3,r3
  804d84:	1a47883a 	add	r3,r3,r9
  804d88:	19c00217 	ldw	r7,8(r3)
  804d8c:	2884983a 	sll	r2,r5,r2
  804d90:	30c00315 	stw	r3,12(r6)
  804d94:	31c00215 	stw	r7,8(r6)
  804d98:	1104b03a 	or	r2,r2,r4
  804d9c:	19800215 	stw	r6,8(r3)
  804da0:	48800115 	stw	r2,4(r9)
  804da4:	39800315 	stw	r6,12(r7)
  804da8:	8809883a 	mov	r4,r17
  804dac:	dfc00217 	ldw	ra,8(sp)
  804db0:	dc400117 	ldw	r17,4(sp)
  804db4:	dc000017 	ldw	r16,0(sp)
  804db8:	dec00304 	addi	sp,sp,12
  804dbc:	08063a41 	jmpi	8063a4 <__malloc_unlock>
  804dc0:	f800283a 	ret
  804dc4:	1006d27a 	srli	r3,r2,9
  804dc8:	01000104 	movi	r4,4
  804dcc:	20c04036 	bltu	r4,r3,804ed0 <_free_r+0x244>
  804dd0:	1006d1ba 	srli	r3,r2,6
  804dd4:	19400e04 	addi	r5,r3,56
  804dd8:	2947883a 	add	r3,r5,r5
  804ddc:	18c7883a 	add	r3,r3,r3
  804de0:	18c7883a 	add	r3,r3,r3
  804de4:	1a49883a 	add	r4,r3,r9
  804de8:	20c00217 	ldw	r3,8(r4)
  804dec:	01c02034 	movhi	r7,128
  804df0:	39dca404 	addi	r7,r7,29328
  804df4:	19003b26 	beq	r3,r4,804ee4 <_free_r+0x258>
  804df8:	01ffff04 	movi	r7,-4
  804dfc:	19400117 	ldw	r5,4(r3)
  804e00:	29ca703a 	and	r5,r5,r7
  804e04:	1140022e 	bgeu	r2,r5,804e10 <_free_r+0x184>
  804e08:	18c00217 	ldw	r3,8(r3)
  804e0c:	20fffb1e 	bne	r4,r3,804dfc <__alt_data_end+0xff804dfc>
  804e10:	18800317 	ldw	r2,12(r3)
  804e14:	30800315 	stw	r2,12(r6)
  804e18:	30c00215 	stw	r3,8(r6)
  804e1c:	11800215 	stw	r6,8(r2)
  804e20:	19800315 	stw	r6,12(r3)
  804e24:	003fe006 	br	804da8 <__alt_data_end+0xff804da8>
  804e28:	2100004c 	andi	r4,r4,1
  804e2c:	1885883a 	add	r2,r3,r2
  804e30:	2000071e 	bne	r4,zero,804e50 <_free_r+0x1c4>
  804e34:	817ffe17 	ldw	r5,-8(r16)
  804e38:	314dc83a 	sub	r6,r6,r5
  804e3c:	30c00317 	ldw	r3,12(r6)
  804e40:	31000217 	ldw	r4,8(r6)
  804e44:	1145883a 	add	r2,r2,r5
  804e48:	20c00315 	stw	r3,12(r4)
  804e4c:	19000215 	stw	r4,8(r3)
  804e50:	10c00054 	ori	r3,r2,1
  804e54:	30c00115 	stw	r3,4(r6)
  804e58:	00c02034 	movhi	r3,128
  804e5c:	18ddb404 	addi	r3,r3,30416
  804e60:	18c00017 	ldw	r3,0(r3)
  804e64:	49800215 	stw	r6,8(r9)
  804e68:	10ffcf36 	bltu	r2,r3,804da8 <__alt_data_end+0xff804da8>
  804e6c:	00802074 	movhi	r2,129
  804e70:	10a0e104 	addi	r2,r2,-31868
  804e74:	11400017 	ldw	r5,0(r2)
  804e78:	8809883a 	mov	r4,r17
  804e7c:	0804b680 	call	804b68 <_malloc_trim_r>
  804e80:	003fc906 	br	804da8 <__alt_data_end+0xff804da8>
  804e84:	28c9883a 	add	r4,r5,r3
  804e88:	21000117 	ldw	r4,4(r4)
  804e8c:	2100004c 	andi	r4,r4,1
  804e90:	20000a1e 	bne	r4,zero,804ebc <_free_r+0x230>
  804e94:	29000317 	ldw	r4,12(r5)
  804e98:	29400217 	ldw	r5,8(r5)
  804e9c:	10c5883a 	add	r2,r2,r3
  804ea0:	10c00054 	ori	r3,r2,1
  804ea4:	29000315 	stw	r4,12(r5)
  804ea8:	21400215 	stw	r5,8(r4)
  804eac:	30c00115 	stw	r3,4(r6)
  804eb0:	308d883a 	add	r6,r6,r2
  804eb4:	30800015 	stw	r2,0(r6)
  804eb8:	003fbb06 	br	804da8 <__alt_data_end+0xff804da8>
  804ebc:	10c00054 	ori	r3,r2,1
  804ec0:	30c00115 	stw	r3,4(r6)
  804ec4:	308d883a 	add	r6,r6,r2
  804ec8:	30800015 	stw	r2,0(r6)
  804ecc:	003fb606 	br	804da8 <__alt_data_end+0xff804da8>
  804ed0:	01000504 	movi	r4,20
  804ed4:	20c01436 	bltu	r4,r3,804f28 <_free_r+0x29c>
  804ed8:	194016c4 	addi	r5,r3,91
  804edc:	2947883a 	add	r3,r5,r5
  804ee0:	003fbe06 	br	804ddc <__alt_data_end+0xff804ddc>
  804ee4:	280bd0ba 	srai	r5,r5,2
  804ee8:	00800044 	movi	r2,1
  804eec:	39000117 	ldw	r4,4(r7)
  804ef0:	114a983a 	sll	r5,r2,r5
  804ef4:	1805883a 	mov	r2,r3
  804ef8:	2908b03a 	or	r4,r5,r4
  804efc:	39000115 	stw	r4,4(r7)
  804f00:	003fc406 	br	804e14 <__alt_data_end+0xff804e14>
  804f04:	49800515 	stw	r6,20(r9)
  804f08:	49800415 	stw	r6,16(r9)
  804f0c:	10c00054 	ori	r3,r2,1
  804f10:	31000315 	stw	r4,12(r6)
  804f14:	31000215 	stw	r4,8(r6)
  804f18:	30c00115 	stw	r3,4(r6)
  804f1c:	308d883a 	add	r6,r6,r2
  804f20:	30800015 	stw	r2,0(r6)
  804f24:	003fa006 	br	804da8 <__alt_data_end+0xff804da8>
  804f28:	01001504 	movi	r4,84
  804f2c:	20c00436 	bltu	r4,r3,804f40 <_free_r+0x2b4>
  804f30:	1006d33a 	srli	r3,r2,12
  804f34:	19401b84 	addi	r5,r3,110
  804f38:	2947883a 	add	r3,r5,r5
  804f3c:	003fa706 	br	804ddc <__alt_data_end+0xff804ddc>
  804f40:	01005504 	movi	r4,340
  804f44:	20c00436 	bltu	r4,r3,804f58 <_free_r+0x2cc>
  804f48:	1006d3fa 	srli	r3,r2,15
  804f4c:	19401dc4 	addi	r5,r3,119
  804f50:	2947883a 	add	r3,r5,r5
  804f54:	003fa106 	br	804ddc <__alt_data_end+0xff804ddc>
  804f58:	01015504 	movi	r4,1364
  804f5c:	20c00436 	bltu	r4,r3,804f70 <_free_r+0x2e4>
  804f60:	1006d4ba 	srli	r3,r2,18
  804f64:	19401f04 	addi	r5,r3,124
  804f68:	2947883a 	add	r3,r5,r5
  804f6c:	003f9b06 	br	804ddc <__alt_data_end+0xff804ddc>
  804f70:	00c03f04 	movi	r3,252
  804f74:	01401f84 	movi	r5,126
  804f78:	003f9806 	br	804ddc <__alt_data_end+0xff804ddc>

00804f7c <_fwalk>:
  804f7c:	defff704 	addi	sp,sp,-36
  804f80:	dd000415 	stw	r20,16(sp)
  804f84:	dfc00815 	stw	ra,32(sp)
  804f88:	ddc00715 	stw	r23,28(sp)
  804f8c:	dd800615 	stw	r22,24(sp)
  804f90:	dd400515 	stw	r21,20(sp)
  804f94:	dcc00315 	stw	r19,12(sp)
  804f98:	dc800215 	stw	r18,8(sp)
  804f9c:	dc400115 	stw	r17,4(sp)
  804fa0:	dc000015 	stw	r16,0(sp)
  804fa4:	2500b804 	addi	r20,r4,736
  804fa8:	a0002326 	beq	r20,zero,805038 <_fwalk+0xbc>
  804fac:	282b883a 	mov	r21,r5
  804fb0:	002f883a 	mov	r23,zero
  804fb4:	05800044 	movi	r22,1
  804fb8:	04ffffc4 	movi	r19,-1
  804fbc:	a4400117 	ldw	r17,4(r20)
  804fc0:	a4800217 	ldw	r18,8(r20)
  804fc4:	8c7fffc4 	addi	r17,r17,-1
  804fc8:	88000d16 	blt	r17,zero,805000 <_fwalk+0x84>
  804fcc:	94000304 	addi	r16,r18,12
  804fd0:	94800384 	addi	r18,r18,14
  804fd4:	80c0000b 	ldhu	r3,0(r16)
  804fd8:	8c7fffc4 	addi	r17,r17,-1
  804fdc:	813ffd04 	addi	r4,r16,-12
  804fe0:	b0c0042e 	bgeu	r22,r3,804ff4 <_fwalk+0x78>
  804fe4:	90c0000f 	ldh	r3,0(r18)
  804fe8:	1cc00226 	beq	r3,r19,804ff4 <_fwalk+0x78>
  804fec:	a83ee83a 	callr	r21
  804ff0:	b8aeb03a 	or	r23,r23,r2
  804ff4:	84001a04 	addi	r16,r16,104
  804ff8:	94801a04 	addi	r18,r18,104
  804ffc:	8cfff51e 	bne	r17,r19,804fd4 <__alt_data_end+0xff804fd4>
  805000:	a5000017 	ldw	r20,0(r20)
  805004:	a03fed1e 	bne	r20,zero,804fbc <__alt_data_end+0xff804fbc>
  805008:	b805883a 	mov	r2,r23
  80500c:	dfc00817 	ldw	ra,32(sp)
  805010:	ddc00717 	ldw	r23,28(sp)
  805014:	dd800617 	ldw	r22,24(sp)
  805018:	dd400517 	ldw	r21,20(sp)
  80501c:	dd000417 	ldw	r20,16(sp)
  805020:	dcc00317 	ldw	r19,12(sp)
  805024:	dc800217 	ldw	r18,8(sp)
  805028:	dc400117 	ldw	r17,4(sp)
  80502c:	dc000017 	ldw	r16,0(sp)
  805030:	dec00904 	addi	sp,sp,36
  805034:	f800283a 	ret
  805038:	002f883a 	mov	r23,zero
  80503c:	003ff206 	br	805008 <__alt_data_end+0xff805008>

00805040 <_fwalk_reent>:
  805040:	defff704 	addi	sp,sp,-36
  805044:	dd400515 	stw	r21,20(sp)
  805048:	dfc00815 	stw	ra,32(sp)
  80504c:	ddc00715 	stw	r23,28(sp)
  805050:	dd800615 	stw	r22,24(sp)
  805054:	dd000415 	stw	r20,16(sp)
  805058:	dcc00315 	stw	r19,12(sp)
  80505c:	dc800215 	stw	r18,8(sp)
  805060:	dc400115 	stw	r17,4(sp)
  805064:	dc000015 	stw	r16,0(sp)
  805068:	2540b804 	addi	r21,r4,736
  80506c:	a8002326 	beq	r21,zero,8050fc <_fwalk_reent+0xbc>
  805070:	2829883a 	mov	r20,r5
  805074:	202d883a 	mov	r22,r4
  805078:	002f883a 	mov	r23,zero
  80507c:	04c00044 	movi	r19,1
  805080:	04bfffc4 	movi	r18,-1
  805084:	ac400117 	ldw	r17,4(r21)
  805088:	ac000217 	ldw	r16,8(r21)
  80508c:	8c7fffc4 	addi	r17,r17,-1
  805090:	88000c16 	blt	r17,zero,8050c4 <_fwalk_reent+0x84>
  805094:	84000304 	addi	r16,r16,12
  805098:	80c0000b 	ldhu	r3,0(r16)
  80509c:	8c7fffc4 	addi	r17,r17,-1
  8050a0:	817ffd04 	addi	r5,r16,-12
  8050a4:	98c0052e 	bgeu	r19,r3,8050bc <_fwalk_reent+0x7c>
  8050a8:	80c0008f 	ldh	r3,2(r16)
  8050ac:	b009883a 	mov	r4,r22
  8050b0:	1c800226 	beq	r3,r18,8050bc <_fwalk_reent+0x7c>
  8050b4:	a03ee83a 	callr	r20
  8050b8:	b8aeb03a 	or	r23,r23,r2
  8050bc:	84001a04 	addi	r16,r16,104
  8050c0:	8cbff51e 	bne	r17,r18,805098 <__alt_data_end+0xff805098>
  8050c4:	ad400017 	ldw	r21,0(r21)
  8050c8:	a83fee1e 	bne	r21,zero,805084 <__alt_data_end+0xff805084>
  8050cc:	b805883a 	mov	r2,r23
  8050d0:	dfc00817 	ldw	ra,32(sp)
  8050d4:	ddc00717 	ldw	r23,28(sp)
  8050d8:	dd800617 	ldw	r22,24(sp)
  8050dc:	dd400517 	ldw	r21,20(sp)
  8050e0:	dd000417 	ldw	r20,16(sp)
  8050e4:	dcc00317 	ldw	r19,12(sp)
  8050e8:	dc800217 	ldw	r18,8(sp)
  8050ec:	dc400117 	ldw	r17,4(sp)
  8050f0:	dc000017 	ldw	r16,0(sp)
  8050f4:	dec00904 	addi	sp,sp,36
  8050f8:	f800283a 	ret
  8050fc:	002f883a 	mov	r23,zero
  805100:	003ff206 	br	8050cc <__alt_data_end+0xff8050cc>

00805104 <__smakebuf_r>:
  805104:	2880030b 	ldhu	r2,12(r5)
  805108:	10c0008c 	andi	r3,r2,2
  80510c:	1800401e 	bne	r3,zero,805210 <__smakebuf_r+0x10c>
  805110:	deffec04 	addi	sp,sp,-80
  805114:	dc000f15 	stw	r16,60(sp)
  805118:	2821883a 	mov	r16,r5
  80511c:	2940038f 	ldh	r5,14(r5)
  805120:	dc401015 	stw	r17,64(sp)
  805124:	dfc01315 	stw	ra,76(sp)
  805128:	dcc01215 	stw	r19,72(sp)
  80512c:	dc801115 	stw	r18,68(sp)
  805130:	2023883a 	mov	r17,r4
  805134:	28001b16 	blt	r5,zero,8051a4 <__smakebuf_r+0xa0>
  805138:	d80d883a 	mov	r6,sp
  80513c:	0805da80 	call	805da8 <_fstat_r>
  805140:	10001716 	blt	r2,zero,8051a0 <__smakebuf_r+0x9c>
  805144:	d8800117 	ldw	r2,4(sp)
  805148:	00e00014 	movui	r3,32768
  80514c:	10bc000c 	andi	r2,r2,61440
  805150:	10c03726 	beq	r2,r3,805230 <__smakebuf_r+0x12c>
  805154:	80c0030b 	ldhu	r3,12(r16)
  805158:	18c20014 	ori	r3,r3,2048
  80515c:	80c0030d 	sth	r3,12(r16)
  805160:	00c80004 	movi	r3,8192
  805164:	10c03c1e 	bne	r2,r3,805258 <__smakebuf_r+0x154>
  805168:	8140038f 	ldh	r5,14(r16)
  80516c:	8809883a 	mov	r4,r17
  805170:	0805e000 	call	805e00 <_isatty_r>
  805174:	10004e26 	beq	r2,zero,8052b0 <__smakebuf_r+0x1ac>
  805178:	8080030b 	ldhu	r2,12(r16)
  80517c:	04c00044 	movi	r19,1
  805180:	80c010c4 	addi	r3,r16,67
  805184:	14c4b03a 	or	r2,r2,r19
  805188:	8080030d 	sth	r2,12(r16)
  80518c:	80c00015 	stw	r3,0(r16)
  805190:	80c00415 	stw	r3,16(r16)
  805194:	84c00515 	stw	r19,20(r16)
  805198:	04810004 	movi	r18,1024
  80519c:	00000706 	br	8051bc <__smakebuf_r+0xb8>
  8051a0:	8080030b 	ldhu	r2,12(r16)
  8051a4:	10c0200c 	andi	r3,r2,128
  8051a8:	18001f1e 	bne	r3,zero,805228 <__smakebuf_r+0x124>
  8051ac:	04810004 	movi	r18,1024
  8051b0:	10820014 	ori	r2,r2,2048
  8051b4:	8080030d 	sth	r2,12(r16)
  8051b8:	0027883a 	mov	r19,zero
  8051bc:	8809883a 	mov	r4,r17
  8051c0:	900b883a 	mov	r5,r18
  8051c4:	08052bc0 	call	8052bc <_malloc_r>
  8051c8:	10002e26 	beq	r2,zero,805284 <__smakebuf_r+0x180>
  8051cc:	80c0030b 	ldhu	r3,12(r16)
  8051d0:	01002034 	movhi	r4,128
  8051d4:	2111f604 	addi	r4,r4,18392
  8051d8:	89000f15 	stw	r4,60(r17)
  8051dc:	18c02014 	ori	r3,r3,128
  8051e0:	80c0030d 	sth	r3,12(r16)
  8051e4:	80800015 	stw	r2,0(r16)
  8051e8:	80800415 	stw	r2,16(r16)
  8051ec:	84800515 	stw	r18,20(r16)
  8051f0:	98001c1e 	bne	r19,zero,805264 <__smakebuf_r+0x160>
  8051f4:	dfc01317 	ldw	ra,76(sp)
  8051f8:	dcc01217 	ldw	r19,72(sp)
  8051fc:	dc801117 	ldw	r18,68(sp)
  805200:	dc401017 	ldw	r17,64(sp)
  805204:	dc000f17 	ldw	r16,60(sp)
  805208:	dec01404 	addi	sp,sp,80
  80520c:	f800283a 	ret
  805210:	288010c4 	addi	r2,r5,67
  805214:	28800015 	stw	r2,0(r5)
  805218:	28800415 	stw	r2,16(r5)
  80521c:	00800044 	movi	r2,1
  805220:	28800515 	stw	r2,20(r5)
  805224:	f800283a 	ret
  805228:	04801004 	movi	r18,64
  80522c:	003fe006 	br	8051b0 <__alt_data_end+0xff8051b0>
  805230:	81000a17 	ldw	r4,40(r16)
  805234:	00c02034 	movhi	r3,128
  805238:	18d6e404 	addi	r3,r3,23440
  80523c:	20ffc51e 	bne	r4,r3,805154 <__alt_data_end+0xff805154>
  805240:	80c0030b 	ldhu	r3,12(r16)
  805244:	01010004 	movi	r4,1024
  805248:	81001315 	stw	r4,76(r16)
  80524c:	1906b03a 	or	r3,r3,r4
  805250:	80c0030d 	sth	r3,12(r16)
  805254:	003fc206 	br	805160 <__alt_data_end+0xff805160>
  805258:	0027883a 	mov	r19,zero
  80525c:	04810004 	movi	r18,1024
  805260:	003fd606 	br	8051bc <__alt_data_end+0xff8051bc>
  805264:	8140038f 	ldh	r5,14(r16)
  805268:	8809883a 	mov	r4,r17
  80526c:	0805e000 	call	805e00 <_isatty_r>
  805270:	103fe026 	beq	r2,zero,8051f4 <__alt_data_end+0xff8051f4>
  805274:	8080030b 	ldhu	r2,12(r16)
  805278:	10800054 	ori	r2,r2,1
  80527c:	8080030d 	sth	r2,12(r16)
  805280:	003fdc06 	br	8051f4 <__alt_data_end+0xff8051f4>
  805284:	8080030b 	ldhu	r2,12(r16)
  805288:	10c0800c 	andi	r3,r2,512
  80528c:	183fd91e 	bne	r3,zero,8051f4 <__alt_data_end+0xff8051f4>
  805290:	10800094 	ori	r2,r2,2
  805294:	80c010c4 	addi	r3,r16,67
  805298:	8080030d 	sth	r2,12(r16)
  80529c:	00800044 	movi	r2,1
  8052a0:	80c00015 	stw	r3,0(r16)
  8052a4:	80c00415 	stw	r3,16(r16)
  8052a8:	80800515 	stw	r2,20(r16)
  8052ac:	003fd106 	br	8051f4 <__alt_data_end+0xff8051f4>
  8052b0:	04c00044 	movi	r19,1
  8052b4:	04810004 	movi	r18,1024
  8052b8:	003fc006 	br	8051bc <__alt_data_end+0xff8051bc>

008052bc <_malloc_r>:
  8052bc:	defff504 	addi	sp,sp,-44
  8052c0:	dc800315 	stw	r18,12(sp)
  8052c4:	dfc00a15 	stw	ra,40(sp)
  8052c8:	df000915 	stw	fp,36(sp)
  8052cc:	ddc00815 	stw	r23,32(sp)
  8052d0:	dd800715 	stw	r22,28(sp)
  8052d4:	dd400615 	stw	r21,24(sp)
  8052d8:	dd000515 	stw	r20,20(sp)
  8052dc:	dcc00415 	stw	r19,16(sp)
  8052e0:	dc400215 	stw	r17,8(sp)
  8052e4:	dc000115 	stw	r16,4(sp)
  8052e8:	288002c4 	addi	r2,r5,11
  8052ec:	00c00584 	movi	r3,22
  8052f0:	2025883a 	mov	r18,r4
  8052f4:	18802a2e 	bgeu	r3,r2,8053a0 <_malloc_r+0xe4>
  8052f8:	047ffe04 	movi	r17,-8
  8052fc:	1462703a 	and	r17,r2,r17
  805300:	88009e16 	blt	r17,zero,80557c <_malloc_r+0x2c0>
  805304:	89409d36 	bltu	r17,r5,80557c <_malloc_r+0x2c0>
  805308:	08063840 	call	806384 <__malloc_lock>
  80530c:	00807dc4 	movi	r2,503
  805310:	14402736 	bltu	r2,r17,8053b0 <_malloc_r+0xf4>
  805314:	8806d0fa 	srli	r3,r17,3
  805318:	04c02034 	movhi	r19,128
  80531c:	9cdca404 	addi	r19,r19,29328
  805320:	18c5883a 	add	r2,r3,r3
  805324:	1085883a 	add	r2,r2,r2
  805328:	1085883a 	add	r2,r2,r2
  80532c:	9885883a 	add	r2,r19,r2
  805330:	14000317 	ldw	r16,12(r2)
  805334:	80814a26 	beq	r16,r2,805860 <_malloc_r+0x5a4>
  805338:	80c00117 	ldw	r3,4(r16)
  80533c:	81000317 	ldw	r4,12(r16)
  805340:	00bfff04 	movi	r2,-4
  805344:	1884703a 	and	r2,r3,r2
  805348:	81400217 	ldw	r5,8(r16)
  80534c:	8085883a 	add	r2,r16,r2
  805350:	10c00117 	ldw	r3,4(r2)
  805354:	29000315 	stw	r4,12(r5)
  805358:	21400215 	stw	r5,8(r4)
  80535c:	18c00054 	ori	r3,r3,1
  805360:	10c00115 	stw	r3,4(r2)
  805364:	9009883a 	mov	r4,r18
  805368:	08063a40 	call	8063a4 <__malloc_unlock>
  80536c:	80800204 	addi	r2,r16,8
  805370:	dfc00a17 	ldw	ra,40(sp)
  805374:	df000917 	ldw	fp,36(sp)
  805378:	ddc00817 	ldw	r23,32(sp)
  80537c:	dd800717 	ldw	r22,28(sp)
  805380:	dd400617 	ldw	r21,24(sp)
  805384:	dd000517 	ldw	r20,20(sp)
  805388:	dcc00417 	ldw	r19,16(sp)
  80538c:	dc800317 	ldw	r18,12(sp)
  805390:	dc400217 	ldw	r17,8(sp)
  805394:	dc000117 	ldw	r16,4(sp)
  805398:	dec00b04 	addi	sp,sp,44
  80539c:	f800283a 	ret
  8053a0:	04400404 	movi	r17,16
  8053a4:	89407536 	bltu	r17,r5,80557c <_malloc_r+0x2c0>
  8053a8:	08063840 	call	806384 <__malloc_lock>
  8053ac:	003fd906 	br	805314 <__alt_data_end+0xff805314>
  8053b0:	8806d27a 	srli	r3,r17,9
  8053b4:	18007526 	beq	r3,zero,80558c <_malloc_r+0x2d0>
  8053b8:	00800104 	movi	r2,4
  8053bc:	10c0ef36 	bltu	r2,r3,80577c <_malloc_r+0x4c0>
  8053c0:	8806d1ba 	srli	r3,r17,6
  8053c4:	19c00e04 	addi	r7,r3,56
  8053c8:	39cb883a 	add	r5,r7,r7
  8053cc:	04c02034 	movhi	r19,128
  8053d0:	294b883a 	add	r5,r5,r5
  8053d4:	9cdca404 	addi	r19,r19,29328
  8053d8:	294b883a 	add	r5,r5,r5
  8053dc:	994b883a 	add	r5,r19,r5
  8053e0:	2c000317 	ldw	r16,12(r5)
  8053e4:	2c000e26 	beq	r5,r16,805420 <_malloc_r+0x164>
  8053e8:	80800117 	ldw	r2,4(r16)
  8053ec:	01bfff04 	movi	r6,-4
  8053f0:	010003c4 	movi	r4,15
  8053f4:	1184703a 	and	r2,r2,r6
  8053f8:	1447c83a 	sub	r3,r2,r17
  8053fc:	20c00716 	blt	r4,r3,80541c <_malloc_r+0x160>
  805400:	1800650e 	bge	r3,zero,805598 <_malloc_r+0x2dc>
  805404:	84000317 	ldw	r16,12(r16)
  805408:	2c000526 	beq	r5,r16,805420 <_malloc_r+0x164>
  80540c:	80800117 	ldw	r2,4(r16)
  805410:	1184703a 	and	r2,r2,r6
  805414:	1447c83a 	sub	r3,r2,r17
  805418:	20fff90e 	bge	r4,r3,805400 <__alt_data_end+0xff805400>
  80541c:	39ffffc4 	addi	r7,r7,-1
  805420:	38c00044 	addi	r3,r7,1
  805424:	01802034 	movhi	r6,128
  805428:	9c000417 	ldw	r16,16(r19)
  80542c:	319ca404 	addi	r6,r6,29328
  805430:	32400204 	addi	r9,r6,8
  805434:	82410326 	beq	r16,r9,805844 <_malloc_r+0x588>
  805438:	81000117 	ldw	r4,4(r16)
  80543c:	00bfff04 	movi	r2,-4
  805440:	208e703a 	and	r7,r4,r2
  805444:	3c45c83a 	sub	r2,r7,r17
  805448:	010003c4 	movi	r4,15
  80544c:	2080ee16 	blt	r4,r2,805808 <_malloc_r+0x54c>
  805450:	32400515 	stw	r9,20(r6)
  805454:	32400415 	stw	r9,16(r6)
  805458:	1000510e 	bge	r2,zero,8055a0 <_malloc_r+0x2e4>
  80545c:	00807fc4 	movi	r2,511
  805460:	11c0ce36 	bltu	r2,r7,80579c <_malloc_r+0x4e0>
  805464:	3808d0fa 	srli	r4,r7,3
  805468:	01c00044 	movi	r7,1
  80546c:	30800117 	ldw	r2,4(r6)
  805470:	210b883a 	add	r5,r4,r4
  805474:	294b883a 	add	r5,r5,r5
  805478:	2009d0ba 	srai	r4,r4,2
  80547c:	294b883a 	add	r5,r5,r5
  805480:	298b883a 	add	r5,r5,r6
  805484:	2a000217 	ldw	r8,8(r5)
  805488:	3908983a 	sll	r4,r7,r4
  80548c:	81400315 	stw	r5,12(r16)
  805490:	82000215 	stw	r8,8(r16)
  805494:	2088b03a 	or	r4,r4,r2
  805498:	2c000215 	stw	r16,8(r5)
  80549c:	31000115 	stw	r4,4(r6)
  8054a0:	44000315 	stw	r16,12(r8)
  8054a4:	1805d0ba 	srai	r2,r3,2
  8054a8:	01400044 	movi	r5,1
  8054ac:	288a983a 	sll	r5,r5,r2
  8054b0:	21404336 	bltu	r4,r5,8055c0 <_malloc_r+0x304>
  8054b4:	2144703a 	and	r2,r4,r5
  8054b8:	10000a1e 	bne	r2,zero,8054e4 <_malloc_r+0x228>
  8054bc:	00bfff04 	movi	r2,-4
  8054c0:	294b883a 	add	r5,r5,r5
  8054c4:	1886703a 	and	r3,r3,r2
  8054c8:	2144703a 	and	r2,r4,r5
  8054cc:	18c00104 	addi	r3,r3,4
  8054d0:	1000041e 	bne	r2,zero,8054e4 <_malloc_r+0x228>
  8054d4:	294b883a 	add	r5,r5,r5
  8054d8:	2144703a 	and	r2,r4,r5
  8054dc:	18c00104 	addi	r3,r3,4
  8054e0:	103ffc26 	beq	r2,zero,8054d4 <__alt_data_end+0xff8054d4>
  8054e4:	023fff04 	movi	r8,-4
  8054e8:	01c003c4 	movi	r7,15
  8054ec:	18c5883a 	add	r2,r3,r3
  8054f0:	1085883a 	add	r2,r2,r2
  8054f4:	1085883a 	add	r2,r2,r2
  8054f8:	9895883a 	add	r10,r19,r2
  8054fc:	52c00304 	addi	r11,r10,12
  805500:	1819883a 	mov	r12,r3
  805504:	5c000017 	ldw	r16,0(r11)
  805508:	59bffd04 	addi	r6,r11,-12
  80550c:	8180041e 	bne	r16,r6,805520 <_malloc_r+0x264>
  805510:	0000ce06 	br	80584c <_malloc_r+0x590>
  805514:	2000d70e 	bge	r4,zero,805874 <_malloc_r+0x5b8>
  805518:	84000317 	ldw	r16,12(r16)
  80551c:	8180cb26 	beq	r16,r6,80584c <_malloc_r+0x590>
  805520:	80800117 	ldw	r2,4(r16)
  805524:	1204703a 	and	r2,r2,r8
  805528:	1449c83a 	sub	r4,r2,r17
  80552c:	393ff90e 	bge	r7,r4,805514 <__alt_data_end+0xff805514>
  805530:	80800317 	ldw	r2,12(r16)
  805534:	80c00217 	ldw	r3,8(r16)
  805538:	89400054 	ori	r5,r17,1
  80553c:	81400115 	stw	r5,4(r16)
  805540:	18800315 	stw	r2,12(r3)
  805544:	10c00215 	stw	r3,8(r2)
  805548:	8463883a 	add	r17,r16,r17
  80554c:	9c400515 	stw	r17,20(r19)
  805550:	9c400415 	stw	r17,16(r19)
  805554:	20800054 	ori	r2,r4,1
  805558:	88800115 	stw	r2,4(r17)
  80555c:	8a400315 	stw	r9,12(r17)
  805560:	8a400215 	stw	r9,8(r17)
  805564:	8923883a 	add	r17,r17,r4
  805568:	89000015 	stw	r4,0(r17)
  80556c:	9009883a 	mov	r4,r18
  805570:	08063a40 	call	8063a4 <__malloc_unlock>
  805574:	80800204 	addi	r2,r16,8
  805578:	003f7d06 	br	805370 <__alt_data_end+0xff805370>
  80557c:	00800304 	movi	r2,12
  805580:	90800015 	stw	r2,0(r18)
  805584:	0005883a 	mov	r2,zero
  805588:	003f7906 	br	805370 <__alt_data_end+0xff805370>
  80558c:	01401f84 	movi	r5,126
  805590:	01c00fc4 	movi	r7,63
  805594:	003f8d06 	br	8053cc <__alt_data_end+0xff8053cc>
  805598:	81000317 	ldw	r4,12(r16)
  80559c:	003f6a06 	br	805348 <__alt_data_end+0xff805348>
  8055a0:	81c5883a 	add	r2,r16,r7
  8055a4:	10c00117 	ldw	r3,4(r2)
  8055a8:	9009883a 	mov	r4,r18
  8055ac:	18c00054 	ori	r3,r3,1
  8055b0:	10c00115 	stw	r3,4(r2)
  8055b4:	08063a40 	call	8063a4 <__malloc_unlock>
  8055b8:	80800204 	addi	r2,r16,8
  8055bc:	003f6c06 	br	805370 <__alt_data_end+0xff805370>
  8055c0:	9c000217 	ldw	r16,8(r19)
  8055c4:	00bfff04 	movi	r2,-4
  8055c8:	85800117 	ldw	r22,4(r16)
  8055cc:	b0ac703a 	and	r22,r22,r2
  8055d0:	b4400336 	bltu	r22,r17,8055e0 <_malloc_r+0x324>
  8055d4:	b445c83a 	sub	r2,r22,r17
  8055d8:	00c003c4 	movi	r3,15
  8055dc:	18805d16 	blt	r3,r2,805754 <_malloc_r+0x498>
  8055e0:	05c02034 	movhi	r23,128
  8055e4:	00802074 	movhi	r2,129
  8055e8:	bdddb304 	addi	r23,r23,30412
  8055ec:	10a0e104 	addi	r2,r2,-31868
  8055f0:	15400017 	ldw	r21,0(r2)
  8055f4:	b9000017 	ldw	r4,0(r23)
  8055f8:	00ffffc4 	movi	r3,-1
  8055fc:	858d883a 	add	r6,r16,r22
  805600:	8d6b883a 	add	r21,r17,r21
  805604:	20c0e426 	beq	r4,r3,805998 <_malloc_r+0x6dc>
  805608:	ad4403c4 	addi	r21,r21,4111
  80560c:	00fc0004 	movi	r3,-4096
  805610:	a8ea703a 	and	r21,r21,r3
  805614:	9009883a 	mov	r4,r18
  805618:	a80b883a 	mov	r5,r21
  80561c:	d9800015 	stw	r6,0(sp)
  805620:	0805a640 	call	805a64 <_sbrk_r>
  805624:	00ffffc4 	movi	r3,-1
  805628:	1029883a 	mov	r20,r2
  80562c:	d9800017 	ldw	r6,0(sp)
  805630:	10c0a426 	beq	r2,r3,8058c4 <_malloc_r+0x608>
  805634:	1180a236 	bltu	r2,r6,8058c0 <_malloc_r+0x604>
  805638:	07002074 	movhi	fp,129
  80563c:	e720e204 	addi	fp,fp,-31864
  805640:	e0c00017 	ldw	r3,0(fp)
  805644:	a8c7883a 	add	r3,r21,r3
  805648:	e0c00015 	stw	r3,0(fp)
  80564c:	3500da26 	beq	r6,r20,8059b8 <_malloc_r+0x6fc>
  805650:	b9000017 	ldw	r4,0(r23)
  805654:	00bfffc4 	movi	r2,-1
  805658:	2080e426 	beq	r4,r2,8059ec <_malloc_r+0x730>
  80565c:	a185c83a 	sub	r2,r20,r6
  805660:	1885883a 	add	r2,r3,r2
  805664:	e0800015 	stw	r2,0(fp)
  805668:	a0c001cc 	andi	r3,r20,7
  80566c:	1800b526 	beq	r3,zero,805944 <_malloc_r+0x688>
  805670:	a0e9c83a 	sub	r20,r20,r3
  805674:	00840204 	movi	r2,4104
  805678:	a5000204 	addi	r20,r20,8
  80567c:	10c7c83a 	sub	r3,r2,r3
  805680:	a545883a 	add	r2,r20,r21
  805684:	1083ffcc 	andi	r2,r2,4095
  805688:	18abc83a 	sub	r21,r3,r2
  80568c:	9009883a 	mov	r4,r18
  805690:	a80b883a 	mov	r5,r21
  805694:	0805a640 	call	805a64 <_sbrk_r>
  805698:	00ffffc4 	movi	r3,-1
  80569c:	10c0d026 	beq	r2,r3,8059e0 <_malloc_r+0x724>
  8056a0:	1507c83a 	sub	r3,r2,r20
  8056a4:	a8c7883a 	add	r3,r21,r3
  8056a8:	18c00054 	ori	r3,r3,1
  8056ac:	e0800017 	ldw	r2,0(fp)
  8056b0:	9d000215 	stw	r20,8(r19)
  8056b4:	a0c00115 	stw	r3,4(r20)
  8056b8:	a887883a 	add	r3,r21,r2
  8056bc:	e0c00015 	stw	r3,0(fp)
  8056c0:	84c00e26 	beq	r16,r19,8056fc <_malloc_r+0x440>
  8056c4:	018003c4 	movi	r6,15
  8056c8:	3580a02e 	bgeu	r6,r22,80594c <_malloc_r+0x690>
  8056cc:	81400117 	ldw	r5,4(r16)
  8056d0:	013ffe04 	movi	r4,-8
  8056d4:	b0bffd04 	addi	r2,r22,-12
  8056d8:	1104703a 	and	r2,r2,r4
  8056dc:	2900004c 	andi	r4,r5,1
  8056e0:	1108b03a 	or	r4,r2,r4
  8056e4:	81000115 	stw	r4,4(r16)
  8056e8:	01400144 	movi	r5,5
  8056ec:	8089883a 	add	r4,r16,r2
  8056f0:	21400115 	stw	r5,4(r4)
  8056f4:	21400215 	stw	r5,8(r4)
  8056f8:	3080c036 	bltu	r6,r2,8059fc <_malloc_r+0x740>
  8056fc:	00802074 	movhi	r2,129
  805700:	10a0e004 	addi	r2,r2,-31872
  805704:	11000017 	ldw	r4,0(r2)
  805708:	20c0012e 	bgeu	r4,r3,805710 <_malloc_r+0x454>
  80570c:	10c00015 	stw	r3,0(r2)
  805710:	00802074 	movhi	r2,129
  805714:	10a0df04 	addi	r2,r2,-31876
  805718:	11000017 	ldw	r4,0(r2)
  80571c:	9c000217 	ldw	r16,8(r19)
  805720:	20c0012e 	bgeu	r4,r3,805728 <_malloc_r+0x46c>
  805724:	10c00015 	stw	r3,0(r2)
  805728:	80c00117 	ldw	r3,4(r16)
  80572c:	00bfff04 	movi	r2,-4
  805730:	1886703a 	and	r3,r3,r2
  805734:	1c45c83a 	sub	r2,r3,r17
  805738:	1c400236 	bltu	r3,r17,805744 <_malloc_r+0x488>
  80573c:	00c003c4 	movi	r3,15
  805740:	18800416 	blt	r3,r2,805754 <_malloc_r+0x498>
  805744:	9009883a 	mov	r4,r18
  805748:	08063a40 	call	8063a4 <__malloc_unlock>
  80574c:	0005883a 	mov	r2,zero
  805750:	003f0706 	br	805370 <__alt_data_end+0xff805370>
  805754:	88c00054 	ori	r3,r17,1
  805758:	80c00115 	stw	r3,4(r16)
  80575c:	8463883a 	add	r17,r16,r17
  805760:	10800054 	ori	r2,r2,1
  805764:	9c400215 	stw	r17,8(r19)
  805768:	88800115 	stw	r2,4(r17)
  80576c:	9009883a 	mov	r4,r18
  805770:	08063a40 	call	8063a4 <__malloc_unlock>
  805774:	80800204 	addi	r2,r16,8
  805778:	003efd06 	br	805370 <__alt_data_end+0xff805370>
  80577c:	00800504 	movi	r2,20
  805780:	10c0482e 	bgeu	r2,r3,8058a4 <_malloc_r+0x5e8>
  805784:	00801504 	movi	r2,84
  805788:	10c06836 	bltu	r2,r3,80592c <_malloc_r+0x670>
  80578c:	8806d33a 	srli	r3,r17,12
  805790:	19c01b84 	addi	r7,r3,110
  805794:	39cb883a 	add	r5,r7,r7
  805798:	003f0c06 	br	8053cc <__alt_data_end+0xff8053cc>
  80579c:	3804d27a 	srli	r2,r7,9
  8057a0:	01000104 	movi	r4,4
  8057a4:	2080422e 	bgeu	r4,r2,8058b0 <_malloc_r+0x5f4>
  8057a8:	01000504 	movi	r4,20
  8057ac:	20807c36 	bltu	r4,r2,8059a0 <_malloc_r+0x6e4>
  8057b0:	110016c4 	addi	r4,r2,91
  8057b4:	210b883a 	add	r5,r4,r4
  8057b8:	294b883a 	add	r5,r5,r5
  8057bc:	294b883a 	add	r5,r5,r5
  8057c0:	994b883a 	add	r5,r19,r5
  8057c4:	28800217 	ldw	r2,8(r5)
  8057c8:	02002034 	movhi	r8,128
  8057cc:	421ca404 	addi	r8,r8,29328
  8057d0:	11406326 	beq	r2,r5,805960 <_malloc_r+0x6a4>
  8057d4:	01bfff04 	movi	r6,-4
  8057d8:	11000117 	ldw	r4,4(r2)
  8057dc:	2188703a 	and	r4,r4,r6
  8057e0:	3900022e 	bgeu	r7,r4,8057ec <_malloc_r+0x530>
  8057e4:	10800217 	ldw	r2,8(r2)
  8057e8:	28bffb1e 	bne	r5,r2,8057d8 <__alt_data_end+0xff8057d8>
  8057ec:	11800317 	ldw	r6,12(r2)
  8057f0:	99000117 	ldw	r4,4(r19)
  8057f4:	81800315 	stw	r6,12(r16)
  8057f8:	80800215 	stw	r2,8(r16)
  8057fc:	34000215 	stw	r16,8(r6)
  805800:	14000315 	stw	r16,12(r2)
  805804:	003f2706 	br	8054a4 <__alt_data_end+0xff8054a4>
  805808:	88c00054 	ori	r3,r17,1
  80580c:	80c00115 	stw	r3,4(r16)
  805810:	8463883a 	add	r17,r16,r17
  805814:	34400515 	stw	r17,20(r6)
  805818:	34400415 	stw	r17,16(r6)
  80581c:	10c00054 	ori	r3,r2,1
  805820:	8a400315 	stw	r9,12(r17)
  805824:	8a400215 	stw	r9,8(r17)
  805828:	88c00115 	stw	r3,4(r17)
  80582c:	88a3883a 	add	r17,r17,r2
  805830:	88800015 	stw	r2,0(r17)
  805834:	9009883a 	mov	r4,r18
  805838:	08063a40 	call	8063a4 <__malloc_unlock>
  80583c:	80800204 	addi	r2,r16,8
  805840:	003ecb06 	br	805370 <__alt_data_end+0xff805370>
  805844:	31000117 	ldw	r4,4(r6)
  805848:	003f1606 	br	8054a4 <__alt_data_end+0xff8054a4>
  80584c:	63000044 	addi	r12,r12,1
  805850:	608000cc 	andi	r2,r12,3
  805854:	5ac00204 	addi	r11,r11,8
  805858:	103f2a1e 	bne	r2,zero,805504 <__alt_data_end+0xff805504>
  80585c:	00002106 	br	8058e4 <_malloc_r+0x628>
  805860:	80800204 	addi	r2,r16,8
  805864:	84000517 	ldw	r16,20(r16)
  805868:	143eb31e 	bne	r2,r16,805338 <__alt_data_end+0xff805338>
  80586c:	18c00084 	addi	r3,r3,2
  805870:	003eec06 	br	805424 <__alt_data_end+0xff805424>
  805874:	8085883a 	add	r2,r16,r2
  805878:	10c00117 	ldw	r3,4(r2)
  80587c:	81000317 	ldw	r4,12(r16)
  805880:	81400217 	ldw	r5,8(r16)
  805884:	18c00054 	ori	r3,r3,1
  805888:	10c00115 	stw	r3,4(r2)
  80588c:	29000315 	stw	r4,12(r5)
  805890:	21400215 	stw	r5,8(r4)
  805894:	9009883a 	mov	r4,r18
  805898:	08063a40 	call	8063a4 <__malloc_unlock>
  80589c:	80800204 	addi	r2,r16,8
  8058a0:	003eb306 	br	805370 <__alt_data_end+0xff805370>
  8058a4:	19c016c4 	addi	r7,r3,91
  8058a8:	39cb883a 	add	r5,r7,r7
  8058ac:	003ec706 	br	8053cc <__alt_data_end+0xff8053cc>
  8058b0:	3804d1ba 	srli	r2,r7,6
  8058b4:	11000e04 	addi	r4,r2,56
  8058b8:	210b883a 	add	r5,r4,r4
  8058bc:	003fbe06 	br	8057b8 <__alt_data_end+0xff8057b8>
  8058c0:	84ff5d26 	beq	r16,r19,805638 <__alt_data_end+0xff805638>
  8058c4:	9c000217 	ldw	r16,8(r19)
  8058c8:	00bfff04 	movi	r2,-4
  8058cc:	80c00117 	ldw	r3,4(r16)
  8058d0:	1886703a 	and	r3,r3,r2
  8058d4:	003f9706 	br	805734 <__alt_data_end+0xff805734>
  8058d8:	52800017 	ldw	r10,0(r10)
  8058dc:	18ffffc4 	addi	r3,r3,-1
  8058e0:	50805c1e 	bne	r10,r2,805a54 <_malloc_r+0x798>
  8058e4:	190000cc 	andi	r4,r3,3
  8058e8:	50bffe04 	addi	r2,r10,-8
  8058ec:	203ffa1e 	bne	r4,zero,8058d8 <__alt_data_end+0xff8058d8>
  8058f0:	98800117 	ldw	r2,4(r19)
  8058f4:	0146303a 	nor	r3,zero,r5
  8058f8:	1884703a 	and	r2,r3,r2
  8058fc:	98800115 	stw	r2,4(r19)
  805900:	294b883a 	add	r5,r5,r5
  805904:	117f2e36 	bltu	r2,r5,8055c0 <__alt_data_end+0xff8055c0>
  805908:	283f2d26 	beq	r5,zero,8055c0 <__alt_data_end+0xff8055c0>
  80590c:	1146703a 	and	r3,r2,r5
  805910:	1800521e 	bne	r3,zero,805a5c <_malloc_r+0x7a0>
  805914:	6007883a 	mov	r3,r12
  805918:	294b883a 	add	r5,r5,r5
  80591c:	1148703a 	and	r4,r2,r5
  805920:	18c00104 	addi	r3,r3,4
  805924:	203ffc26 	beq	r4,zero,805918 <__alt_data_end+0xff805918>
  805928:	003ef006 	br	8054ec <__alt_data_end+0xff8054ec>
  80592c:	00805504 	movi	r2,340
  805930:	10c01336 	bltu	r2,r3,805980 <_malloc_r+0x6c4>
  805934:	8806d3fa 	srli	r3,r17,15
  805938:	19c01dc4 	addi	r7,r3,119
  80593c:	39cb883a 	add	r5,r7,r7
  805940:	003ea206 	br	8053cc <__alt_data_end+0xff8053cc>
  805944:	00c40004 	movi	r3,4096
  805948:	003f4d06 	br	805680 <__alt_data_end+0xff805680>
  80594c:	00800044 	movi	r2,1
  805950:	a0800115 	stw	r2,4(r20)
  805954:	a021883a 	mov	r16,r20
  805958:	0007883a 	mov	r3,zero
  80595c:	003f7506 	br	805734 <__alt_data_end+0xff805734>
  805960:	200bd0ba 	srai	r5,r4,2
  805964:	01800044 	movi	r6,1
  805968:	41000117 	ldw	r4,4(r8)
  80596c:	314a983a 	sll	r5,r6,r5
  805970:	100d883a 	mov	r6,r2
  805974:	2908b03a 	or	r4,r5,r4
  805978:	41000115 	stw	r4,4(r8)
  80597c:	003f9d06 	br	8057f4 <__alt_data_end+0xff8057f4>
  805980:	00815504 	movi	r2,1364
  805984:	10c01336 	bltu	r2,r3,8059d4 <_malloc_r+0x718>
  805988:	8806d4ba 	srli	r3,r17,18
  80598c:	19c01f04 	addi	r7,r3,124
  805990:	39cb883a 	add	r5,r7,r7
  805994:	003e8d06 	br	8053cc <__alt_data_end+0xff8053cc>
  805998:	ad400404 	addi	r21,r21,16
  80599c:	003f1d06 	br	805614 <__alt_data_end+0xff805614>
  8059a0:	01001504 	movi	r4,84
  8059a4:	20801c36 	bltu	r4,r2,805a18 <_malloc_r+0x75c>
  8059a8:	3804d33a 	srli	r2,r7,12
  8059ac:	11001b84 	addi	r4,r2,110
  8059b0:	210b883a 	add	r5,r4,r4
  8059b4:	003f8006 	br	8057b8 <__alt_data_end+0xff8057b8>
  8059b8:	3083ffcc 	andi	r2,r6,4095
  8059bc:	103f241e 	bne	r2,zero,805650 <__alt_data_end+0xff805650>
  8059c0:	99000217 	ldw	r4,8(r19)
  8059c4:	ad85883a 	add	r2,r21,r22
  8059c8:	10800054 	ori	r2,r2,1
  8059cc:	20800115 	stw	r2,4(r4)
  8059d0:	003f4a06 	br	8056fc <__alt_data_end+0xff8056fc>
  8059d4:	01403f04 	movi	r5,252
  8059d8:	01c01f84 	movi	r7,126
  8059dc:	003e7b06 	br	8053cc <__alt_data_end+0xff8053cc>
  8059e0:	00c00044 	movi	r3,1
  8059e4:	002b883a 	mov	r21,zero
  8059e8:	003f3006 	br	8056ac <__alt_data_end+0xff8056ac>
  8059ec:	00802034 	movhi	r2,128
  8059f0:	109db304 	addi	r2,r2,30412
  8059f4:	15000015 	stw	r20,0(r2)
  8059f8:	003f1b06 	br	805668 <__alt_data_end+0xff805668>
  8059fc:	9009883a 	mov	r4,r18
  805a00:	81400204 	addi	r5,r16,8
  805a04:	0804c8c0 	call	804c8c <_free_r>
  805a08:	00802074 	movhi	r2,129
  805a0c:	10a0e204 	addi	r2,r2,-31864
  805a10:	10c00017 	ldw	r3,0(r2)
  805a14:	003f3906 	br	8056fc <__alt_data_end+0xff8056fc>
  805a18:	01005504 	movi	r4,340
  805a1c:	20800436 	bltu	r4,r2,805a30 <_malloc_r+0x774>
  805a20:	3804d3fa 	srli	r2,r7,15
  805a24:	11001dc4 	addi	r4,r2,119
  805a28:	210b883a 	add	r5,r4,r4
  805a2c:	003f6206 	br	8057b8 <__alt_data_end+0xff8057b8>
  805a30:	01015504 	movi	r4,1364
  805a34:	20800436 	bltu	r4,r2,805a48 <_malloc_r+0x78c>
  805a38:	3804d4ba 	srli	r2,r7,18
  805a3c:	11001f04 	addi	r4,r2,124
  805a40:	210b883a 	add	r5,r4,r4
  805a44:	003f5c06 	br	8057b8 <__alt_data_end+0xff8057b8>
  805a48:	01403f04 	movi	r5,252
  805a4c:	01001f84 	movi	r4,126
  805a50:	003f5906 	br	8057b8 <__alt_data_end+0xff8057b8>
  805a54:	98800117 	ldw	r2,4(r19)
  805a58:	003fa906 	br	805900 <__alt_data_end+0xff805900>
  805a5c:	6007883a 	mov	r3,r12
  805a60:	003ea206 	br	8054ec <__alt_data_end+0xff8054ec>

00805a64 <_sbrk_r>:
  805a64:	defffd04 	addi	sp,sp,-12
  805a68:	dc000015 	stw	r16,0(sp)
  805a6c:	04002074 	movhi	r16,129
  805a70:	dc400115 	stw	r17,4(sp)
  805a74:	8420de04 	addi	r16,r16,-31880
  805a78:	2023883a 	mov	r17,r4
  805a7c:	2809883a 	mov	r4,r5
  805a80:	dfc00215 	stw	ra,8(sp)
  805a84:	80000015 	stw	zero,0(r16)
  805a88:	08065100 	call	806510 <sbrk>
  805a8c:	00ffffc4 	movi	r3,-1
  805a90:	10c00526 	beq	r2,r3,805aa8 <_sbrk_r+0x44>
  805a94:	dfc00217 	ldw	ra,8(sp)
  805a98:	dc400117 	ldw	r17,4(sp)
  805a9c:	dc000017 	ldw	r16,0(sp)
  805aa0:	dec00304 	addi	sp,sp,12
  805aa4:	f800283a 	ret
  805aa8:	80c00017 	ldw	r3,0(r16)
  805aac:	183ff926 	beq	r3,zero,805a94 <__alt_data_end+0xff805a94>
  805ab0:	88c00015 	stw	r3,0(r17)
  805ab4:	003ff706 	br	805a94 <__alt_data_end+0xff805a94>

00805ab8 <__sread>:
  805ab8:	defffe04 	addi	sp,sp,-8
  805abc:	dc000015 	stw	r16,0(sp)
  805ac0:	2821883a 	mov	r16,r5
  805ac4:	2940038f 	ldh	r5,14(r5)
  805ac8:	dfc00115 	stw	ra,4(sp)
  805acc:	0805eb00 	call	805eb0 <_read_r>
  805ad0:	10000716 	blt	r2,zero,805af0 <__sread+0x38>
  805ad4:	80c01417 	ldw	r3,80(r16)
  805ad8:	1887883a 	add	r3,r3,r2
  805adc:	80c01415 	stw	r3,80(r16)
  805ae0:	dfc00117 	ldw	ra,4(sp)
  805ae4:	dc000017 	ldw	r16,0(sp)
  805ae8:	dec00204 	addi	sp,sp,8
  805aec:	f800283a 	ret
  805af0:	80c0030b 	ldhu	r3,12(r16)
  805af4:	18fbffcc 	andi	r3,r3,61439
  805af8:	80c0030d 	sth	r3,12(r16)
  805afc:	dfc00117 	ldw	ra,4(sp)
  805b00:	dc000017 	ldw	r16,0(sp)
  805b04:	dec00204 	addi	sp,sp,8
  805b08:	f800283a 	ret

00805b0c <__seofread>:
  805b0c:	0005883a 	mov	r2,zero
  805b10:	f800283a 	ret

00805b14 <__swrite>:
  805b14:	2880030b 	ldhu	r2,12(r5)
  805b18:	defffb04 	addi	sp,sp,-20
  805b1c:	dcc00315 	stw	r19,12(sp)
  805b20:	dc800215 	stw	r18,8(sp)
  805b24:	dc400115 	stw	r17,4(sp)
  805b28:	dc000015 	stw	r16,0(sp)
  805b2c:	dfc00415 	stw	ra,16(sp)
  805b30:	10c0400c 	andi	r3,r2,256
  805b34:	2821883a 	mov	r16,r5
  805b38:	2027883a 	mov	r19,r4
  805b3c:	3025883a 	mov	r18,r6
  805b40:	3823883a 	mov	r17,r7
  805b44:	18000526 	beq	r3,zero,805b5c <__swrite+0x48>
  805b48:	2940038f 	ldh	r5,14(r5)
  805b4c:	000d883a 	mov	r6,zero
  805b50:	01c00084 	movi	r7,2
  805b54:	0805e540 	call	805e54 <_lseek_r>
  805b58:	8080030b 	ldhu	r2,12(r16)
  805b5c:	8140038f 	ldh	r5,14(r16)
  805b60:	10bbffcc 	andi	r2,r2,61439
  805b64:	9809883a 	mov	r4,r19
  805b68:	900d883a 	mov	r6,r18
  805b6c:	880f883a 	mov	r7,r17
  805b70:	8080030d 	sth	r2,12(r16)
  805b74:	dfc00417 	ldw	ra,16(sp)
  805b78:	dcc00317 	ldw	r19,12(sp)
  805b7c:	dc800217 	ldw	r18,8(sp)
  805b80:	dc400117 	ldw	r17,4(sp)
  805b84:	dc000017 	ldw	r16,0(sp)
  805b88:	dec00504 	addi	sp,sp,20
  805b8c:	0805bf41 	jmpi	805bf4 <_write_r>

00805b90 <__sseek>:
  805b90:	defffe04 	addi	sp,sp,-8
  805b94:	dc000015 	stw	r16,0(sp)
  805b98:	2821883a 	mov	r16,r5
  805b9c:	2940038f 	ldh	r5,14(r5)
  805ba0:	dfc00115 	stw	ra,4(sp)
  805ba4:	0805e540 	call	805e54 <_lseek_r>
  805ba8:	00ffffc4 	movi	r3,-1
  805bac:	10c00826 	beq	r2,r3,805bd0 <__sseek+0x40>
  805bb0:	80c0030b 	ldhu	r3,12(r16)
  805bb4:	80801415 	stw	r2,80(r16)
  805bb8:	18c40014 	ori	r3,r3,4096
  805bbc:	80c0030d 	sth	r3,12(r16)
  805bc0:	dfc00117 	ldw	ra,4(sp)
  805bc4:	dc000017 	ldw	r16,0(sp)
  805bc8:	dec00204 	addi	sp,sp,8
  805bcc:	f800283a 	ret
  805bd0:	80c0030b 	ldhu	r3,12(r16)
  805bd4:	18fbffcc 	andi	r3,r3,61439
  805bd8:	80c0030d 	sth	r3,12(r16)
  805bdc:	dfc00117 	ldw	ra,4(sp)
  805be0:	dc000017 	ldw	r16,0(sp)
  805be4:	dec00204 	addi	sp,sp,8
  805be8:	f800283a 	ret

00805bec <__sclose>:
  805bec:	2940038f 	ldh	r5,14(r5)
  805bf0:	0805c501 	jmpi	805c50 <_close_r>

00805bf4 <_write_r>:
  805bf4:	defffd04 	addi	sp,sp,-12
  805bf8:	dc000015 	stw	r16,0(sp)
  805bfc:	04002074 	movhi	r16,129
  805c00:	dc400115 	stw	r17,4(sp)
  805c04:	8420de04 	addi	r16,r16,-31880
  805c08:	2023883a 	mov	r17,r4
  805c0c:	2809883a 	mov	r4,r5
  805c10:	300b883a 	mov	r5,r6
  805c14:	380d883a 	mov	r6,r7
  805c18:	dfc00215 	stw	ra,8(sp)
  805c1c:	80000015 	stw	zero,0(r16)
  805c20:	08066100 	call	806610 <write>
  805c24:	00ffffc4 	movi	r3,-1
  805c28:	10c00526 	beq	r2,r3,805c40 <_write_r+0x4c>
  805c2c:	dfc00217 	ldw	ra,8(sp)
  805c30:	dc400117 	ldw	r17,4(sp)
  805c34:	dc000017 	ldw	r16,0(sp)
  805c38:	dec00304 	addi	sp,sp,12
  805c3c:	f800283a 	ret
  805c40:	80c00017 	ldw	r3,0(r16)
  805c44:	183ff926 	beq	r3,zero,805c2c <__alt_data_end+0xff805c2c>
  805c48:	88c00015 	stw	r3,0(r17)
  805c4c:	003ff706 	br	805c2c <__alt_data_end+0xff805c2c>

00805c50 <_close_r>:
  805c50:	defffd04 	addi	sp,sp,-12
  805c54:	dc000015 	stw	r16,0(sp)
  805c58:	04002074 	movhi	r16,129
  805c5c:	dc400115 	stw	r17,4(sp)
  805c60:	8420de04 	addi	r16,r16,-31880
  805c64:	2023883a 	mov	r17,r4
  805c68:	2809883a 	mov	r4,r5
  805c6c:	dfc00215 	stw	ra,8(sp)
  805c70:	80000015 	stw	zero,0(r16)
  805c74:	0802b200 	call	802b20 <close>
  805c78:	00ffffc4 	movi	r3,-1
  805c7c:	10c00526 	beq	r2,r3,805c94 <_close_r+0x44>
  805c80:	dfc00217 	ldw	ra,8(sp)
  805c84:	dc400117 	ldw	r17,4(sp)
  805c88:	dc000017 	ldw	r16,0(sp)
  805c8c:	dec00304 	addi	sp,sp,12
  805c90:	f800283a 	ret
  805c94:	80c00017 	ldw	r3,0(r16)
  805c98:	183ff926 	beq	r3,zero,805c80 <__alt_data_end+0xff805c80>
  805c9c:	88c00015 	stw	r3,0(r17)
  805ca0:	003ff706 	br	805c80 <__alt_data_end+0xff805c80>

00805ca4 <_fclose_r>:
  805ca4:	28003926 	beq	r5,zero,805d8c <_fclose_r+0xe8>
  805ca8:	defffc04 	addi	sp,sp,-16
  805cac:	dc400115 	stw	r17,4(sp)
  805cb0:	dc000015 	stw	r16,0(sp)
  805cb4:	dfc00315 	stw	ra,12(sp)
  805cb8:	dc800215 	stw	r18,8(sp)
  805cbc:	2023883a 	mov	r17,r4
  805cc0:	2821883a 	mov	r16,r5
  805cc4:	20000226 	beq	r4,zero,805cd0 <_fclose_r+0x2c>
  805cc8:	20800e17 	ldw	r2,56(r4)
  805ccc:	10002726 	beq	r2,zero,805d6c <_fclose_r+0xc8>
  805cd0:	8080030f 	ldh	r2,12(r16)
  805cd4:	1000071e 	bne	r2,zero,805cf4 <_fclose_r+0x50>
  805cd8:	0005883a 	mov	r2,zero
  805cdc:	dfc00317 	ldw	ra,12(sp)
  805ce0:	dc800217 	ldw	r18,8(sp)
  805ce4:	dc400117 	ldw	r17,4(sp)
  805ce8:	dc000017 	ldw	r16,0(sp)
  805cec:	dec00404 	addi	sp,sp,16
  805cf0:	f800283a 	ret
  805cf4:	8809883a 	mov	r4,r17
  805cf8:	800b883a 	mov	r5,r16
  805cfc:	08045340 	call	804534 <__sflush_r>
  805d00:	1025883a 	mov	r18,r2
  805d04:	80800b17 	ldw	r2,44(r16)
  805d08:	10000426 	beq	r2,zero,805d1c <_fclose_r+0x78>
  805d0c:	81400717 	ldw	r5,28(r16)
  805d10:	8809883a 	mov	r4,r17
  805d14:	103ee83a 	callr	r2
  805d18:	10001616 	blt	r2,zero,805d74 <_fclose_r+0xd0>
  805d1c:	8080030b 	ldhu	r2,12(r16)
  805d20:	1080200c 	andi	r2,r2,128
  805d24:	1000151e 	bne	r2,zero,805d7c <_fclose_r+0xd8>
  805d28:	81400c17 	ldw	r5,48(r16)
  805d2c:	28000526 	beq	r5,zero,805d44 <_fclose_r+0xa0>
  805d30:	80801004 	addi	r2,r16,64
  805d34:	28800226 	beq	r5,r2,805d40 <_fclose_r+0x9c>
  805d38:	8809883a 	mov	r4,r17
  805d3c:	0804c8c0 	call	804c8c <_free_r>
  805d40:	80000c15 	stw	zero,48(r16)
  805d44:	81401117 	ldw	r5,68(r16)
  805d48:	28000326 	beq	r5,zero,805d58 <_fclose_r+0xb4>
  805d4c:	8809883a 	mov	r4,r17
  805d50:	0804c8c0 	call	804c8c <_free_r>
  805d54:	80001115 	stw	zero,68(r16)
  805d58:	0804b280 	call	804b28 <__sfp_lock_acquire>
  805d5c:	8000030d 	sth	zero,12(r16)
  805d60:	0804b2c0 	call	804b2c <__sfp_lock_release>
  805d64:	9005883a 	mov	r2,r18
  805d68:	003fdc06 	br	805cdc <__alt_data_end+0xff805cdc>
  805d6c:	0804b180 	call	804b18 <__sinit>
  805d70:	003fd706 	br	805cd0 <__alt_data_end+0xff805cd0>
  805d74:	04bfffc4 	movi	r18,-1
  805d78:	003fe806 	br	805d1c <__alt_data_end+0xff805d1c>
  805d7c:	81400417 	ldw	r5,16(r16)
  805d80:	8809883a 	mov	r4,r17
  805d84:	0804c8c0 	call	804c8c <_free_r>
  805d88:	003fe706 	br	805d28 <__alt_data_end+0xff805d28>
  805d8c:	0005883a 	mov	r2,zero
  805d90:	f800283a 	ret

00805d94 <fclose>:
  805d94:	00802034 	movhi	r2,128
  805d98:	109db204 	addi	r2,r2,30408
  805d9c:	200b883a 	mov	r5,r4
  805da0:	11000017 	ldw	r4,0(r2)
  805da4:	0805ca41 	jmpi	805ca4 <_fclose_r>

00805da8 <_fstat_r>:
  805da8:	defffd04 	addi	sp,sp,-12
  805dac:	dc000015 	stw	r16,0(sp)
  805db0:	04002074 	movhi	r16,129
  805db4:	dc400115 	stw	r17,4(sp)
  805db8:	8420de04 	addi	r16,r16,-31880
  805dbc:	2023883a 	mov	r17,r4
  805dc0:	2809883a 	mov	r4,r5
  805dc4:	300b883a 	mov	r5,r6
  805dc8:	dfc00215 	stw	ra,8(sp)
  805dcc:	80000015 	stw	zero,0(r16)
  805dd0:	08060bc0 	call	8060bc <fstat>
  805dd4:	00ffffc4 	movi	r3,-1
  805dd8:	10c00526 	beq	r2,r3,805df0 <_fstat_r+0x48>
  805ddc:	dfc00217 	ldw	ra,8(sp)
  805de0:	dc400117 	ldw	r17,4(sp)
  805de4:	dc000017 	ldw	r16,0(sp)
  805de8:	dec00304 	addi	sp,sp,12
  805dec:	f800283a 	ret
  805df0:	80c00017 	ldw	r3,0(r16)
  805df4:	183ff926 	beq	r3,zero,805ddc <__alt_data_end+0xff805ddc>
  805df8:	88c00015 	stw	r3,0(r17)
  805dfc:	003ff706 	br	805ddc <__alt_data_end+0xff805ddc>

00805e00 <_isatty_r>:
  805e00:	defffd04 	addi	sp,sp,-12
  805e04:	dc000015 	stw	r16,0(sp)
  805e08:	04002074 	movhi	r16,129
  805e0c:	dc400115 	stw	r17,4(sp)
  805e10:	8420de04 	addi	r16,r16,-31880
  805e14:	2023883a 	mov	r17,r4
  805e18:	2809883a 	mov	r4,r5
  805e1c:	dfc00215 	stw	ra,8(sp)
  805e20:	80000015 	stw	zero,0(r16)
  805e24:	08061bc0 	call	8061bc <isatty>
  805e28:	00ffffc4 	movi	r3,-1
  805e2c:	10c00526 	beq	r2,r3,805e44 <_isatty_r+0x44>
  805e30:	dfc00217 	ldw	ra,8(sp)
  805e34:	dc400117 	ldw	r17,4(sp)
  805e38:	dc000017 	ldw	r16,0(sp)
  805e3c:	dec00304 	addi	sp,sp,12
  805e40:	f800283a 	ret
  805e44:	80c00017 	ldw	r3,0(r16)
  805e48:	183ff926 	beq	r3,zero,805e30 <__alt_data_end+0xff805e30>
  805e4c:	88c00015 	stw	r3,0(r17)
  805e50:	003ff706 	br	805e30 <__alt_data_end+0xff805e30>

00805e54 <_lseek_r>:
  805e54:	defffd04 	addi	sp,sp,-12
  805e58:	dc000015 	stw	r16,0(sp)
  805e5c:	04002074 	movhi	r16,129
  805e60:	dc400115 	stw	r17,4(sp)
  805e64:	8420de04 	addi	r16,r16,-31880
  805e68:	2023883a 	mov	r17,r4
  805e6c:	2809883a 	mov	r4,r5
  805e70:	300b883a 	mov	r5,r6
  805e74:	380d883a 	mov	r6,r7
  805e78:	dfc00215 	stw	ra,8(sp)
  805e7c:	80000015 	stw	zero,0(r16)
  805e80:	08062b00 	call	8062b0 <lseek>
  805e84:	00ffffc4 	movi	r3,-1
  805e88:	10c00526 	beq	r2,r3,805ea0 <_lseek_r+0x4c>
  805e8c:	dfc00217 	ldw	ra,8(sp)
  805e90:	dc400117 	ldw	r17,4(sp)
  805e94:	dc000017 	ldw	r16,0(sp)
  805e98:	dec00304 	addi	sp,sp,12
  805e9c:	f800283a 	ret
  805ea0:	80c00017 	ldw	r3,0(r16)
  805ea4:	183ff926 	beq	r3,zero,805e8c <__alt_data_end+0xff805e8c>
  805ea8:	88c00015 	stw	r3,0(r17)
  805eac:	003ff706 	br	805e8c <__alt_data_end+0xff805e8c>

00805eb0 <_read_r>:
  805eb0:	defffd04 	addi	sp,sp,-12
  805eb4:	dc000015 	stw	r16,0(sp)
  805eb8:	04002074 	movhi	r16,129
  805ebc:	dc400115 	stw	r17,4(sp)
  805ec0:	8420de04 	addi	r16,r16,-31880
  805ec4:	2023883a 	mov	r17,r4
  805ec8:	2809883a 	mov	r4,r5
  805ecc:	300b883a 	mov	r5,r6
  805ed0:	380d883a 	mov	r6,r7
  805ed4:	dfc00215 	stw	ra,8(sp)
  805ed8:	80000015 	stw	zero,0(r16)
  805edc:	08064140 	call	806414 <read>
  805ee0:	00ffffc4 	movi	r3,-1
  805ee4:	10c00526 	beq	r2,r3,805efc <_read_r+0x4c>
  805ee8:	dfc00217 	ldw	ra,8(sp)
  805eec:	dc400117 	ldw	r17,4(sp)
  805ef0:	dc000017 	ldw	r16,0(sp)
  805ef4:	dec00304 	addi	sp,sp,12
  805ef8:	f800283a 	ret
  805efc:	80c00017 	ldw	r3,0(r16)
  805f00:	183ff926 	beq	r3,zero,805ee8 <__alt_data_end+0xff805ee8>
  805f04:	88c00015 	stw	r3,0(r17)
  805f08:	003ff706 	br	805ee8 <__alt_data_end+0xff805ee8>

00805f0c <udivmodsi4>:
  805f0c:	2900182e 	bgeu	r5,r4,805f70 <udivmodsi4+0x64>
  805f10:	28001716 	blt	r5,zero,805f70 <udivmodsi4+0x64>
  805f14:	00800804 	movi	r2,32
  805f18:	00c00044 	movi	r3,1
  805f1c:	00000206 	br	805f28 <udivmodsi4+0x1c>
  805f20:	10001126 	beq	r2,zero,805f68 <udivmodsi4+0x5c>
  805f24:	28000516 	blt	r5,zero,805f3c <udivmodsi4+0x30>
  805f28:	294b883a 	add	r5,r5,r5
  805f2c:	10bfffc4 	addi	r2,r2,-1
  805f30:	18c7883a 	add	r3,r3,r3
  805f34:	293ffa36 	bltu	r5,r4,805f20 <__alt_data_end+0xff805f20>
  805f38:	18000b26 	beq	r3,zero,805f68 <udivmodsi4+0x5c>
  805f3c:	0005883a 	mov	r2,zero
  805f40:	21400236 	bltu	r4,r5,805f4c <udivmodsi4+0x40>
  805f44:	2149c83a 	sub	r4,r4,r5
  805f48:	10c4b03a 	or	r2,r2,r3
  805f4c:	1806d07a 	srli	r3,r3,1
  805f50:	280ad07a 	srli	r5,r5,1
  805f54:	183ffa1e 	bne	r3,zero,805f40 <__alt_data_end+0xff805f40>
  805f58:	3000011e 	bne	r6,zero,805f60 <udivmodsi4+0x54>
  805f5c:	f800283a 	ret
  805f60:	2005883a 	mov	r2,r4
  805f64:	f800283a 	ret
  805f68:	0005883a 	mov	r2,zero
  805f6c:	003ffa06 	br	805f58 <__alt_data_end+0xff805f58>
  805f70:	00c00044 	movi	r3,1
  805f74:	003ff106 	br	805f3c <__alt_data_end+0xff805f3c>

00805f78 <__divsi3>:
  805f78:	defffe04 	addi	sp,sp,-8
  805f7c:	dfc00115 	stw	ra,4(sp)
  805f80:	dc000015 	stw	r16,0(sp)
  805f84:	20000b16 	blt	r4,zero,805fb4 <__divsi3+0x3c>
  805f88:	0021883a 	mov	r16,zero
  805f8c:	28000c16 	blt	r5,zero,805fc0 <__divsi3+0x48>
  805f90:	000d883a 	mov	r6,zero
  805f94:	0805f0c0 	call	805f0c <udivmodsi4>
  805f98:	0407c83a 	sub	r3,zero,r16
  805f9c:	1884f03a 	xor	r2,r3,r2
  805fa0:	1405883a 	add	r2,r2,r16
  805fa4:	dfc00117 	ldw	ra,4(sp)
  805fa8:	dc000017 	ldw	r16,0(sp)
  805fac:	dec00204 	addi	sp,sp,8
  805fb0:	f800283a 	ret
  805fb4:	0109c83a 	sub	r4,zero,r4
  805fb8:	04000044 	movi	r16,1
  805fbc:	283ff40e 	bge	r5,zero,805f90 <__alt_data_end+0xff805f90>
  805fc0:	014bc83a 	sub	r5,zero,r5
  805fc4:	8400005c 	xori	r16,r16,1
  805fc8:	003ff106 	br	805f90 <__alt_data_end+0xff805f90>

00805fcc <__modsi3>:
  805fcc:	defffd04 	addi	sp,sp,-12
  805fd0:	dfc00215 	stw	ra,8(sp)
  805fd4:	dc400115 	stw	r17,4(sp)
  805fd8:	dc000015 	stw	r16,0(sp)
  805fdc:	20000c16 	blt	r4,zero,806010 <__modsi3+0x44>
  805fe0:	0023883a 	mov	r17,zero
  805fe4:	0021883a 	mov	r16,zero
  805fe8:	28000d16 	blt	r5,zero,806020 <__modsi3+0x54>
  805fec:	01800044 	movi	r6,1
  805ff0:	0805f0c0 	call	805f0c <udivmodsi4>
  805ff4:	1404f03a 	xor	r2,r2,r16
  805ff8:	8885883a 	add	r2,r17,r2
  805ffc:	dfc00217 	ldw	ra,8(sp)
  806000:	dc400117 	ldw	r17,4(sp)
  806004:	dc000017 	ldw	r16,0(sp)
  806008:	dec00304 	addi	sp,sp,12
  80600c:	f800283a 	ret
  806010:	0109c83a 	sub	r4,zero,r4
  806014:	04400044 	movi	r17,1
  806018:	043fffc4 	movi	r16,-1
  80601c:	283ff30e 	bge	r5,zero,805fec <__alt_data_end+0xff805fec>
  806020:	014bc83a 	sub	r5,zero,r5
  806024:	003ff106 	br	805fec <__alt_data_end+0xff805fec>

00806028 <__udivsi3>:
  806028:	000d883a 	mov	r6,zero
  80602c:	0805f0c1 	jmpi	805f0c <udivmodsi4>

00806030 <__umodsi3>:
  806030:	01800044 	movi	r6,1
  806034:	0805f0c1 	jmpi	805f0c <udivmodsi4>

00806038 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  806038:	defffd04 	addi	sp,sp,-12
  80603c:	df000215 	stw	fp,8(sp)
  806040:	df000204 	addi	fp,sp,8
  806044:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  806048:	0001883a 	nop
  80604c:	e0bfff17 	ldw	r2,-4(fp)
  806050:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  806054:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  806058:	10000226 	beq	r2,zero,806064 <_exit+0x2c>
    ALT_SIM_FAIL();
  80605c:	002af070 	cmpltui	zero,zero,43969
  806060:	00000106 	br	806068 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  806064:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  806068:	003fff06 	br	806068 <__alt_data_end+0xff806068>

0080606c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80606c:	defffe04 	addi	sp,sp,-8
  806070:	dfc00115 	stw	ra,4(sp)
  806074:	df000015 	stw	fp,0(sp)
  806078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80607c:	00802034 	movhi	r2,128
  806080:	109dac04 	addi	r2,r2,30384
  806084:	10800017 	ldw	r2,0(r2)
  806088:	10000526 	beq	r2,zero,8060a0 <alt_get_errno+0x34>
  80608c:	00802034 	movhi	r2,128
  806090:	109dac04 	addi	r2,r2,30384
  806094:	10800017 	ldw	r2,0(r2)
  806098:	103ee83a 	callr	r2
  80609c:	00000206 	br	8060a8 <alt_get_errno+0x3c>
  8060a0:	00802074 	movhi	r2,129
  8060a4:	10a0de04 	addi	r2,r2,-31880
}
  8060a8:	e037883a 	mov	sp,fp
  8060ac:	dfc00117 	ldw	ra,4(sp)
  8060b0:	df000017 	ldw	fp,0(sp)
  8060b4:	dec00204 	addi	sp,sp,8
  8060b8:	f800283a 	ret

008060bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8060bc:	defffb04 	addi	sp,sp,-20
  8060c0:	dfc00415 	stw	ra,16(sp)
  8060c4:	df000315 	stw	fp,12(sp)
  8060c8:	df000304 	addi	fp,sp,12
  8060cc:	e13ffe15 	stw	r4,-8(fp)
  8060d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8060d4:	e0bffe17 	ldw	r2,-8(fp)
  8060d8:	10000616 	blt	r2,zero,8060f4 <fstat+0x38>
  8060dc:	e0bffe17 	ldw	r2,-8(fp)
  8060e0:	10c00324 	muli	r3,r2,12
  8060e4:	00802034 	movhi	r2,128
  8060e8:	109b3b04 	addi	r2,r2,27884
  8060ec:	1885883a 	add	r2,r3,r2
  8060f0:	00000106 	br	8060f8 <fstat+0x3c>
  8060f4:	0005883a 	mov	r2,zero
  8060f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8060fc:	e0bffd17 	ldw	r2,-12(fp)
  806100:	10001026 	beq	r2,zero,806144 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  806104:	e0bffd17 	ldw	r2,-12(fp)
  806108:	10800017 	ldw	r2,0(r2)
  80610c:	10800817 	ldw	r2,32(r2)
  806110:	10000726 	beq	r2,zero,806130 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  806114:	e0bffd17 	ldw	r2,-12(fp)
  806118:	10800017 	ldw	r2,0(r2)
  80611c:	10800817 	ldw	r2,32(r2)
  806120:	e13ffd17 	ldw	r4,-12(fp)
  806124:	e17fff17 	ldw	r5,-4(fp)
  806128:	103ee83a 	callr	r2
  80612c:	00000a06 	br	806158 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  806130:	e0bfff17 	ldw	r2,-4(fp)
  806134:	00c80004 	movi	r3,8192
  806138:	10c00115 	stw	r3,4(r2)
      return 0;
  80613c:	0005883a 	mov	r2,zero
  806140:	00000506 	br	806158 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  806144:	080606c0 	call	80606c <alt_get_errno>
  806148:	1007883a 	mov	r3,r2
  80614c:	00801444 	movi	r2,81
  806150:	18800015 	stw	r2,0(r3)
    return -1;
  806154:	00bfffc4 	movi	r2,-1
  }
}
  806158:	e037883a 	mov	sp,fp
  80615c:	dfc00117 	ldw	ra,4(sp)
  806160:	df000017 	ldw	fp,0(sp)
  806164:	dec00204 	addi	sp,sp,8
  806168:	f800283a 	ret

0080616c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80616c:	defffe04 	addi	sp,sp,-8
  806170:	dfc00115 	stw	ra,4(sp)
  806174:	df000015 	stw	fp,0(sp)
  806178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80617c:	00802034 	movhi	r2,128
  806180:	109dac04 	addi	r2,r2,30384
  806184:	10800017 	ldw	r2,0(r2)
  806188:	10000526 	beq	r2,zero,8061a0 <alt_get_errno+0x34>
  80618c:	00802034 	movhi	r2,128
  806190:	109dac04 	addi	r2,r2,30384
  806194:	10800017 	ldw	r2,0(r2)
  806198:	103ee83a 	callr	r2
  80619c:	00000206 	br	8061a8 <alt_get_errno+0x3c>
  8061a0:	00802074 	movhi	r2,129
  8061a4:	10a0de04 	addi	r2,r2,-31880
}
  8061a8:	e037883a 	mov	sp,fp
  8061ac:	dfc00117 	ldw	ra,4(sp)
  8061b0:	df000017 	ldw	fp,0(sp)
  8061b4:	dec00204 	addi	sp,sp,8
  8061b8:	f800283a 	ret

008061bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8061bc:	deffed04 	addi	sp,sp,-76
  8061c0:	dfc01215 	stw	ra,72(sp)
  8061c4:	df001115 	stw	fp,68(sp)
  8061c8:	df001104 	addi	fp,sp,68
  8061cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8061d0:	e0bfff17 	ldw	r2,-4(fp)
  8061d4:	10000616 	blt	r2,zero,8061f0 <isatty+0x34>
  8061d8:	e0bfff17 	ldw	r2,-4(fp)
  8061dc:	10c00324 	muli	r3,r2,12
  8061e0:	00802034 	movhi	r2,128
  8061e4:	109b3b04 	addi	r2,r2,27884
  8061e8:	1885883a 	add	r2,r3,r2
  8061ec:	00000106 	br	8061f4 <isatty+0x38>
  8061f0:	0005883a 	mov	r2,zero
  8061f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8061f8:	e0bfef17 	ldw	r2,-68(fp)
  8061fc:	10000e26 	beq	r2,zero,806238 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  806200:	e0bfef17 	ldw	r2,-68(fp)
  806204:	10800017 	ldw	r2,0(r2)
  806208:	10800817 	ldw	r2,32(r2)
  80620c:	1000021e 	bne	r2,zero,806218 <isatty+0x5c>
    {
      return 1;
  806210:	00800044 	movi	r2,1
  806214:	00000d06 	br	80624c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  806218:	e0bff004 	addi	r2,fp,-64
  80621c:	e13fff17 	ldw	r4,-4(fp)
  806220:	100b883a 	mov	r5,r2
  806224:	08060bc0 	call	8060bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  806228:	e0bff117 	ldw	r2,-60(fp)
  80622c:	10880020 	cmpeqi	r2,r2,8192
  806230:	10803fcc 	andi	r2,r2,255
  806234:	00000506 	br	80624c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  806238:	080616c0 	call	80616c <alt_get_errno>
  80623c:	1007883a 	mov	r3,r2
  806240:	00801444 	movi	r2,81
  806244:	18800015 	stw	r2,0(r3)
    return 0;
  806248:	0005883a 	mov	r2,zero
  }
}
  80624c:	e037883a 	mov	sp,fp
  806250:	dfc00117 	ldw	ra,4(sp)
  806254:	df000017 	ldw	fp,0(sp)
  806258:	dec00204 	addi	sp,sp,8
  80625c:	f800283a 	ret

00806260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806260:	defffe04 	addi	sp,sp,-8
  806264:	dfc00115 	stw	ra,4(sp)
  806268:	df000015 	stw	fp,0(sp)
  80626c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806270:	00802034 	movhi	r2,128
  806274:	109dac04 	addi	r2,r2,30384
  806278:	10800017 	ldw	r2,0(r2)
  80627c:	10000526 	beq	r2,zero,806294 <alt_get_errno+0x34>
  806280:	00802034 	movhi	r2,128
  806284:	109dac04 	addi	r2,r2,30384
  806288:	10800017 	ldw	r2,0(r2)
  80628c:	103ee83a 	callr	r2
  806290:	00000206 	br	80629c <alt_get_errno+0x3c>
  806294:	00802074 	movhi	r2,129
  806298:	10a0de04 	addi	r2,r2,-31880
}
  80629c:	e037883a 	mov	sp,fp
  8062a0:	dfc00117 	ldw	ra,4(sp)
  8062a4:	df000017 	ldw	fp,0(sp)
  8062a8:	dec00204 	addi	sp,sp,8
  8062ac:	f800283a 	ret

008062b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8062b0:	defff904 	addi	sp,sp,-28
  8062b4:	dfc00615 	stw	ra,24(sp)
  8062b8:	df000515 	stw	fp,20(sp)
  8062bc:	df000504 	addi	fp,sp,20
  8062c0:	e13ffd15 	stw	r4,-12(fp)
  8062c4:	e17ffe15 	stw	r5,-8(fp)
  8062c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8062cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8062d0:	e0bffd17 	ldw	r2,-12(fp)
  8062d4:	10000616 	blt	r2,zero,8062f0 <lseek+0x40>
  8062d8:	e0bffd17 	ldw	r2,-12(fp)
  8062dc:	10c00324 	muli	r3,r2,12
  8062e0:	00802034 	movhi	r2,128
  8062e4:	109b3b04 	addi	r2,r2,27884
  8062e8:	1885883a 	add	r2,r3,r2
  8062ec:	00000106 	br	8062f4 <lseek+0x44>
  8062f0:	0005883a 	mov	r2,zero
  8062f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8062f8:	e0bffc17 	ldw	r2,-16(fp)
  8062fc:	10001026 	beq	r2,zero,806340 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  806300:	e0bffc17 	ldw	r2,-16(fp)
  806304:	10800017 	ldw	r2,0(r2)
  806308:	10800717 	ldw	r2,28(r2)
  80630c:	10000926 	beq	r2,zero,806334 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  806310:	e0bffc17 	ldw	r2,-16(fp)
  806314:	10800017 	ldw	r2,0(r2)
  806318:	10800717 	ldw	r2,28(r2)
  80631c:	e13ffc17 	ldw	r4,-16(fp)
  806320:	e17ffe17 	ldw	r5,-8(fp)
  806324:	e1bfff17 	ldw	r6,-4(fp)
  806328:	103ee83a 	callr	r2
  80632c:	e0bffb15 	stw	r2,-20(fp)
  806330:	00000506 	br	806348 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  806334:	00bfde84 	movi	r2,-134
  806338:	e0bffb15 	stw	r2,-20(fp)
  80633c:	00000206 	br	806348 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  806340:	00bfebc4 	movi	r2,-81
  806344:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  806348:	e0bffb17 	ldw	r2,-20(fp)
  80634c:	1000070e 	bge	r2,zero,80636c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  806350:	08062600 	call	806260 <alt_get_errno>
  806354:	1007883a 	mov	r3,r2
  806358:	e0bffb17 	ldw	r2,-20(fp)
  80635c:	0085c83a 	sub	r2,zero,r2
  806360:	18800015 	stw	r2,0(r3)
    rc = -1;
  806364:	00bfffc4 	movi	r2,-1
  806368:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80636c:	e0bffb17 	ldw	r2,-20(fp)
}
  806370:	e037883a 	mov	sp,fp
  806374:	dfc00117 	ldw	ra,4(sp)
  806378:	df000017 	ldw	fp,0(sp)
  80637c:	dec00204 	addi	sp,sp,8
  806380:	f800283a 	ret

00806384 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  806384:	defffe04 	addi	sp,sp,-8
  806388:	df000115 	stw	fp,4(sp)
  80638c:	df000104 	addi	fp,sp,4
  806390:	e13fff15 	stw	r4,-4(fp)
}
  806394:	e037883a 	mov	sp,fp
  806398:	df000017 	ldw	fp,0(sp)
  80639c:	dec00104 	addi	sp,sp,4
  8063a0:	f800283a 	ret

008063a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8063a4:	defffe04 	addi	sp,sp,-8
  8063a8:	df000115 	stw	fp,4(sp)
  8063ac:	df000104 	addi	fp,sp,4
  8063b0:	e13fff15 	stw	r4,-4(fp)
}
  8063b4:	e037883a 	mov	sp,fp
  8063b8:	df000017 	ldw	fp,0(sp)
  8063bc:	dec00104 	addi	sp,sp,4
  8063c0:	f800283a 	ret

008063c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8063c4:	defffe04 	addi	sp,sp,-8
  8063c8:	dfc00115 	stw	ra,4(sp)
  8063cc:	df000015 	stw	fp,0(sp)
  8063d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8063d4:	00802034 	movhi	r2,128
  8063d8:	109dac04 	addi	r2,r2,30384
  8063dc:	10800017 	ldw	r2,0(r2)
  8063e0:	10000526 	beq	r2,zero,8063f8 <alt_get_errno+0x34>
  8063e4:	00802034 	movhi	r2,128
  8063e8:	109dac04 	addi	r2,r2,30384
  8063ec:	10800017 	ldw	r2,0(r2)
  8063f0:	103ee83a 	callr	r2
  8063f4:	00000206 	br	806400 <alt_get_errno+0x3c>
  8063f8:	00802074 	movhi	r2,129
  8063fc:	10a0de04 	addi	r2,r2,-31880
}
  806400:	e037883a 	mov	sp,fp
  806404:	dfc00117 	ldw	ra,4(sp)
  806408:	df000017 	ldw	fp,0(sp)
  80640c:	dec00204 	addi	sp,sp,8
  806410:	f800283a 	ret

00806414 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  806414:	defff904 	addi	sp,sp,-28
  806418:	dfc00615 	stw	ra,24(sp)
  80641c:	df000515 	stw	fp,20(sp)
  806420:	df000504 	addi	fp,sp,20
  806424:	e13ffd15 	stw	r4,-12(fp)
  806428:	e17ffe15 	stw	r5,-8(fp)
  80642c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  806430:	e0bffd17 	ldw	r2,-12(fp)
  806434:	10000616 	blt	r2,zero,806450 <read+0x3c>
  806438:	e0bffd17 	ldw	r2,-12(fp)
  80643c:	10c00324 	muli	r3,r2,12
  806440:	00802034 	movhi	r2,128
  806444:	109b3b04 	addi	r2,r2,27884
  806448:	1885883a 	add	r2,r3,r2
  80644c:	00000106 	br	806454 <read+0x40>
  806450:	0005883a 	mov	r2,zero
  806454:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  806458:	e0bffb17 	ldw	r2,-20(fp)
  80645c:	10002226 	beq	r2,zero,8064e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  806460:	e0bffb17 	ldw	r2,-20(fp)
  806464:	10800217 	ldw	r2,8(r2)
  806468:	108000cc 	andi	r2,r2,3
  80646c:	10800060 	cmpeqi	r2,r2,1
  806470:	1000181e 	bne	r2,zero,8064d4 <read+0xc0>
        (fd->dev->read))
  806474:	e0bffb17 	ldw	r2,-20(fp)
  806478:	10800017 	ldw	r2,0(r2)
  80647c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  806480:	10001426 	beq	r2,zero,8064d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  806484:	e0bffb17 	ldw	r2,-20(fp)
  806488:	10800017 	ldw	r2,0(r2)
  80648c:	10800517 	ldw	r2,20(r2)
  806490:	e0ffff17 	ldw	r3,-4(fp)
  806494:	e13ffb17 	ldw	r4,-20(fp)
  806498:	e17ffe17 	ldw	r5,-8(fp)
  80649c:	180d883a 	mov	r6,r3
  8064a0:	103ee83a 	callr	r2
  8064a4:	e0bffc15 	stw	r2,-16(fp)
  8064a8:	e0bffc17 	ldw	r2,-16(fp)
  8064ac:	1000070e 	bge	r2,zero,8064cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8064b0:	08063c40 	call	8063c4 <alt_get_errno>
  8064b4:	1007883a 	mov	r3,r2
  8064b8:	e0bffc17 	ldw	r2,-16(fp)
  8064bc:	0085c83a 	sub	r2,zero,r2
  8064c0:	18800015 	stw	r2,0(r3)
          return -1;
  8064c4:	00bfffc4 	movi	r2,-1
  8064c8:	00000c06 	br	8064fc <read+0xe8>
        }
        return rval;
  8064cc:	e0bffc17 	ldw	r2,-16(fp)
  8064d0:	00000a06 	br	8064fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8064d4:	08063c40 	call	8063c4 <alt_get_errno>
  8064d8:	1007883a 	mov	r3,r2
  8064dc:	00800344 	movi	r2,13
  8064e0:	18800015 	stw	r2,0(r3)
  8064e4:	00000406 	br	8064f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8064e8:	08063c40 	call	8063c4 <alt_get_errno>
  8064ec:	1007883a 	mov	r3,r2
  8064f0:	00801444 	movi	r2,81
  8064f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8064f8:	00bfffc4 	movi	r2,-1
}
  8064fc:	e037883a 	mov	sp,fp
  806500:	dfc00117 	ldw	ra,4(sp)
  806504:	df000017 	ldw	fp,0(sp)
  806508:	dec00204 	addi	sp,sp,8
  80650c:	f800283a 	ret

00806510 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  806510:	defff904 	addi	sp,sp,-28
  806514:	df000615 	stw	fp,24(sp)
  806518:	df000604 	addi	fp,sp,24
  80651c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806520:	0005303a 	rdctl	r2,status
  806524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806528:	e0fffc17 	ldw	r3,-16(fp)
  80652c:	00bfff84 	movi	r2,-2
  806530:	1884703a 	and	r2,r3,r2
  806534:	1001703a 	wrctl	status,r2
  
  return context;
  806538:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80653c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  806540:	d0a00f17 	ldw	r2,-32708(gp)
  806544:	10c000c4 	addi	r3,r2,3
  806548:	00bfff04 	movi	r2,-4
  80654c:	1884703a 	and	r2,r3,r2
  806550:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  806554:	d0e00f17 	ldw	r3,-32708(gp)
  806558:	e0bfff17 	ldw	r2,-4(fp)
  80655c:	1887883a 	add	r3,r3,r2
  806560:	00804034 	movhi	r2,256
  806564:	10800004 	addi	r2,r2,0
  806568:	10c0062e 	bgeu	r2,r3,806584 <sbrk+0x74>
  80656c:	e0bffa17 	ldw	r2,-24(fp)
  806570:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806574:	e0bffd17 	ldw	r2,-12(fp)
  806578:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80657c:	00bfffc4 	movi	r2,-1
  806580:	00000b06 	br	8065b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  806584:	d0a00f17 	ldw	r2,-32708(gp)
  806588:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  80658c:	d0e00f17 	ldw	r3,-32708(gp)
  806590:	e0bfff17 	ldw	r2,-4(fp)
  806594:	1885883a 	add	r2,r3,r2
  806598:	d0a00f15 	stw	r2,-32708(gp)
  80659c:	e0bffa17 	ldw	r2,-24(fp)
  8065a0:	e0bffe15 	stw	r2,-8(fp)
  8065a4:	e0bffe17 	ldw	r2,-8(fp)
  8065a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8065ac:	e0bffb17 	ldw	r2,-20(fp)
} 
  8065b0:	e037883a 	mov	sp,fp
  8065b4:	df000017 	ldw	fp,0(sp)
  8065b8:	dec00104 	addi	sp,sp,4
  8065bc:	f800283a 	ret

008065c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8065c0:	defffe04 	addi	sp,sp,-8
  8065c4:	dfc00115 	stw	ra,4(sp)
  8065c8:	df000015 	stw	fp,0(sp)
  8065cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8065d0:	00802034 	movhi	r2,128
  8065d4:	109dac04 	addi	r2,r2,30384
  8065d8:	10800017 	ldw	r2,0(r2)
  8065dc:	10000526 	beq	r2,zero,8065f4 <alt_get_errno+0x34>
  8065e0:	00802034 	movhi	r2,128
  8065e4:	109dac04 	addi	r2,r2,30384
  8065e8:	10800017 	ldw	r2,0(r2)
  8065ec:	103ee83a 	callr	r2
  8065f0:	00000206 	br	8065fc <alt_get_errno+0x3c>
  8065f4:	00802074 	movhi	r2,129
  8065f8:	10a0de04 	addi	r2,r2,-31880
}
  8065fc:	e037883a 	mov	sp,fp
  806600:	dfc00117 	ldw	ra,4(sp)
  806604:	df000017 	ldw	fp,0(sp)
  806608:	dec00204 	addi	sp,sp,8
  80660c:	f800283a 	ret

00806610 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  806610:	defff904 	addi	sp,sp,-28
  806614:	dfc00615 	stw	ra,24(sp)
  806618:	df000515 	stw	fp,20(sp)
  80661c:	df000504 	addi	fp,sp,20
  806620:	e13ffd15 	stw	r4,-12(fp)
  806624:	e17ffe15 	stw	r5,-8(fp)
  806628:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80662c:	e0bffd17 	ldw	r2,-12(fp)
  806630:	10000616 	blt	r2,zero,80664c <write+0x3c>
  806634:	e0bffd17 	ldw	r2,-12(fp)
  806638:	10c00324 	muli	r3,r2,12
  80663c:	00802034 	movhi	r2,128
  806640:	109b3b04 	addi	r2,r2,27884
  806644:	1885883a 	add	r2,r3,r2
  806648:	00000106 	br	806650 <write+0x40>
  80664c:	0005883a 	mov	r2,zero
  806650:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  806654:	e0bffb17 	ldw	r2,-20(fp)
  806658:	10002126 	beq	r2,zero,8066e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80665c:	e0bffb17 	ldw	r2,-20(fp)
  806660:	10800217 	ldw	r2,8(r2)
  806664:	108000cc 	andi	r2,r2,3
  806668:	10001826 	beq	r2,zero,8066cc <write+0xbc>
  80666c:	e0bffb17 	ldw	r2,-20(fp)
  806670:	10800017 	ldw	r2,0(r2)
  806674:	10800617 	ldw	r2,24(r2)
  806678:	10001426 	beq	r2,zero,8066cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80667c:	e0bffb17 	ldw	r2,-20(fp)
  806680:	10800017 	ldw	r2,0(r2)
  806684:	10800617 	ldw	r2,24(r2)
  806688:	e0ffff17 	ldw	r3,-4(fp)
  80668c:	e13ffb17 	ldw	r4,-20(fp)
  806690:	e17ffe17 	ldw	r5,-8(fp)
  806694:	180d883a 	mov	r6,r3
  806698:	103ee83a 	callr	r2
  80669c:	e0bffc15 	stw	r2,-16(fp)
  8066a0:	e0bffc17 	ldw	r2,-16(fp)
  8066a4:	1000070e 	bge	r2,zero,8066c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8066a8:	08065c00 	call	8065c0 <alt_get_errno>
  8066ac:	1007883a 	mov	r3,r2
  8066b0:	e0bffc17 	ldw	r2,-16(fp)
  8066b4:	0085c83a 	sub	r2,zero,r2
  8066b8:	18800015 	stw	r2,0(r3)
        return -1;
  8066bc:	00bfffc4 	movi	r2,-1
  8066c0:	00000c06 	br	8066f4 <write+0xe4>
      }
      return rval;
  8066c4:	e0bffc17 	ldw	r2,-16(fp)
  8066c8:	00000a06 	br	8066f4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8066cc:	08065c00 	call	8065c0 <alt_get_errno>
  8066d0:	1007883a 	mov	r3,r2
  8066d4:	00800344 	movi	r2,13
  8066d8:	18800015 	stw	r2,0(r3)
  8066dc:	00000406 	br	8066f0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8066e0:	08065c00 	call	8065c0 <alt_get_errno>
  8066e4:	1007883a 	mov	r3,r2
  8066e8:	00801444 	movi	r2,81
  8066ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8066f0:	00bfffc4 	movi	r2,-1
}
  8066f4:	e037883a 	mov	sp,fp
  8066f8:	dfc00117 	ldw	ra,4(sp)
  8066fc:	df000017 	ldw	fp,0(sp)
  806700:	dec00204 	addi	sp,sp,8
  806704:	f800283a 	ret
